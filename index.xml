<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>引言 on Spring AI 1.0.0</title>
    <link>https://studyllm.github.io/</link>
    <description>Recent content in 引言 on Spring AI 1.0.0</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <atom:link href="https://studyllm.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Azure AI 服务</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/azure-ai-%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/azure-ai-%E6%9C%8D%E5%8A%A1/</guid>
      <description>&lt;h1 id=&#34;azure-ai-服务&#34;&gt;&#xA;  Azure AI 服务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#azure-ai-%e6%9c%8d%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将引导您设置 &lt;code&gt;AzureVectorStore&lt;/code&gt; 来存储文档嵌入并使用 Azure AI 搜索服务执行相似性搜索。&lt;/p&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://azure.microsoft.com/en-us/products/ai-services/ai-search/&#34;&gt;Azure AI Search&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://azure.microsoft.com/en-us/products/ai-services/ai-search/&#34;&gt;https://azure.microsoft.com/en-us/products/ai-services/ai-search/&lt;/a&gt;) 是一个多功能的云托管云信息检索系统，是微软更强大的 AI 平台的一部分。除其他功能外，它还允许用户使用基于向量的存储和检索来查询信息。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;配置&#34;&gt;&#xA;  配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在启动时，如果您选择通过在构造函数中将相关的 &lt;code&gt;initialize-schema&lt;/code&gt; &lt;code&gt;boolean&lt;/code&gt; 属性设置为 &lt;code&gt;true&lt;/code&gt; 来加入，或者如果使用 Spring Boot，则在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置 …​&lt;code&gt;initialize-schema&lt;/code&gt;=&lt;code&gt;true&lt;/code&gt; ，则 &lt;code&gt;AzureVectorStore&lt;/code&gt; 可以尝试在您的 AI 搜索服务实例中创建一个新索引。&lt;/p&gt;&#xA;&lt;p&gt;或者，您可以手动创建索引。&lt;/p&gt;&#xA;&lt;p&gt;要设置 AzureVectorStore，您将需要从上面的先决条件中检索到的设置以及索引名称：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Azure AI 搜索终结点 Azure AI Search Endpoint&lt;/li&gt;&#xA;&lt;li&gt;Azure AI 搜索键&lt;/li&gt;&#xA;&lt;li&gt;（可选）Azure OpenAI API 端点&lt;/li&gt;&#xA;&lt;li&gt;（可选）Azure OpenAI API 密钥&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;您可以将这些值提供为操作系统环境变量。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export AZURE_AI_SEARCH_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;My AI Search API Key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export AZURE_AI_SEARCH_ENDPOINT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;My AI Search Index&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export OPENAI_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;My Azure AI API Key&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Optional&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;依赖项&#34;&gt;&#xA;  依赖项&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%be%9d%e8%b5%96%e9%a1%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;将这些依赖项添加到您的项目：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure OpenAI 图像生成</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%9E%8B-api/azure-openai-%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%9E%8B-api/azure-openai-%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90/</guid>
      <description>&lt;h1 id=&#34;azure-openai-图像生成&#34;&gt;&#xA;  Azure OpenAI 图像生成&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#azure-openai-%e5%9b%be%e5%83%8f%e7%94%9f%e6%88%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 Azure OpenAI 的图像生成模型 DALL-E。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;从 [&#xA;  &lt;a href=&#34;https://portal.azure.com&#34;&gt;Azure 门户&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://portal.azure.com&#34;&gt;https://portal.azure.com&lt;/a&gt;)上的 Azure OpenAI 服务部分获取 Azure OpenAI &lt;code&gt;endpoint&lt;/code&gt; 和 &lt;code&gt;api-key&lt;/code&gt; 。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI 定义了两个配置属性：&lt;/p&gt;&#xA;&lt;p&gt;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置这些配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.azure.openai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-azure-openai-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.azure.openai.endpoint&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-azure-openai-endpoint&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 (SpEL) 来引用自定义环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;azure&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;openai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${AZURE_OPENAI_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;endpoint&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${AZURE_OPENAI_ENDPOINT}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export AZURE_OPENAI_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-azure-openai-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export AZURE_OPENAI_ENDPOINT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-azure-openai-endpoint&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置这些配置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve API key and endpoint from secure sources or environment variables&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String apiKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AZURE_OPENAI_API_KEY&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String endpoint &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AZURE_OPENAI_ENDPOINT&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;部署名称&#34;&gt;&#xA;  部署名称&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%83%a8%e7%bd%b2%e5%90%8d%e7%a7%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;要运行 Azure AI 应用程序，请通过 &#xA;  &lt;a href=&#34;[[oai.azure.com/portal]%28https://oai.azure.com/portal%29]%28https://[oai.azure.com/portal]%28https://oai.azure.com/portal%29%29&#34;&gt;Azure AI 门户&lt;/a&gt; 创建 Azure AI 部署。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure OpenAI 转录</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E9%9F%B3%E9%A2%91%E6%A8%A1%E5%9E%8B/%E8%BD%AC%E5%BD%95-api/azure-openai-%E8%BD%AC%E5%BD%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E9%9F%B3%E9%A2%91%E6%A8%A1%E5%9E%8B/%E8%BD%AC%E5%BD%95-api/azure-openai-%E8%BD%AC%E5%BD%95/</guid>
      <description>&lt;h1 id=&#34;azure-openai-转录&#34;&gt;&#xA;  Azure OpenAI 转录&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#azure-openai-%e8%bd%ac%e5%bd%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 [&#xA;  &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/ai-services/openai/whisper-quickstart?tabs=command-line%2Cpython-new&amp;amp;pivots=rest-api&#34;&gt;Azure Whisper 模型&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/ai-services/openai/whisper-quickstart?tabs=command-line%2Cpython-new&amp;amp;pivots=rest-api&#34;&gt;https://learn.microsoft.com/en-us/azure/ai-services/openai/whisper-quickstart?tabs=command-line%2Cpython-new&amp;pivots=rest-api&lt;/a&gt;) 。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;从 [&#xA;  &lt;a href=&#34;https://portal.azure.com&#34;&gt;Azure 门户&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://portal.azure.com&#34;&gt;https://portal.azure.com&lt;/a&gt;)上的“Azure OpenAI 服务”部分获取 Azure OpenAI &lt;code&gt;endpoint&lt;/code&gt; 和 &lt;code&gt;api-key&lt;/code&gt; 。Spring AI 定义了一个名为 spring.ai.azure.openai.&lt;code&gt;api-key&lt;/code&gt; 的配置属性，您应将其设置为从 Azure 获取的 &lt;code&gt;API Key&lt;/code&gt; 的值。还有一个名为 spring.ai.azure.openai.&lt;code&gt;endpoint&lt;/code&gt; 的配置属性，您应将其设置为在 Azure 中预配模型时获取的端点 URL。导出环境变量是设置该配置属性的一种方法：&lt;/p&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Azure OpenAI 转录生成客户端提供 Spring Boot 自动配置。 Spring AI offers Spring Boot auto-configuration for the Azure OpenAI Transcription Generation Client. 若要启用此功能，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件：To enable it, add the following dependency to your project&amp;rsquo;s Maven &lt;code&gt;pom.xml&lt;/code&gt; file:&lt;/p&gt;</description>
    </item>
    <item>
      <title>ETL 管道</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A3%80%E7%B4%A2%E5%A2%9E%E5%BC%BA%E7%94%9F%E6%88%90/etl-%E7%AE%A1%E9%81%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A3%80%E7%B4%A2%E5%A2%9E%E5%BC%BA%E7%94%9F%E6%88%90/etl-%E7%AE%A1%E9%81%93/</guid>
      <description>&lt;h1 id=&#34;etl-管道&#34;&gt;&#xA;  ETL 管道&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#etl-%e7%ae%a1%e9%81%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;提取、转换和加载 (ETL) 框架是检索增强生成 (RAG) 用例中数据处理的支柱。&lt;/p&gt;&#xA;&lt;p&gt;ETL 管道协调从原始数据源到结构化向量存储的流程，确保数据采用 AI 模型检索的最佳格式。&lt;/p&gt;&#xA;&lt;p&gt;RAG 用例是文本，通过从数据主体中检索相关信息来增强生成模型的功能，从而提高生成输出的质量和相关性。&lt;/p&gt;&#xA;&lt;h2 id=&#34;api-概述&#34;&gt;&#xA;  API 概述&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#api-%e6%a6%82%e8%bf%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ETL 管道创建、转换和存储 &lt;code&gt;Document&lt;/code&gt; 实例。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;./images/spring-ai-document1-api.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Document&lt;/code&gt; 类包含文本、元数据和可选的附加媒体类型，如图像、音频和视频。&lt;/p&gt;&#xA;&lt;p&gt;ETL 管道有三个主要组件，&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;实现 Supplier&amp;lt;List&lt;Document&gt;&amp;gt; DocumentReader&lt;/li&gt;&#xA;&lt;li&gt;实现 Function&amp;lt;List&lt;Document&gt;, List&lt;Document&gt;&amp;gt; 的 DocumentTransformer&lt;/li&gt;&#xA;&lt;li&gt;实现 Consumer&amp;lt;List&lt;Document&gt;&amp;gt; 的 DocumentWriter&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;Document&lt;/code&gt; 类内容是在 &lt;code&gt;Document&lt;/code&gt;Reader 的帮助下从 PDF、文本文件和其他文档类型创建的。&lt;/p&gt;&#xA;&lt;p&gt;要构建一个简单的 ETL 管道，您可以将每种类型的实例链接在一起。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;./images/etl-pipeline.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;假设我们有以下这三种 ETL 类型的实例&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PagePdfDocumentReader 是 DocumentReader 的一个实现&lt;/li&gt;&#xA;&lt;li&gt;TokenTextSplitter 是 DocumentTransformer 的一个实现&lt;/li&gt;&#xA;&lt;li&gt;VectorStore 是 DocumentWriter 的一个实现&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;要执行将数据基本加载到矢量数据库中以供检索增强生成模式使用的操作，请使用以下 Java 函数样式语法代码。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vectorStore.&lt;span style=&#34;color:#a6e22e&#34;&gt;accept&lt;/span&gt;(tokenTextSplitter.&lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;(pdfReader.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;()));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者，您可以使用更自然地表达域的方法名称&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vectorStore.&lt;span style=&#34;color:#a6e22e&#34;&gt;write&lt;/span&gt;(tokenTextSplitter.&lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;(pdfReader.&lt;span style=&#34;color:#a6e22e&#34;&gt;read&lt;/span&gt;()));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;etl-接口&#34;&gt;&#xA;  ETL 接口&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#etl-%e6%8e%a5%e5%8f%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ETL 管道由以下接口和实现组成。详细的 [&#xA;  &lt;a href=&#34;./#etl-class-diagram&#34;&gt;ETL 类图&lt;/a&gt;](#etl-class-diagram)在 [&#xA;  &lt;a href=&#34;./#etl-class-diagram&#34;&gt;ETL 类图&lt;/a&gt;](#etl-class-diagram)部分中展示。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Google VertexAI 文本嵌入</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/google-vertexai/google-vertexai-%E6%96%87%E6%9C%AC%E5%B5%8C%E5%85%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/google-vertexai/google-vertexai-%E6%96%87%E6%9C%AC%E5%B5%8C%E5%85%A5/</guid>
      <description>&lt;h1 id=&#34;google-vertexai-文本嵌入&#34;&gt;&#xA;  Google VertexAI 文本嵌入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#google-vertexai-%e6%96%87%e6%9c%ac%e5%b5%8c%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Vertex AI 支持两种类型的嵌入模型：文本和多模态。本文档介绍如何使用 Vertex AI [&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/text-embeddings-api&#34;&gt;文本嵌入 API&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/text-embeddings-api&#34;&gt;https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/text-embeddings-api&lt;/a&gt;) 创建文本嵌入。&lt;/p&gt;&#xA;&lt;p&gt;Vertex AI 文本嵌入 API 使用密集向量表示。与倾向于直接将单词映射到数字的稀疏向量不同，密集向量旨在更好地表示文本的含义。在生成式 AI 中使用密集向量嵌入的好处在于，您无需搜索直接的单词或语法匹配，而是可以更好地搜索与查询含义相符的段落，即使这些段落使用的语言不同。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;安装适合您操作系统的 gcloud CLI。&lt;/li&gt;&#xA;&lt;li&gt;通过运行以下命令进行身份验证。将 PROJECT_ID 替换为您的 Google Cloud 项目 ID，将 ACCOUNT 为您的 Google Cloud 用户名。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcloud config set project &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PROJECT_ID&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcloud auth application&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; login &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ACCOUNT&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 的构件已发布在 Maven Central 和 Spring Snapshot 仓库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;“构件仓库”&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些仓库添加到您的构建系统中。&lt;/p&gt;&#xA;&lt;p&gt;为了帮助管理依赖项，Spring AI 提供了 BOM（物料清单），以确保在整个项目中使用一致版本的 Spring AI。请参阅[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)部分，将 Spring AI BOM 添加到您的构建系统中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>MCP 客户端启动器</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%8D%8F%E8%AE%AEmcp/mcp-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%90%AF%E5%8A%A8%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%8D%8F%E8%AE%AEmcp/mcp-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%90%AF%E5%8A%A8%E5%99%A8/</guid>
      <description>&lt;h1 id=&#34;mcp-客户端启动器&#34;&gt;&#xA;  MCP 客户端启动器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mcp-%e5%ae%a2%e6%88%b7%e7%ab%af%e5%90%af%e5%8a%a8%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI MCP（模型上下文协议）客户端启动器为 Spring Boot 应用程序中的 MCP 客户端功能提供自动配置。它支持同步和异步客户端实现，并提供多种传输选项。&lt;/p&gt;&#xA;&lt;p&gt;MCP 客户端启动器提供：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;管理多个客户端实例&lt;/li&gt;&#xA;&lt;li&gt;自动客户端初始化（如果启用）&lt;/li&gt;&#xA;&lt;li&gt;支持多种命名传输&lt;/li&gt;&#xA;&lt;li&gt;与 Spring AI 的工具执行框架集成&lt;/li&gt;&#xA;&lt;li&gt;适当的生命周期管理，在应用程序上下文关闭时自动清理资源&lt;/li&gt;&#xA;&lt;li&gt;通过定制器创建可定制的客户端&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;开胃菜&#34;&gt;&#xA;  开胃菜&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%80%e8%83%83%e8%8f%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;标准-mcp-客户端&#34;&gt;&#xA;  标准 MCP 客户端&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%87%e5%87%86-mcp-%e5%ae%a2%e6%88%b7%e7%ab%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-mcp-client&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;标准启动器通过 &lt;code&gt;STDIO&lt;/code&gt; （进程内）和/或 &lt;code&gt;SSE&lt;/code&gt; （远程）传输同时连接到一个或多个 MCP 服务器。&lt;code&gt;SSE&lt;/code&gt; 连接使用基于 HttpClient 的传输实现。每个与 MCP 服务器的连接都会创建一个新的 MCP 客户端实例。您可以选择 &lt;code&gt;SYNC&lt;/code&gt; 或 A&lt;code&gt;SYNC&lt;/code&gt; MCP 客户端（注意：不能混合使用同步和异步客户端）。对于生产部署，我们建议使用基于 WebFlux 的 &lt;code&gt;SSE&lt;/code&gt; 连接和 &lt;code&gt;spring-ai-starter-mcp-client-webflux&lt;/code&gt; 。&lt;/p&gt;&#xA;&lt;h2 id=&#34;webflux-客户端&#34;&gt;&#xA;  WebFlux 客户端&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#webflux-%e5%ae%a2%e6%88%b7%e7%ab%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;WebFlux 启动器提供与标准启动器类似的功能，但使用基于 WebFlux 的 SSE 传输实现。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-mcp-client-webflux&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;配置属性&#34;&gt;&#xA;  配置属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%85%8d%e7%bd%ae%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;通用属性&#34;&gt;&#xA;  通用属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%80%9a%e7%94%a8%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;通用属性以 &lt;code&gt;spring.ai.mcp.client&lt;/code&gt; 为前缀：&lt;/p&gt;</description>
    </item>
    <item>
      <title>OCI GenAI 协同聊天</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/oci-%E7%94%9F%E6%88%90%E5%BC%8F-ai/oci-genai-%E5%8D%8F%E5%90%8C%E8%81%8A%E5%A4%A9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/oci-%E7%94%9F%E6%88%90%E5%BC%8F-ai/oci-genai-%E5%8D%8F%E5%90%8C%E8%81%8A%E5%A4%A9/</guid>
      <description>&lt;h1 id=&#34;oci-genai-协同聊天&#34;&gt;&#xA;  OCI GenAI 协同聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#oci-genai-%e5%8d%8f%e5%90%8c%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://www.oracle.com/artificial-intelligence/generative-ai/generative-ai-service/&#34;&gt;OCI GenAI 服务&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.oracle.com/artificial-intelligence/generative-ai/generative-ai-service/&#34;&gt;https://www.oracle.com/artificial-intelligence/generative-ai/generative-ai-service/&lt;/a&gt;)提供按需模型或专用 AI 集群的生成 AI 聊天。&lt;/p&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://docs.oracle.com/en-us/iaas/Content/generative-ai/chat-models.htm&#34;&gt;OCI 聊天模型页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.oracle.com/en-us/iaas/Content/generative-ai/chat-models.htm&#34;&gt;https://docs.oracle.com/en-us/iaas/Content/generative-ai/chat-models.htm&lt;/a&gt;)和 [&#xA;  &lt;a href=&#34;https://docs.oracle.com/en-us/iaas/Content/generative-ai/use-playground-embed.htm&#34;&gt;OCI 生成 AI 游乐场&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.oracle.com/en-us/iaas/Content/generative-ai/use-playground-embed.htm&#34;&gt;https://docs.oracle.com/en-us/iaas/Content/generative-ai/use-playground-embed.htm&lt;/a&gt;)提供了有关在 OCI 上使用和托管聊天模型的详细信息。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要一个有效的 [&#xA;  &lt;a href=&#34;https://signup.oraclecloud.com/&#34;&gt;Oracle 云基础设施 (OCI)&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://signup.oraclecloud.com/&#34;&gt;https://signup.oraclecloud.com/&lt;/a&gt;) 账户才能使用 OCI GenAI Cohere Chat 客户端。该客户端提供四种不同的连接方式，包括使用用户和私钥的简单身份验证、工作负载身份、实例主体以及 OCI 配置文件身份验证。&lt;/p&gt;&#xA;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 的构件已发布在 Maven Central 和 Spring Snapshot 仓库中。请参阅 [&#xA;  &lt;a href=&#34;../../../getting-started.html#artifact-repositories&#34;&gt;“构件仓库”&lt;/a&gt;](../../../getting-started.html#artifact-repositories) 部分，将这些仓库添加到您的构建系统中。&lt;/p&gt;&#xA;&lt;p&gt;为了帮助管理依赖项，Spring AI 提供了 BOM（物料清单），以确保在整个项目中使用一致版本的 Spring AI。请参阅[&#xA;  &lt;a href=&#34;../../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../../getting-started.html#dependency-management)部分，将 Spring AI BOM 添加到您的构建系统中。&lt;/p&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 OCI GenAI Cohere Chat Client 提供了 Spring Boot 自动配置功能。要启用此功能，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenAI 文本转语音 (TTS)</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E9%9F%B3%E9%A2%91%E6%A8%A1%E5%9E%8B/%E6%96%87%E6%9C%AC%E8%BD%AC%E8%AF%AD%E9%9F%B3-tts-api/openai-%E6%96%87%E6%9C%AC%E8%BD%AC%E8%AF%AD%E9%9F%B3-tts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E9%9F%B3%E9%A2%91%E6%A8%A1%E5%9E%8B/%E6%96%87%E6%9C%AC%E8%BD%AC%E8%AF%AD%E9%9F%B3-tts-api/openai-%E6%96%87%E6%9C%AC%E8%BD%AC%E8%AF%AD%E9%9F%B3-tts/</guid>
      <description>&lt;h1 id=&#34;openai-文本转语音-tts&#34;&gt;&#xA;  OpenAI 文本转语音 (TTS)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#openai-%e6%96%87%e6%9c%ac%e8%bd%ac%e8%af%ad%e9%9f%b3-tts&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;介绍&#34;&gt;&#xA;  介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;音频 API 提供基于 OpenAI 的 TTS（文本转语音）模型的语音端点，使用户能够：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;叙述一篇书面博客文章。&lt;/li&gt;&#xA;&lt;li&gt;制作多种语言的音频。&lt;/li&gt;&#xA;&lt;li&gt;使用流媒体提供实时音频输出。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 OpenAI 文本转语音客户端提供了 Spring Boot 自动配置功能。要启用此功能，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-model-openai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者到你的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-model-openai&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;语音属性&#34;&gt;&#xA;  语音属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%af%ad%e9%9f%b3%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;连接属性&#34;&gt;&#xA;  连接属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%9e%e6%8e%a5%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;前缀 &lt;code&gt;spring.ai.openai&lt;/code&gt; 用作允许您连接到 OpenAI 的属性前缀。&lt;/p&gt;&#xA;&lt;h2 id=&#34;配置属性&#34;&gt;&#xA;  配置属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%85%8d%e7%bd%ae%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;前缀 &lt;code&gt;spring.ai.openai.audio.speech&lt;/code&gt; 用作属性前缀，可让您配置 OpenAI 文本到语音客户端。&lt;/p&gt;&#xA;&lt;h2 id=&#34;运行时选项&#34;&gt;&#xA;  运行时选项&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%90%e8%a1%8c%e6%97%b6%e9%80%89%e9%a1%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;OpenAiAudioSpeechOptions&lt;/code&gt; 类提供了发出文本转语音请求时使用的选项。启动时，将使用 &lt;code&gt;spring.ai.openai.audio.speech&lt;/code&gt; 指定的选项，但您可以在运行时覆盖这些选项。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VertexAI Gemini 聊天</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/google-vertexai/vertexai-gemini-%E8%81%8A%E5%A4%A9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/google-vertexai/vertexai-gemini-%E8%81%8A%E5%A4%A9/</guid>
      <description>&lt;h1 id=&#34;vertexai-gemini-聊天&#34;&gt;&#xA;  VertexAI Gemini 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#vertexai-gemini-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/docs/generative-ai/multimodal/overview&#34;&gt;Vertex AI Gemini API&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/docs/generative-ai/multimodal/overview&#34;&gt;https://cloud.google.com/vertex-ai/docs/generative-ai/multimodal/overview&lt;/a&gt;) 允许开发者使用 Gemini 模型构建生成式 AI 应用程序。[&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/docs/generative-ai/multimodal/overview&#34;&gt;Vertex AI Gemini API&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/docs/generative-ai/multimodal/overview&#34;&gt;https://cloud.google.com/vertex-ai/docs/generative-ai/multimodal/overview&lt;/a&gt;) 支持多模态提示作为输入和输出文本或代码。多模态模型是一种能够处理多种模态信息（包括图像、视频和文本）的模型。例如，您可以向模型发送一张饼干的照片，并要求它提供这些饼干的食谱。&lt;/p&gt;&#xA;&lt;p&gt;Gemini 是由 Google DeepMind 开发的一系列生成式 AI 模型，专为多模态用例而设计。Gemini API 允许您访问 [&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/generative-ai/docs/models/gemini/2-0-flash&#34;&gt;Gemini 2.0 Flash&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/generative-ai/docs/models/gemini/2-0-flash&#34;&gt;https://cloud.google.com/vertex-ai/generative-ai/docs/models/gemini/2-0-flash&lt;/a&gt;) 和 [&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/generative-ai/docs/models/gemini/2-0-flash&#34;&gt;Gemini 2.0 Flash&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/generative-ai/docs/models/gemini/2-0-flash%29-Lite&#34;&gt;https://cloud.google.com/vertex-ai/generative-ai/docs/models/gemini/2-0-flash)-Lite&lt;/a&gt; 。有关 Vertex AI Gemini API 模型的规格，请参阅[&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/generative-ai/docs/models#gemini-models&#34;&gt;模型信息&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/generative-ai/docs/models#gemini-models&#34;&gt;https://cloud.google.com/vertex-ai/generative-ai/docs/models#gemini-models&lt;/a&gt;) 。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/inference&#34;&gt;Gemini API 参考&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;安装适合您操作系统的 gcloud CLI。&lt;/li&gt;&#xA;&lt;li&gt;通过运行以下命令进行身份验证。将 PROJECT_ID 替换为您的 Google Cloud 项目 ID，将 ACCOUNT 为您的 Google Cloud 用户名。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcloud config set project &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PROJECT_ID&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcloud auth application&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; login &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ACCOUNT&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 VertexAI Gemini 聊天客户端提供 Spring Boot 自动配置。要启用此功能，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 或 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件中：&lt;/p&gt;</description>
    </item>
    <item>
      <title>人工智能概念</title>
      <link>https://studyllm.github.io/docs/%E4%BB%8B%E7%BB%8D/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E4%BB%8B%E7%BB%8D/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%A6%82%E5%BF%B5/</guid>
      <description>&lt;h1 id=&#34;人工智能概念&#34;&gt;&#xA;  人工智能概念&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%ba%e5%b7%a5%e6%99%ba%e8%83%bd%e6%a6%82%e5%bf%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节介绍 Spring AI 使用的核心概念。建议您仔细阅读，以了解 Spring AI 实现背后的思想。&lt;/p&gt;&#xA;&lt;h2 id=&#34;模型&#34;&gt;&#xA;  模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;人工智能模型是用于处理和生成信息的算法，通常模仿人类的认知功能。通过从大型数据集中学习模式和洞察，这些模型可以进行预测、文本、图像或其他输出，从而增强各行各业的各种应用。&lt;/p&gt;&#xA;&lt;p&gt;AI 模型种类繁多，每种模型都适用于特定的用例。虽然 ChatGPT 及其生成式 AI 功能通过文本输入和输出吸引了众多用户，但许多模型和公司也提供多样化的输入和输出。在 ChatGPT 出现之前，许多人对文本转图像生成模型（例如 Midjourney 和 Stable Diffusion）着迷。&lt;/p&gt;&#xA;&lt;p&gt;下表根据输入和输出类型对几种模型进行了分类：&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;./images/spring-ai-concepts-model-types.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;Spring AI 目前支持将输入和输出处理为语言、图像和音频的模型。上表中的最后一行接受文本作为输入并输出数字，这通常被称为嵌入文本，代表 AI 模型中使用的内部数据结构。Spring AI 支持嵌入，以实现更高级的用例。&lt;/p&gt;&#xA;&lt;p&gt;GPT 等模型的独特之处在于其预训练特性，正如 GPT 中的“P”（聊天生成预训练 Transformer）所示。这项预训练功能将 AI 转变为通用的开发工具，无需丰富的机器学习或模型训练背景。&lt;/p&gt;&#xA;&lt;h2 id=&#34;提示&#34;&gt;&#xA;  提示&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8f%90%e7%a4%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;提示是基于语言的输入的基础，引导 AI 模型生成特定的输出。对于熟悉 ChatGPT 的人来说，提示可能看起来仅仅是在对话框中输入并发送到 API 的文本。然而，它包含的内容远不止于此。在许多 AI 模型中，提示的文本不仅仅是一个简单的字符串。&lt;/p&gt;&#xA;&lt;p&gt;ChatGPT 的 API 在一个提示中包含多个文本输入，每个文本输入都被分配一个角色。例如，系统角色用于指示模型如何操作并设置交互的上下文。此外，还有用户角色，通常是来自用户的输入。&lt;/p&gt;&#xA;&lt;p&gt;制作有效的提示既是一门艺术，也是一门科学。ChatGPT 是为人类对话而设计的。这与使用 SQL 之类的语言“提问”截然不同。人们必须像与人交谈一样与 AI 模型进行交流。&lt;/p&gt;&#xA;&lt;p&gt;这种交互方式如此重要，以至于“提示工程”一词已发展成为一门独立的学科。目前，有越来越多的技术可以提高提示的有效性。投入时间精心设计提示可以显著提升最终效果。&lt;/p&gt;&#xA;&lt;p&gt;分享提示已成为一种公共实践，学术界也正在积极开展这方面的研究。为了说明创建有效提示（例如，与 SQL 对比）是多么违反直觉， [&#xA;  &lt;a href=&#34;https://arxiv.org/abs/2205.11916&#34;&gt;最近的一篇研究论文&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://arxiv.org/abs/2205.11916&#34;&gt;https://arxiv.org/abs/2205.11916&lt;/a&gt;)发现，最有效的提示之一以“深呼吸，一步一步来”这句话开头。这应该能让你明白语言为何如此重要。我们尚未完全了解如何最有效地利用这项技术的早期版本，例如 ChatGPT 3.5，更不用说正在开发的新版本了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>从 FunctionCallback 迁移到 ToolCallback API</title>
      <link>https://studyllm.github.io/docs/%E5%8D%87%E7%BA%A7%E8%AF%B4%E6%98%8E/%E4%BB%8E-functioncallback-%E8%BF%81%E7%A7%BB%E5%88%B0-toolcallback-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8D%87%E7%BA%A7%E8%AF%B4%E6%98%8E/%E4%BB%8E-functioncallback-%E8%BF%81%E7%A7%BB%E5%88%B0-toolcallback-api/</guid>
      <description>&lt;h1 id=&#34;从-functioncallback-迁移到-toolcallback-api&#34;&gt;&#xA;  从 FunctionCallback 迁移到 ToolCallback API&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%8e-functioncallback-%e8%bf%81%e7%a7%bb%e5%88%b0-toolcallback-api&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本指南将帮助您从已弃用的 &lt;code&gt;FunctionCallback&lt;/code&gt; API 迁移到 Spring AI 中全新的 &lt;code&gt;ToolCallback&lt;/code&gt; API。如需了解更多关于新 API 的信息，请参阅[&#xA;  &lt;a href=&#34;tools.html&#34;&gt;工具调用&lt;/a&gt;](tools.html)文档。&lt;/p&gt;&#xA;&lt;h2 id=&#34;变更概述&#34;&gt;&#xA;  变更概述&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%98%e6%9b%b4%e6%a6%82%e8%bf%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;这些变化是 Spring AI 改进和扩展工具调用功能的一部分。此外，新 API 的术语从“函数”改为“工具”，以更好地符合行业惯例。这涉及多项 API 更改，同时通过弃用的方法保持向后兼容性。&lt;/p&gt;&#xA;&lt;h2 id=&#34;关键变化&#34;&gt;&#xA;  关键变化&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%b3%e9%94%ae%e5%8f%98%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;迁移示例&#34;&gt;&#xA;  迁移示例&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%81%e7%a7%bb%e7%a4%ba%e4%be%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;1-基本函数回调&#34;&gt;&#xA;  1. 基本函数回调&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%9f%ba%e6%9c%ac%e5%87%bd%e6%95%b0%e5%9b%9e%e8%b0%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;前：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FunctionCallback.&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;getCurrentWeather&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MockWeatherService())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;description&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Get the weather in location&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;inputType&lt;/span&gt;(MockWeatherService.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;后：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FunctionToolCallback.&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;getCurrentWeather&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MockWeatherService())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;description&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Get the weather in location&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;inputType&lt;/span&gt;(MockWeatherService.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-chatclient-使用&#34;&gt;&#xA;  2. ChatClient 使用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-chatclient-%e4%bd%bf%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;前：&lt;/p&gt;</description>
    </item>
    <item>
      <title>测试容器</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%B5%8B%E8%AF%95/%E6%B5%8B%E8%AF%95%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%B5%8B%E8%AF%95/%E6%B5%8B%E8%AF%95%E5%AE%B9%E5%99%A8/</guid>
      <description>&lt;h1 id=&#34;测试容器&#34;&gt;&#xA;  测试容器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b5%8b%e8%af%95%e5%ae%b9%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 提供了 Spring Boot 自动配置，用于建立与通过 Testcontainers 运行的模型服务或向量存储的连接。要启用此功能，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-spring-boot-testcontainers&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者到你的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-spring-boot-testcontainers&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;服务连接&#34;&gt;&#xA;  服务连接&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%8d%e5%8a%a1%e8%bf%9e%e6%8e%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;spring-ai-spring-boot-testcontainers&lt;/code&gt; 模块中提供了以下服务连接工厂：&lt;/p&gt;</description>
    </item>
    <item>
      <title>相干嵌入</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/%E4%BA%9A%E9%A9%AC%E9%80%8A%E5%9F%BA%E5%B2%A9/%E7%9B%B8%E5%B9%B2%E5%B5%8C%E5%85%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/%E4%BA%9A%E9%A9%AC%E9%80%8A%E5%9F%BA%E5%B2%A9/%E7%9B%B8%E5%B9%B2%E5%B5%8C%E5%85%A5/</guid>
      <description>&lt;h1 id=&#34;相干嵌入&#34;&gt;&#xA;  相干嵌入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%9b%b8%e5%b9%b2%e5%b5%8c%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;提供 Bedrock Cohere 嵌入模型。将生成式 AI 功能集成到关键应用和工作流程中，从而提升业务成果。&lt;/p&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://aws.amazon.com/bedrock/cohere-command-embed/&#34;&gt;AWS Bedrock Cohere 模型页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://aws.amazon.com/bedrock/cohere-command-embed/&#34;&gt;https://aws.amazon.com/bedrock/cohere-command-embed/&lt;/a&gt;)和 [&#xA;  &lt;a href=&#34;https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-bedrock.html&#34;&gt;Amazon Bedrock 用户指南&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-bedrock.html&#34;&gt;https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-bedrock.html&lt;/a&gt;)包含有关如何使用 AWS 托管模型的详细信息。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;请参阅 [&#xA;  &lt;a href=&#34;../bedrock.html&#34;&gt;Amazon Bedrock 上的 Spring AI 文档&lt;/a&gt;](../bedrock.html)以了解如何设置 API 访问。&lt;/p&gt;&#xA;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 的构件已发布在 Maven Central 和 Spring Snapshot 仓库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;“构件仓库”&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些仓库添加到您的构建系统中。&lt;/p&gt;&#xA;&lt;p&gt;为了帮助管理依赖项，Spring AI 提供了 BOM（物料清单），以确保在整个项目中使用一致版本的 Spring AI。请参阅[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)部分，将 Spring AI BOM 添加到您的构建系统中。&lt;/p&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;将 &lt;code&gt;spring-ai-starter-model-bedrock&lt;/code&gt; 依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-model-bedrock&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者到你的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;</description>
    </item>
    <item>
      <title>聊天模型比较</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B%E6%AF%94%E8%BE%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B%E6%AF%94%E8%BE%83/</guid>
      <description>&lt;h1 id=&#34;聊天模型比较&#34;&gt;&#xA;  聊天模型比较&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%81%8a%e5%a4%a9%e6%a8%a1%e5%9e%8b%e6%af%94%e8%be%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;下表比较了 Spring AI 支持的各种聊天模型，详细说明了它们的功能：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;多模态 ：模型可以处理的输入类型（例如文本、图像、音频、视频）。&lt;/li&gt;&#xA;&lt;li&gt;工具/功能调用 ：模型是否支持功能调用或工具使用。&lt;/li&gt;&#xA;&lt;li&gt;流式：如果模型提供流式响应。&lt;/li&gt;&#xA;&lt;li&gt;重试：支持重试机制。&lt;/li&gt;&#xA;&lt;li&gt;可观察性 ：监控和调试的功能。&lt;/li&gt;&#xA;&lt;li&gt;内置 JSON ：原生支持 JSON 输出。&lt;/li&gt;&#xA;&lt;li&gt;本地部署：模型是否可以在本地运行。&lt;/li&gt;&#xA;&lt;li&gt;OpenAI API 兼容性：模型是否与 OpenAI 的 API 兼容。&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>顾问 API</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E8%81%8A%E5%A4%A9%E5%AE%A2%E6%88%B7%E7%AB%AF-api/%E9%A1%BE%E9%97%AE-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E8%81%8A%E5%A4%A9%E5%AE%A2%E6%88%B7%E7%AB%AF-api/%E9%A1%BE%E9%97%AE-api/</guid>
      <description>&lt;h1 id=&#34;顾问-api&#34;&gt;&#xA;  顾问 API&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%a1%be%e9%97%ae-api&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI Advisors API 提供了一种灵活而强大的方法来拦截、修改和增强 Spring 应用程序中的 AI 驱动交互。通过利用 Advisors API，开发人员可以创建更复杂、可重用且更易于维护的 AI 组件。&lt;/p&gt;&#xA;&lt;p&gt;主要优势包括封装重复的生成式 AI 模式、转换发送到和来自大型语言模型 (LLM) 的数据，以及提供跨各种模型和用例的可移植性。&lt;/p&gt;&#xA;&lt;p&gt;您可以使用 [&#xA;  &lt;a href=&#34;chatclient.html#_advisor_configuration_in_chatclient&#34;&gt;ChatClient API&lt;/a&gt;](chatclient.html#_advisor_configuration_in_chatclient) 配置现有的顾问，如以下示例所示：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; chatClient &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ChatClient.&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;(chatModel)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;defaultAdvisors&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        MessageChatMemoryAdvisor.&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;(chatMemory).&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;(), &lt;span style=&#34;color:#75715e&#34;&gt;// chat-memory advisor&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        QuestionAnswerAdvisor.&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;((vectorStore).&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;() &lt;span style=&#34;color:#75715e&#34;&gt;// RAG advisor&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; conversationId &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;678&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;chatClient&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prompt&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Set advisor parameters at runtime&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;advisors&lt;/span&gt;(advisor &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; advisor.&lt;span style=&#34;color:#a6e22e&#34;&gt;param&lt;/span&gt;(ChatMemory.&lt;span style=&#34;color:#a6e22e&#34;&gt;CONVERSATION_ID&lt;/span&gt;, conversationId))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;(userText)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;.&lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;建议在构建时使用构建器的 &lt;code&gt;defaultAdvisors()&lt;/code&gt; 方法注册顾问。&lt;/p&gt;&#xA;&lt;p&gt;顾问也参与可观察性堆栈，因此您可以查看与其执行相关的指标和跟踪。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;了解问答顾问&lt;/li&gt;&#xA;&lt;li&gt;了解聊天记忆顾问&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;核心组件&#34;&gt;&#xA;  核心组件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%b8%e5%bf%83%e7%bb%84%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;该 API 包含用于非流式场景的 &lt;code&gt;CallAroundAdvisor&lt;/code&gt; 和 &lt;code&gt;CallAroundAdvisor&lt;/code&gt;Chain ，以及用于流式场景的 &lt;code&gt;StreamAroundAdvisor&lt;/code&gt; 和 &lt;code&gt;StreamAroundAdvisor&lt;/code&gt;Chain 。此外，它还包含用于表示未密封 Prompt 请求的 &lt;code&gt;AdvisedRequest&lt;/code&gt; 和用于表示聊天完成响应的 &lt;code&gt;AdvisedResponse&lt;/code&gt; 。两者都包含一个 &lt;code&gt;advise-context&lt;/code&gt; 用于在顾问链之间共享状态。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Cosmos DB</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/azure-cosmos-db/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/azure-cosmos-db/</guid>
      <description>&lt;h1 id=&#34;azure-cosmos-db&#34;&gt;&#xA;  Azure Cosmos DB&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#azure-cosmos-db&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将引导您设置 &lt;code&gt;CosmosDBVectorStore&lt;/code&gt; 来存储文档嵌入并执行相似性搜索。&lt;/p&gt;&#xA;&lt;h2 id=&#34;什么是-azure-cosmos-db&#34;&gt;&#xA;  什么是 Azure Cosmos DB？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af-azure-cosmos-db&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://azure.microsoft.com/en-us/services/cosmos-db/&#34;&gt;Azure Cosmos DB&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://azure.microsoft.com/en-us/services/cosmos-db/&#34;&gt;https://azure.microsoft.com/en-us/services/cosmos-db/&lt;/a&gt;) 是微软专为关键任务应用程序设计的全球分布式云原生数据库服务。它提供高可用性、低延迟以及水平扩展能力，以满足现代应用程序的需求。它从零开始构建，以全球分布、细粒度多租户和水平扩展为核心。它是 Azure 的一项基础服务，被微软全球范围内的大多数关键任务应用程序所使用，包括 Teams、Skype、Xbox Live、Office 365、Bing、Azure Active Directory、Azure Portal、Microsoft Store 等。此外，它还被数千家外部客户所使用，包括 OpenAI 的 ChatGPT 和其他需要弹性扩展、交钥匙全球分布以及全球低延迟和高可用性的关键任务 AI 应用程序。&lt;/p&gt;&#xA;&lt;h2 id=&#34;什么是-diskann&#34;&gt;&#xA;  什么是 DiskANN？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af-diskann&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;DiskANN（基于磁盘的近似最近邻搜索）是 Azure Cosmos DB 中使用的一项创新技术，用于增强向量搜索的性能。它通过索引存储在 Cosmos DB 中的嵌入，实现跨高维数据的高效且可扩展的相似性搜索。&lt;/p&gt;&#xA;&lt;p&gt;DiskANN 具有以下优势：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;效率 ：通过利用基于磁盘的结构，与传统方法相比，DiskANN 显著减少了查找最近邻居所需的时间。&lt;/li&gt;&#xA;&lt;li&gt;可扩展性 ：它可以处理超出内存容量的大型数据集，使其适用于各种应用，包括机器学习和人工智能驱动的解决方案。&lt;/li&gt;&#xA;&lt;li&gt;低延迟 ：DiskANN 最大限度地减少搜索操作期间的延迟，确保应用程序即使数据量很大也能快速检索结果。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;在 Spring AI for Azure Cosmos DB 的环境中，向量搜索将创建并利用 DiskANN 索引来确保相似性查询的最佳性能。&lt;/p&gt;&#xA;&lt;h2 id=&#34;使用自动配置设置-azure-cosmos-db-矢量存储&#34;&gt;&#xA;  使用自动配置设置 Azure Cosmos DB 矢量存储&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%bf%e7%94%a8%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae%e8%ae%be%e7%bd%ae-azure-cosmos-db-%e7%9f%a2%e9%87%8f%e5%ad%98%e5%82%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;以下代码演示了如何使用自动配置设置 &lt;code&gt;CosmosDBVectorStore&lt;/code&gt; ：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure OpenAI 嵌入</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/azure-openai-%E5%B5%8C%E5%85%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/azure-openai-%E5%B5%8C%E5%85%A5/</guid>
      <description>&lt;h1 id=&#34;azure-openai-嵌入&#34;&gt;&#xA;  Azure OpenAI 嵌入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#azure-openai-%e5%b5%8c%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Azure 的 OpenAI 扩展了 OpenAI 功能，为各种任务提供安全的文本生成和嵌入计算模型：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;相似性嵌入擅长捕捉两段或多段文本之间的语义相似性。&lt;/li&gt;&#xA;&lt;li&gt;文本搜索嵌入有助于衡量长文档是否与短查询相关。&lt;/li&gt;&#xA;&lt;li&gt;代码搜索嵌入对于嵌入代码片段和嵌入自然语言搜索查询很有用。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Azure OpenAI 嵌入依靠 &lt;code&gt;cosine similarity&lt;/code&gt; 来计算文档和查询之间的相似度。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Azure OpenAI 客户端提供三种连接选项：使用 Azure API 密钥或使用 OpenAI API 密钥，或使用 Microsoft Entra ID。&lt;/p&gt;&#xA;&lt;h2 id=&#34;azure-api-密钥和端点&#34;&gt;&#xA;  Azure API 密钥和端点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#azure-api-%e5%af%86%e9%92%a5%e5%92%8c%e7%ab%af%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;从 [&#xA;  &lt;a href=&#34;https://portal.azure.com&#34;&gt;Azure 门户&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://portal.azure.com&#34;&gt;https://portal.azure.com&lt;/a&gt;)上的 Azure OpenAI 服务部分获取 Azure OpenAI &lt;code&gt;endpoint&lt;/code&gt; 和 &lt;code&gt;api-key&lt;/code&gt; 。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI 定义了两个配置属性：&lt;/p&gt;&#xA;&lt;p&gt;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 或 &lt;code&gt;application.yml&lt;/code&gt; 文件中设置这些配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.azure.openai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-azure-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.azure.openai.endpoint&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-azure-endpoint-url&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果您希望使用环境变量来存储 API 密钥等敏感信息，则可以在配置中使用 Spring 表达式语言 (SpEL)：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;azure&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;openai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${AZURE_OPENAI_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;endpoint&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${AZURE_OPENAI_ENDPOINT}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export AZURE_OPENAI_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-azure-openai-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export AZURE_OPENAI_ENDPOINT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-azure-endpoint-url&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;openai-密钥&#34;&gt;&#xA;  OpenAI 密钥&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#openai-%e5%af%86%e9%92%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;要使用 OpenAI 服务（而非 Azure）进行身份验证，请提供 OpenAI API 密钥。这将自动将端点设置为 [&#xA;  &lt;a href=&#34;https://api.openai.com/v1&#34;&gt;api.openai.com/v1&lt;/a&gt;](https://&#xA;  &lt;a href=&#34;https://api.openai.com/v1&#34;&gt;api.openai.com/v1&lt;/a&gt;) 。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Google VertexAI 多模态嵌入</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/google-vertexai/google-vertexai-%E5%A4%9A%E6%A8%A1%E6%80%81%E5%B5%8C%E5%85%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/google-vertexai/google-vertexai-%E5%A4%9A%E6%A8%A1%E6%80%81%E5%B5%8C%E5%85%A5/</guid>
      <description>&lt;h1 id=&#34;google-vertexai-多模态嵌入&#34;&gt;&#xA;  Google VertexAI 多模态嵌入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#google-vertexai-%e5%a4%9a%e6%a8%a1%e6%80%81%e5%b5%8c%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Vertex AI 支持两种类型的嵌入模型：文本和多模态。本文档介绍如何使用 Vertex AI [&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/generative-ai/docs/embeddings/get-multimodal-embeddings&#34;&gt;多模态嵌入 API 创建多模态&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/generative-ai/docs/embeddings/get-multimodal-embeddings&#34;&gt;https://cloud.google.com/vertex-ai/generative-ai/docs/embeddings/get-multimodal-embeddings&lt;/a&gt;)嵌入。&lt;/p&gt;&#xA;&lt;p&gt;多模态嵌入模型根据您提供的输入生成 1408 维向量，这些输入可以包含图像、文本和视频数据的组合。这些嵌入向量随后可用于后续任务，例如图像分类或视频内容审核。&lt;/p&gt;&#xA;&lt;p&gt;图像嵌入向量和文本嵌入向量位于相同的语义空间，且维度相同。因此，这些向量可以互换使用，例如通过文本搜索图像或通过图像搜索视频。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;安装适合您操作系统的 gcloud CLI。&lt;/li&gt;&#xA;&lt;li&gt;通过运行以下命令进行身份验证。将 PROJECT_ID 替换为您的 Google Cloud 项目 ID，将 ACCOUNT 为您的 Google Cloud 用户名。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcloud config set project &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PROJECT_ID&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcloud auth application&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; login &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ACCOUNT&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 的构件已发布在 Maven Central 和 Spring Snapshot 仓库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;“构件仓库”&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些仓库添加到您的构建系统中。&lt;/p&gt;&#xA;&lt;p&gt;为了帮助管理依赖项，Spring AI 提供了 BOM（物料清单），以确保在整个项目中使用一致版本的 Spring AI。请参阅[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)部分，将 Spring AI BOM 添加到您的构建系统中。&lt;/p&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 VertexAI 嵌入模型提供了 Spring Boot 自动配置功能。要启用此功能，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;</description>
    </item>
    <item>
      <title>MCP 服务器启动器</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%8D%8F%E8%AE%AEmcp/mcp-%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%AF%E5%8A%A8%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%8D%8F%E8%AE%AEmcp/mcp-%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%AF%E5%8A%A8%E5%99%A8/</guid>
      <description>&lt;h1 id=&#34;mcp-服务器启动器&#34;&gt;&#xA;  MCP 服务器启动器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mcp-%e6%9c%8d%e5%8a%a1%e5%99%a8%e5%90%af%e5%8a%a8%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI MCP（模型上下文协议）服务器启动启动器提供了在 Spring Boot 应用程序中设置 MCP 服务器的自动配置功能。它支持 MCP 服务器功能与 Spring Boot 的自动配置系统无缝集成。&lt;/p&gt;&#xA;&lt;p&gt;MCP 服务器启动器提供：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;MCP 服务器组件的自动配置&lt;/li&gt;&#xA;&lt;li&gt;支持同步和异步操作模式&lt;/li&gt;&#xA;&lt;li&gt;多种传输层选项&lt;/li&gt;&#xA;&lt;li&gt;灵活的工具、资源和提示规范&lt;/li&gt;&#xA;&lt;li&gt;更改通知功能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;开胃菜&#34;&gt;&#xA;  开胃菜&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%80%e8%83%83%e8%8f%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;根据您的运输需求选择以下其中一种启动器：&lt;/p&gt;&#xA;&lt;h2 id=&#34;标准-mcp-服务器&#34;&gt;&#xA;  标准 MCP 服务器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%87%e5%87%86-mcp-%e6%9c%8d%e5%8a%a1%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;完整的 MCP 服务器功能支持 &lt;code&gt;STDIO&lt;/code&gt; 服务器传输。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-mcp-server-spring-boot-starter&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;适用于命令行和桌面工具&lt;/li&gt;&#xA;&lt;li&gt;无需额外的 Web 依赖项&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;启动器激活 &lt;code&gt;McpServerAutoConfiguration&lt;/code&gt; 自动配置，负责：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;配置基本服务器组件&lt;/li&gt;&#xA;&lt;li&gt;处理工具、资源和提示规范&lt;/li&gt;&#xA;&lt;li&gt;管理服务器功能和变更通知&lt;/li&gt;&#xA;&lt;li&gt;提供同步和异步服务器实现&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;webmvc-服务器传输&#34;&gt;&#xA;  WebMVC 服务器传输&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#webmvc-%e6%9c%8d%e5%8a%a1%e5%99%a8%e4%bc%a0%e8%be%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;完整的 MCP 服务器功能支持基于 Spring MVC 的 &lt;code&gt;SSE&lt;/code&gt; （服务器发送事件）服务器传输和可选的 &lt;code&gt;STDIO&lt;/code&gt; 传输。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-mcp-server-webmvc&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动器激活 &lt;code&gt;McpWebMvcServerAutoConfiguration&lt;/code&gt; 和 &lt;code&gt;McpServerAutoConfiguration&lt;/code&gt; 自动配置以提供：&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenAI 图像生成</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%9E%8B-api/openai-%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%9E%8B-api/openai-%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90/</guid>
      <description>&lt;h1 id=&#34;openai-图像生成&#34;&gt;&#xA;  OpenAI 图像生成&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#openai-%e5%9b%be%e5%83%8f%e7%94%9f%e6%88%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 OpenAI 的图像生成模型 DALL-E。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 OpenAI 创建 API 密钥才能访问 ChatGPT 模型。&lt;/p&gt;&#xA;&lt;p&gt;在 [&#xA;  &lt;a href=&#34;https://platform.openai.com/signup&#34;&gt;OpenAI 注册页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://platform.openai.com/signup&#34;&gt;https://platform.openai.com/signup&lt;/a&gt;)创建一个帐户，并在 [&#xA;  &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;API 密钥页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;https://platform.openai.com/account/api-keys&lt;/a&gt;)上生成令牌。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.openai.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 openai.com 获取的 &lt;code&gt;API Key&lt;/code&gt; 的值。&lt;/p&gt;&#xA;&lt;p&gt;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.openai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-openai-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 (SpEL) 引用自定义环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;openai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${OPENAI_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export OPENAI_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-openai-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve API key from a secure source or environment variable&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String apiKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OPENAI_API_KEY&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 OpenAI 图像生成客户端提供了 Spring Boot 自动配置。要启用此功能，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;</description>
    </item>
    <item>
      <title>亚马逊基岩 Converse</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/%E4%BA%9A%E9%A9%AC%E9%80%8A%E5%9F%BA%E5%B2%A9-converse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/%E4%BA%9A%E9%A9%AC%E9%80%8A%E5%9F%BA%E5%B2%A9-converse/</guid>
      <description>&lt;h1 id=&#34;亚马逊基岩-converse&#34;&gt;&#xA;  亚马逊基岩 Converse&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%9a%e9%a9%ac%e9%80%8a%e5%9f%ba%e5%b2%a9-converse&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://docs.aws.amazon.com/bedrock/latest/userguide/conversation-inference.html&#34;&gt;Amazon Bedrock Converse API&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.aws.amazon.com/bedrock/latest/userguide/conversation-inference.html&#34;&gt;https://docs.aws.amazon.com/bedrock/latest/userguide/conversation-inference.html&lt;/a&gt;) 为对话式 AI 模型提供了统一的界面，具有增强的功能，包括函数/工具调用、多模式输入和流式响应。&lt;/p&gt;&#xA;&lt;p&gt;Bedrock Converse API 具有以下高级功能：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;工具/功能调用：支持对话过程中的功能定义和工具使用&lt;/li&gt;&#xA;&lt;li&gt;多模式输入：能够在对话中处理文本和图像输入&lt;/li&gt;&#xA;&lt;li&gt;流支持：模型响应的实时流&lt;/li&gt;&#xA;&lt;li&gt;系统消息：支持系统级指令和上下文设置&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;请参阅 [&#xA;  &lt;a href=&#34;https://docs.aws.amazon.com/bedrock/latest/userguide/getting-started.html&#34;&gt;Amazon Bedrock 入门指南&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.aws.amazon.com/bedrock/latest/userguide/getting-started.html&#34;&gt;https://docs.aws.amazon.com/bedrock/latest/userguide/getting-started.html&lt;/a&gt;)以设置 API 访问&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;获取 AWS 凭证：如果您尚未配置 AWS 账户和 AWS CLI，本视频指南可以帮助您进行配置： 不到 4 分钟即可完成 AWS CLI 和 SDK 设置！ 您应该能够获取访问密钥和安全密钥。&lt;/li&gt;&#xA;&lt;li&gt;启用要使用的模型：转到 Amazon Bedrock ，从左侧的模型访问菜单中配置您要使用的模型的访问权限。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;将 &lt;code&gt;spring-ai-starter-model-bedrock-converse&lt;/code&gt; 依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 或 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件中：&lt;/p&gt;&#xA;&lt;h2 id=&#34;聊天属性&#34;&gt;&#xA;  聊天属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%81%8a%e5%a4%a9%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;前缀 &lt;code&gt;spring.ai.bedrock.aws&lt;/code&gt; 是配置与 AWS Bedrock 的连接的属性前缀。&lt;/p&gt;&#xA;&lt;p&gt;前缀 &lt;code&gt;spring.ai.bedrock.converse.chat&lt;/code&gt; 是配置 Converse API 聊天模型实现的属性前缀。&lt;/p&gt;</description>
    </item>
    <item>
      <title>入门</title>
      <link>https://studyllm.github.io/docs/%E5%85%A5%E9%97%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%85%A5%E9%97%A8/</guid>
      <description>&lt;h1 id=&#34;入门&#34;&gt;&#xA;  入门&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%a5%e9%97%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节提供如何开始使用 Spring AI 的起点。&lt;/p&gt;&#xA;&lt;p&gt;您应该根据需要遵循以下每个部分中的步骤。&lt;/p&gt;&#xA;&lt;p&gt;前往 [&#xA;  &lt;a href=&#34;https://start.spring.io/&#34;&gt;start.spring.io&lt;/a&gt;](https://&#xA;  &lt;a href=&#34;https://start.spring.io/&#34;&gt;start.spring.io&lt;/a&gt;/) 并选择您想要在新应用程序中使用的 AI 模型和矢量存储。&lt;/p&gt;&#xA;&lt;h2 id=&#34;工件存储库&#34;&gt;&#xA;  工件存储库&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b7%a5%e4%bb%b6%e5%ad%98%e5%82%a8%e5%ba%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;里程碑---使用-maven-central&#34;&gt;&#xA;  里程碑 - 使用 Maven Central&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%87%8c%e7%a8%8b%e7%a2%91---%e4%bd%bf%e7%94%a8-maven-central&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;从 1.0.0-M6 开始，Maven Central 中已提供发布版本。无需更改构建文件。&lt;/p&gt;&#xA;&lt;h2 id=&#34;快照---添加快照存储库&#34;&gt;&#xA;  快照 - 添加快照存储库&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bf%ab%e7%85%a7---%e6%b7%bb%e5%8a%a0%e5%bf%ab%e7%85%a7%e5%ad%98%e5%82%a8%e5%ba%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;要使用快照（和 1.0.0-M6 里程碑之前的版本），您需要在构建文件中添加以下快照存储库。&lt;/p&gt;&#xA;&lt;p&gt;将以下存储库定义添加到您的 Maven 或 Gradle 构建文件中：&lt;/p&gt;&#xA;&lt;p&gt;注意： 将 Maven 与 Spring AI 快照结合使用时，请注意 Maven 镜像配置。如果您在 &lt;code&gt;settings.xml&lt;/code&gt; 中配置了镜像，如下所示：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;mirror&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;my-mirror&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;mirrorOf&amp;gt;&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/mirrorOf&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;https://my-company-repository.com/maven&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/mirror&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通配符 &lt;code&gt;*&lt;/code&gt; 会将所有仓库请求重定向到你的镜像仓库，从而阻止访问 Spring 快照仓库。要解决此问题，请修改 &lt;code&gt;mirrorOf&lt;/code&gt; 配置以排除 Spring 仓库：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;mirror&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;my-mirror&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;mirrorOf&amp;gt;&lt;/span&gt;*,!spring-snapshots,!central-portal-snapshots&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/mirrorOf&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;https://my-company-repository.com/maven&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/mirror&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此配置允许 Maven 直接访问 Spring 快照存储库，同时仍使用镜像来获取其他依赖项。&lt;/p&gt;</description>
    </item>
    <item>
      <title>提示</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%8F%90%E7%A4%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%8F%90%E7%A4%BA/</guid>
      <description>&lt;h1 id=&#34;提示&#34;&gt;&#xA;  提示&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8f%90%e7%a4%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;提示是引导 AI 模型生成特定输出的输入。这些提示的设计和措辞会显著影响模型的响应。&lt;/p&gt;&#xA;&lt;p&gt;在 Spring AI 中与 AI 模型交互的最低级别，处理 Spring AI 中的提示有点类似于管理 Spring MVC 中的“视图”。这涉及创建包含动态内容占位符的大量文本。然后，这些占位符会根据用户请求或应用程序中的其他代码进行替换。另一个类比是包含特定表达式占位符的 SQL 语句。&lt;/p&gt;&#xA;&lt;p&gt;随着 Spring AI 的发展，它将引入更高级别的抽象，以便与 AI 模型进行交互。本节中描述的基础类在角色和功能方面可以类比为 JDBC。例如， &lt;code&gt;ChatModel&lt;/code&gt; 类类似于 JDK 中的核心 &lt;code&gt;ChatClient&lt;/code&gt; 库。&lt;code&gt;ChatClient&lt;/code&gt; 类可以类比为 &lt;code&gt;JdbcClient&lt;/code&gt; ，它构建于 &lt;code&gt;ChatModel&lt;/code&gt; 之上，并通过 &lt;code&gt;Advisor&lt;/code&gt; 提供更高级的构造。&#xA;考虑过去与模型的交互，用额外的上下文文档扩充提示，并引入代理行为。&lt;/p&gt;&#xA;&lt;p&gt;在人工智能领域，提示符的结构一直在不断发展。最初，提示符只是简单的字符串。随着时间的推移，它们逐渐包含特定输入的占位符，例如“USER:”，而人工智能模型可以识别这些占位符。OpenAI 通过在人工智能模型处理多个消息字符串之前，将它们分类到不同的角色中，为提示符引入了更丰富的结构。&lt;/p&gt;&#xA;&lt;h2 id=&#34;api-概述&#34;&gt;&#xA;  API 概述&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#api-%e6%a6%82%e8%bf%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;迅速的&#34;&gt;&#xA;  迅速的&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%85%e9%80%9f%e7%9a%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;通常使用 &lt;code&gt;ChatModel&lt;/code&gt; 的 &lt;code&gt;call()&lt;/code&gt; 方法，该方法接受一个 &lt;code&gt;Prompt&lt;/code&gt; 实例并返回一个 &lt;code&gt;ChatResponse&lt;/code&gt; 。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Prompt&lt;/code&gt; 类充当一系列有序的 &lt;code&gt;Message&lt;/code&gt; 对象和一个 &lt;code&gt;ChatOptions&lt;/code&gt; 请求的容器。每条 &lt;code&gt;Message&lt;/code&gt; 在提示中都体现着独特的角色，其内容和意图各不相同。这些角色可以涵盖各种元素，从用户查询到 AI 生成的响应，再到相关的背景信息。这种安排使得与 AI 模型进行复杂而细致的交互成为可能，因为提示由多条消息构成，每条消息在对话中都被赋予了特定的角色。&lt;/p&gt;</description>
    </item>
    <item>
      <title>提示工程模式</title>
      <link>https://studyllm.github.io/docs/%E6%8C%87%E5%8D%97/%E6%8F%90%E7%A4%BA%E5%B7%A5%E7%A8%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E6%8C%87%E5%8D%97/%E6%8F%90%E7%A4%BA%E5%B7%A5%E7%A8%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h1 id=&#34;提示工程模式&#34;&gt;&#xA;  提示工程模式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8f%90%e7%a4%ba%e5%b7%a5%e7%a8%8b%e6%a8%a1%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;基于全面的[&#xA;  &lt;a href=&#34;https://www.kaggle.com/whitepaper-prompt-engineering&#34;&gt;即时工程指南&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.kaggle.com/whitepaper-prompt-engineering&#34;&gt;https://www.kaggle.com/whitepaper-prompt-engineering&lt;/a&gt;) ，我们将对即时工程技术进行实际应用。该指南涵盖了有效即时工程的理论、原则和模式，并演示了如何使用 Spring AI 流畅的 [&#xA;  &lt;a href=&#34;../chatclient.html&#34;&gt;ChatClient API&lt;/a&gt;](../chatclient.html) 将这些概念转化为可运行的 Java 代码。本文中使用的演示源代码可在以下位置获取： [&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai-examples/tree/main/prompt-engineering/prompt-engineering-patterns&#34;&gt;即时工程模式示例&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai-examples/tree/main/prompt-engineering/prompt-engineering-patterns&#34;&gt;https://github.com/spring-projects/spring-ai-examples/tree/main/prompt-engineering/prompt-engineering-patterns&lt;/a&gt;) 。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1配置&#34;&gt;&#xA;  1.配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;配置部分概述了如何使用 Spring AI 设置和调整大型语言模型 (LLM)。它涵盖了如何根据用例选择合适的 LLM 提供程序，以及如何配置重要的生成参数，以控制模型输出的质量、样式和格式。&lt;/p&gt;&#xA;&lt;h2 id=&#34;法学硕士llm提供商选择&#34;&gt;&#xA;  法学硕士（LLM）提供商选择&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b3%95%e5%ad%a6%e7%a1%95%e5%a3%abllm%e6%8f%90%e4%be%9b%e5%95%86%e9%80%89%e6%8b%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;为了快速进行工程设计，您需要先选择一个模型。Spring AI 支持[&#xA;  &lt;a href=&#34;comparison.html&#34;&gt;多个 LLM 提供商&lt;/a&gt;](comparison.html) （例如 OpenAI、Anthropic、Google Vertex AI、AWS Bedrock、Ollama 等），让您无需更改应用程序代码即可切换提供商 - 只需更新配置即可。只需添加所选的启动依赖项 &lt;code&gt;spring-ai-starter-model-&amp;lt;MODEL-PROVIDER-NAME&amp;gt;&lt;/code&gt; 即可。例如，以下是如何启用 Anthropic Claude API：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-model-anthropic&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您可以像这样指定 LLM 模型名称：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;options&lt;/span&gt;(ChatOptions.&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .&lt;span style=&#34;color:#a6e22e&#34;&gt;model&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;claude-3-7-sonnet-latest&amp;#34;&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// Use Anthropic&amp;#39;s Claude model&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在[&#xA;  &lt;a href=&#34;../chatmodel.html&#34;&gt;参考文档&lt;/a&gt;](../chatmodel.html)中查找有关启用每个模型的详细信息。&lt;/p&gt;&#xA;&lt;h2 id=&#34;llm-输出配置&#34;&gt;&#xA;  LLM 输出配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#llm-%e8%be%93%e5%87%ba%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;./images/chat-options-flow.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;在深入研究即时工程技术之前，我们有必要了解如何配置 LLM 的输出行为。Spring AI 提供了多个配置选项，可让您通过 [&#xA;  &lt;a href=&#34;../chatmodel.html#_chat_options&#34;&gt;ChatOptions&lt;/a&gt;](../chatmodel.html#_chat_options) 构建器控制生成的各个方面。&lt;/p&gt;</description>
    </item>
    <item>
      <title>泰坦嵌入</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/%E4%BA%9A%E9%A9%AC%E9%80%8A%E5%9F%BA%E5%B2%A9/%E6%B3%B0%E5%9D%A6%E5%B5%8C%E5%85%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/%E4%BA%9A%E9%A9%AC%E9%80%8A%E5%9F%BA%E5%B2%A9/%E6%B3%B0%E5%9D%A6%E5%B5%8C%E5%85%A5/</guid>
      <description>&lt;h1 id=&#34;泰坦嵌入&#34;&gt;&#xA;  泰坦嵌入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b3%b0%e5%9d%a6%e5%b5%8c%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;提供 Bedrock Titan 嵌入模型。&#xA;[&#xA;  &lt;a href=&#34;https://aws.amazon.com/bedrock/titan/&#34;&gt;Amazon Titan&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://aws.amazon.com/bedrock/titan/&#34;&gt;https://aws.amazon.com/bedrock/titan/&lt;/a&gt;) 基础模型 (FM) 通过完全托管的 API 为客户提供丰富的高性能图像、多模态嵌入和文本模型选择。[&#xA;  &lt;a href=&#34;https://aws.amazon.com/bedrock/titan/&#34;&gt;Amazon Titan&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://aws.amazon.com/bedrock/titan/&#34;&gt;https://aws.amazon.com/bedrock/titan/&lt;/a&gt;) 模型由 AWS 创建，并在大型数据集上进行预训练，使其成为功能强大的通用模型，旨在支持各种用例，同时支持以负责任的方式使用 AI。您可以按原样使用它们，也可以使用您自己的数据进行个性化定制。&lt;/p&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://aws.amazon.com/bedrock/titan/&#34;&gt;AWS Bedrock Titan 模型页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://aws.amazon.com/bedrock/titan/&#34;&gt;https://aws.amazon.com/bedrock/titan/&lt;/a&gt;)和 [&#xA;  &lt;a href=&#34;https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-bedrock.html&#34;&gt;Amazon Bedrock 用户指南&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-bedrock.html&#34;&gt;https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-bedrock.html&lt;/a&gt;)包含有关如何使用 AWS 托管模型的详细信息。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;请参阅 [&#xA;  &lt;a href=&#34;../bedrock.html&#34;&gt;Amazon Bedrock 上的 Spring AI 文档&lt;/a&gt;](../bedrock.html)以了解如何设置 API 访问。&lt;/p&gt;&#xA;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 的构件已发布在 Maven Central 和 Spring Snapshot 仓库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;“构件仓库”&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些仓库添加到您的构建系统中。&lt;/p&gt;&#xA;&lt;p&gt;为了帮助管理依赖项，Spring AI 提供了 BOM（物料清单），以确保在整个项目中使用一致版本的 Spring AI。请参阅[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)部分，将 Spring AI BOM 添加到您的构建系统中。&lt;/p&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;将 &lt;code&gt;spring-ai-starter-model-bedrock&lt;/code&gt; 依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;</description>
    </item>
    <item>
      <title>适度</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E9%80%82%E5%BA%A6/%E9%80%82%E5%BA%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E9%80%82%E5%BA%A6/%E9%80%82%E5%BA%A6/</guid>
      <description>&lt;h1 id=&#34;适度&#34;&gt;&#xA;  适度&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%80%82%e5%ba%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;介绍&#34;&gt;&#xA;  介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 支持 Mistral AI 推出的全新审核服务，该服务由 Mistral Moderation 模型提供支持。它能够从多个策略维度检测有害文本内容。点击此[&#xA;  &lt;a href=&#34;https://docs.mistral.ai/capabilities/guardrailing/&#34;&gt;链接&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.mistral.ai/capabilities/guardrailing/&#34;&gt;https://docs.mistral.ai/capabilities/guardrailing/&lt;/a&gt;) ，了解更多关于 Mistral AI 审核模型的信息。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Mistral AI Moderation 模型提供了 Spring Boot 自动配置功能。要启用此功能，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-model-mistral-ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者到你的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-model-mistral-ai&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;适度属性&#34;&gt;&#xA;  适度属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%80%82%e5%ba%a6%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;连接属性&#34;&gt;&#xA;  连接属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%9e%e6%8e%a5%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;前缀 spring.ai.mistralai 用作允许您连接到 Mistral AI 的属性前缀。&lt;/p&gt;&#xA;&lt;h2 id=&#34;配置属性&#34;&gt;&#xA;  配置属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%85%8d%e7%bd%ae%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;前缀 spring.ai.mistralai.moderation 用作配置 Mistral AI 调节模型的属性前缀。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Apache Cassandra 矢量存储</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/apache-cassandra-%E7%9F%A2%E9%87%8F%E5%AD%98%E5%82%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/apache-cassandra-%E7%9F%A2%E9%87%8F%E5%AD%98%E5%82%A8/</guid>
      <description>&lt;h1 id=&#34;apache-cassandra-矢量存储&#34;&gt;&#xA;  Apache Cassandra 矢量存储&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#apache-cassandra-%e7%9f%a2%e9%87%8f%e5%ad%98%e5%82%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将引导您设置 &lt;code&gt;CassandraVectorStore&lt;/code&gt; 来存储文档嵌入并执行相似性搜索。&lt;/p&gt;&#xA;&lt;h2 id=&#34;什么是-apache-cassandra&#34;&gt;&#xA;  什么是 Apache Cassandra？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af-apache-cassandra&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://cassandra.apache.org&#34;&gt;Apache Cassandra®&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://cassandra.apache.org&#34;&gt;https://cassandra.apache.org&lt;/a&gt;) 是一个真正的开源分布式数据库，以线性可扩展性、成熟的容错性和低延迟而闻名，使其成为关键任务事务数据的完美平台。&lt;/p&gt;&#xA;&lt;p&gt;其向量相似性搜索 (VSS) 基于 JVector 库，可确保一流的性能和相关性。&lt;/p&gt;&#xA;&lt;p&gt;Apache Cassandra 中的向量搜索非常简单：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; content &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; content_vector ANN &lt;span style=&#34;color:#66d9ef&#34;&gt;OF&lt;/span&gt; query_embedding;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您可以[&#xA;  &lt;a href=&#34;https://cassandra.apache.org/doc/latest/cassandra/getting-started/vector-search-quickstart.html&#34;&gt;在此处&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://cassandra.apache.org/doc/latest/cassandra/getting-started/vector-search-quickstart.html&#34;&gt;https://cassandra.apache.org/doc/latest/cassandra/getting-started/vector-search-quickstart.html&lt;/a&gt;)阅读更多相关文档。&lt;/p&gt;&#xA;&lt;p&gt;这个 Spring AI Vector Store 旨在适用于全新的 RAG 应用程序，并且能够在现有数据和表格的基础上进行改造。&lt;/p&gt;&#xA;&lt;p&gt;该存储还可用于现有数据库中的非 RAG 用例，例如语义搜索、地理邻近搜索等。&lt;/p&gt;&#xA;&lt;p&gt;存储将根据其配置自动创建或增强架构。如果您不想修改架构，请使用 &lt;code&gt;initializeSchema&lt;/code&gt; 配置存储。&lt;/p&gt;&#xA;&lt;p&gt;根据 Spring Boot 标准，使用 spring-boot-autoconfigure 时， &lt;code&gt;initializeSchema&lt;/code&gt; 默认为 &lt;code&gt;false&lt;/code&gt; ，并且您必须通过在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置 &lt;code&gt;…​initialize-schema=true&lt;/code&gt; 来选择加入模式创建/修改。&lt;/p&gt;&#xA;&lt;h2 id=&#34;什么是-jvector&#34;&gt;&#xA;  什么是 JVector？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af-jvector&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://github.com/jbellis/jvector&#34;&gt;JVector&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://github.com/jbellis/jvector&#34;&gt;https://github.com/jbellis/jvector&lt;/a&gt;) 是一个纯 Java 嵌入式矢量搜索引擎。&lt;/p&gt;&#xA;&lt;p&gt;它与其他 HNSW 向量相似性搜索实现相比，具有以下优势：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;算法快速。JVector 使用受 DiskANN 和相关研究启发的最先进的图形算法，可提供高召回率和低延迟。&lt;/li&gt;&#xA;&lt;li&gt;执行速度快。JVector 使用 Panama SIMD API 来加速索引构建和查询。&lt;/li&gt;&#xA;&lt;li&gt;内存高效。JVector 使用乘积量化来压缩向量，以便它们在搜索期间可以保留在内存中。&lt;/li&gt;&#xA;&lt;li&gt;磁盘感知。JVector 的磁盘布局旨在在查询时执行最少的必要 iops。&lt;/li&gt;&#xA;&lt;li&gt;并发。索引构建线性扩展至至少 32 个线程。线程数加倍，构建时间减半。&lt;/li&gt;&#xA;&lt;li&gt;增量式。在构建索引时进行查询。添加向量和在搜索结果中找到向量之间没有延迟。&lt;/li&gt;&#xA;&lt;li&gt;易于嵌入。API 的设计旨在方便人们在生产环境中嵌入。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;依赖项&#34;&gt;&#xA;  依赖项&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%be%9d%e8%b5%96%e9%a1%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;将这些依赖项添加到您的项目：&lt;/p&gt;</description>
    </item>
    <item>
      <title>MCP 实用程序</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%8D%8F%E8%AE%AEmcp/mcp-%E5%AE%9E%E7%94%A8%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%8D%8F%E8%AE%AEmcp/mcp-%E5%AE%9E%E7%94%A8%E7%A8%8B%E5%BA%8F/</guid>
      <description>&lt;h1 id=&#34;mcp-实用程序&#34;&gt;&#xA;  MCP 实用程序&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mcp-%e5%ae%9e%e7%94%a8%e7%a8%8b%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;MCP 实用程序为将模型上下文协议 (MCP) 与 Spring AI 应用程序集成提供了基础支持。这些实用程序支持 Spring AI 工具系统与 MCP 服务器之间的无缝通信，并支持同步和异步操作。它们通常用于以编程方式配置和交互 MCP 客户端和服务器。如需更精简的配置，请考虑使用启动器。&lt;/p&gt;&#xA;&lt;h2 id=&#34;toolcallback-实用程序&#34;&gt;&#xA;  ToolCallback 实用程序&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#toolcallback-%e5%ae%9e%e7%94%a8%e7%a8%8b%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;工具回调适配器&#34;&gt;&#xA;  工具回调适配器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b7%a5%e5%85%b7%e5%9b%9e%e8%b0%83%e9%80%82%e9%85%8d%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;将 MCP 工具适配到 Spring AI 的工具接口，支持同步和异步执行。&lt;/p&gt;&#xA;&lt;h2 id=&#34;工具回调提供程序&#34;&gt;&#xA;  工具回调提供程序&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b7%a5%e5%85%b7%e5%9b%9e%e8%b0%83%e6%8f%90%e4%be%9b%e7%a8%8b%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;从 MCP 客户端发现并提供 MCP 工具。&lt;/p&gt;&#xA;&lt;h2 id=&#34;toolcallbacks-到-toolspecifications&#34;&gt;&#xA;  ToolCallbacks 到 ToolSpecifications&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#toolcallbacks-%e5%88%b0-toolspecifications&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;将 Spring AI 工具回调转换为 MCP 工具规范：&lt;/p&gt;&#xA;&lt;h2 id=&#34;mcp-客户端到-toolcallbacks&#34;&gt;&#xA;  MCP 客户端到 ToolCallbacks&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mcp-%e5%ae%a2%e6%88%b7%e7%ab%af%e5%88%b0-toolcallbacks&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;从 MCP 客户端获取工具回调&lt;/p&gt;&#xA;&lt;h2 id=&#34;原生图像支持&#34;&gt;&#xA;  原生图像支持&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8e%9f%e7%94%9f%e5%9b%be%e5%83%8f%e6%94%af%e6%8c%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;McpHints&lt;/code&gt; 类为 MCP 模式类提供 GraalVM 原生镜像提示。该类会在构建原生镜像时自动为 MCP 模式类注册所有必要的反射提示。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mistral AI 嵌入</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/mistral-ai-%E5%B5%8C%E5%85%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/mistral-ai-%E5%B5%8C%E5%85%A5/</guid>
      <description>&lt;h1 id=&#34;mistral-ai-嵌入&#34;&gt;&#xA;  Mistral AI 嵌入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mistral-ai-%e5%b5%8c%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 Mistral AI 的文本嵌入模型。嵌入是文本的矢量表示，它通过段落在高维向量空间中的位置来捕捉其语义。Mistral AI 嵌入 API 提供了尖端、先进的文本嵌入方法，可用于多种 NLP 任务。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 MistralAI 创建一个 API 来访问 MistralAI 嵌入模型。&lt;/p&gt;&#xA;&lt;p&gt;在 [&#xA;  &lt;a href=&#34;https://auth.mistral.ai/ui/registration&#34;&gt;MistralAI 注册页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://auth.mistral.ai/ui/registration&#34;&gt;https://auth.mistral.ai/ui/registration&lt;/a&gt;)创建一个帐户，并在 [&#xA;  &lt;a href=&#34;https://console.mistral.ai/api-keys/&#34;&gt;API 密钥页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://console.mistral.ai/api-keys/&#34;&gt;https://console.mistral.ai/api-keys/&lt;/a&gt;)上生成令牌。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.mistralai.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 console.mistralai.ai 获取的 &lt;code&gt;API Key&lt;/code&gt; 的值。&lt;/p&gt;&#xA;&lt;p&gt;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.mistralai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-mistralai-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 (SpEL) 来引用环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;mistralai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${MISTRALAI_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export MISTRALAI_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-mistralai-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;</description>
    </item>
    <item>
      <title>人类学 3 聊天</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/%E4%BA%BA%E7%B1%BB%E5%AD%A6-3-%E8%81%8A%E5%A4%A9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/%E4%BA%BA%E7%B1%BB%E5%AD%A6-3-%E8%81%8A%E5%A4%A9/</guid>
      <description>&lt;h1 id=&#34;人类学-3-聊天&#34;&gt;&#xA;  人类学 3 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%ba%e7%b1%bb%e5%ad%a6-3-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://www.anthropic.com/&#34;&gt;Anthropic Claude&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.anthropic.com/&#34;&gt;https://www.anthropic.com/&lt;/a&gt;) 是一系列基础 AI 模型，可用于各种应用。对于开发者和企业，您可以利用 API 访问权限，直接在 [&#xA;  &lt;a href=&#34;https://www.anthropic.com/api&#34;&gt;Anthropic 的 AI 基础架构&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.anthropic.com/api&#34;&gt;https://www.anthropic.com/api&lt;/a&gt;)上进行构建。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI 支持 Anthropic [&#xA;  &lt;a href=&#34;https://docs.anthropic.com/claude/reference/messages_post&#34;&gt;Messaging API&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.anthropic.com/claude/reference/messages_post&#34;&gt;https://docs.anthropic.com/claude/reference/messages_post&lt;/a&gt;) 进行同步和流文本生成。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要在 Anthropic 门户上创建一个 API 密钥。&lt;/p&gt;&#xA;&lt;p&gt;在 [&#xA;  &lt;a href=&#34;https://console.anthropic.com/dashboard&#34;&gt;Anthropic API 仪表板上&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://console.anthropic.com/dashboard&#34;&gt;https://console.anthropic.com/dashboard&lt;/a&gt;)创建一个帐户，并在[&#xA;  &lt;a href=&#34;https://console.anthropic.com/settings/keys&#34;&gt;获取 API 密钥&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://console.anthropic.com/settings/keys&#34;&gt;https://console.anthropic.com/settings/keys&lt;/a&gt;)页面上生成 API 密钥。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.anthropic.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 anthropic.com 获取的 &lt;code&gt;API Key&lt;/code&gt; 的值。&lt;/p&gt;&#xA;&lt;p&gt;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.anthropic.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-anthropic-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 (SpEL) 引用自定义环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;anthropic&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${ANTHROPIC_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export ANTHROPIC_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-anthropic-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建有效代理</title>
      <link>https://studyllm.github.io/docs/%E6%8C%87%E5%8D%97/%E6%9E%84%E5%BB%BA%E6%9C%89%E6%95%88%E4%BB%A3%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E6%8C%87%E5%8D%97/%E6%9E%84%E5%BB%BA%E6%9C%89%E6%95%88%E4%BB%A3%E7%90%86/</guid>
      <description>&lt;h1 id=&#34;构建有效代理&#34;&gt;&#xA;  构建有效代理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9e%84%e5%bb%ba%e6%9c%89%e6%95%88%e4%bb%a3%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;代理系统&#34;&gt;&#xA;  代理系统&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%a3%e7%90%86%e7%b3%bb%e7%bb%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;该研究出版物对两种类型的代理系统进行了重要的架构区分：&lt;/p&gt;&#xA;&lt;p&gt;关键在于，虽然完全自主的代理看似诱人，但工作流通常能为定义明确的任务提供更好的可预测性和一致性。这完全符合企业对可靠性和可维护性至关重要的需求。&lt;/p&gt;&#xA;&lt;p&gt;让我们来看看 Spring AI 如何通过五种基本模式实现这些概念，每种模式都服务于特定的用例：&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-链式工作流程&#34;&gt;&#xA;  1. 链式工作流程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e9%93%be%e5%bc%8f%e5%b7%a5%e4%bd%9c%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;链式工作流模式体现了将复杂任务分解为更简单、更易于管理的步骤的原则。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F7418719e3dab222dccb379b8879e1dc08ad34c78-2401x1000.png&amp;amp;w=3840&amp;amp;q=75&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;何时使用：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;具有明确顺序步骤的任务&lt;/li&gt;&#xA;&lt;li&gt;当你想以延迟换取更高的准确度时&lt;/li&gt;&#xA;&lt;li&gt;每一步都建立在前一步的输出之上&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;以下是 Spring AI 实现的一个实际示例：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ChainWorkflow&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; ChatClient chatClient;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; systemPrompts;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;chain&lt;/span&gt;(String userInput) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        String response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; userInput;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (String prompt : systemPrompts) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            String input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String.&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{%s}\n {%s}&amp;#34;&lt;/span&gt;, prompt, response);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chatClient.&lt;span style=&#34;color:#a6e22e&#34;&gt;prompt&lt;/span&gt;(input).&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; response;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此实施体现了几个关键原则：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每一步都有重点责任&lt;/li&gt;&#xA;&lt;li&gt;一个步骤的输出成为下一个步骤的输入&lt;/li&gt;&#xA;&lt;li&gt;该链易于扩展和维护&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2-并行化工作流程&#34;&gt;&#xA;  2. 并行化工作流程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e5%b9%b6%e8%a1%8c%e5%8c%96%e5%b7%a5%e4%bd%9c%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;LLM 可以同时执行任务并通过编程方式汇总其输出。&lt;/p&gt;</description>
    </item>
    <item>
      <title>稳定性 AI 图像生成</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%9E%8B-api/%E7%A8%B3%E5%AE%9A%E6%80%A7-ai-%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%9E%8B-api/%E7%A8%B3%E5%AE%9A%E6%80%A7-ai-%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90/</guid>
      <description>&lt;h1 id=&#34;稳定性-ai-图像生成&#34;&gt;&#xA;  稳定性 AI 图像生成&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%a8%b3%e5%ae%9a%e6%80%a7-ai-%e5%9b%be%e5%83%8f%e7%94%9f%e6%88%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 Stability AI 的[&#xA;  &lt;a href=&#34;https://platform.stability.ai/docs/api-reference#tag/v1generation&#34;&gt;文本到图像生成模型&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://platform.stability.ai/docs/api-reference#tag/v1generation&#34;&gt;https://platform.stability.ai/docs/api-reference#tag/v1generation&lt;/a&gt;) 。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要创建 Stability AI 的 API 密钥才能访问其 AI 模型。请按照其[&#xA;  &lt;a href=&#34;https://platform.stability.ai/docs/getting-started/authentication&#34;&gt;入门文档&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://platform.stability.ai/docs/getting-started/authentication&#34;&gt;https://platform.stability.ai/docs/getting-started/authentication&lt;/a&gt;)获取 API 密钥。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.stabilityai.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 Stability AI 获取的 &lt;code&gt;API Key&lt;/code&gt; 的值。&lt;/p&gt;&#xA;&lt;p&gt;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.stabilityai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-stabilityai-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 (SpEL) 引用自定义环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;stabilityai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${STABILITYAI_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export STABILITYAI_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-stabilityai-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve API key from a secure source or environment variable&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String apiKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;STABILITYAI_API_KEY&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Stability AI 图像生成客户端提供了 Spring Boot 自动配置功能。要启用此功能，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;</description>
    </item>
    <item>
      <title>结构化输出转换器</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%BB%93%E6%9E%84%E5%8C%96%E8%BE%93%E5%87%BA%E8%BD%AC%E6%8D%A2%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%BB%93%E6%9E%84%E5%8C%96%E8%BE%93%E5%87%BA%E8%BD%AC%E6%8D%A2%E5%99%A8/</guid>
      <description>&lt;h1 id=&#34;结构化输出转换器&#34;&gt;&#xA;  结构化输出转换器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bb%93%e6%9e%84%e5%8c%96%e8%be%93%e5%87%ba%e8%bd%ac%e6%8d%a2%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;LLM 生成结构化输出的能力对于依赖可靠解析输出值的下游应用程序至关重要。开发人员希望快速将 AI 模型的结果转换为可传递给其他应用程序函数和方法的数据类型，例如 JSON、XML 或 Java 类。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI &lt;code&gt;Structured Output Converters&lt;/code&gt; 有助于将 LLM 输出转换为结构化格式。如下图所示，此方法围绕 LLM 文本补全端点运行：&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;./images/structured-output-architecture.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用通用补全 API 从大型语言模型 (LLM) 生成结构化输出需要仔细处理输入和输出。结构化输出转换器在 LLM 调用前后起着至关重要的作用，确保实现所需的输出结构。&lt;/p&gt;&#xA;&lt;p&gt;在 LLM 调用之前，转换器会将格式指令附加到提示中，为模型提供生成所需输出结构的明确指导。这些指令充当蓝图，塑造模型的响应以符合指定的格式。&lt;/p&gt;&#xA;&lt;p&gt;LLM 调用后，转换器会获取模型的输出文本，并将其转换为结构化类型的实例。此转换过程包括解析原始文本输出并将其映射到相应的结构化数据表示形式，例如 JSON、XML 或特定于域的数据结构。&lt;/p&gt;&#xA;&lt;h2 id=&#34;结构化输出-api&#34;&gt;&#xA;  结构化输出 API&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bb%93%e6%9e%84%e5%8c%96%e8%be%93%e5%87%ba-api&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;StructuredOutputConverter&lt;/code&gt; 接口允许您获取结构化输出，例如将基于文本的 AI 模型输出映射到 Java 类或值数组。接口定义如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StructuredOutputConverter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Converter&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String, T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, FormatProvider {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它结合了 Spring [&#xA;  &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/convert/converter/Converter.html&#34;&gt;Converter&amp;lt;String、T&amp;gt;&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/convert/converter/Converter.html&#34;&gt;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/convert/converter/Converter.html&lt;/a&gt;) 接口和 &lt;code&gt;FormatProvider&lt;/code&gt; 接口&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FormatProvider&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;String &lt;span style=&#34;color:#a6e22e&#34;&gt;getFormat&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下图显示了使用结构化输出 API 时的数据流。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;./images/structured-output-api.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;FormatProvider&lt;/code&gt; 为 AI 模型提供特定的格式指南，使其能够生成文本输出，并使用 &lt;code&gt;Converter&lt;/code&gt; 将其转换为指定的目标类型 &lt;code&gt;T&lt;/code&gt; 以下是此类格式指令的示例：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure OpenAI 聊天</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/azure-openai-%E8%81%8A%E5%A4%A9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/azure-openai-%E8%81%8A%E5%A4%A9/</guid>
      <description>&lt;h1 id=&#34;azure-openai-聊天&#34;&gt;&#xA;  Azure OpenAI 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#azure-openai-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Azure 的 OpenAI 产品由 ChatGPT 提供支持，超越了传统的 OpenAI 功能，提供功能增强的 AI 驱动文本生成。Azure 提供了额外的 AI 安全性和负责任的 AI 功能，正如其最新更新中[&#xA;  &lt;a href=&#34;https://techcommunity.microsoft.com/t5/ai-azure-ai-services-blog/announcing-new-ai-safety-amp-responsible-ai-features-in-azure/ba-p/3983686&#34;&gt;所&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://techcommunity.microsoft.com/t5/ai-azure-ai-services-blog/announcing-new-ai-safety-amp-responsible-ai-features-in-azure/ba-p/3983686&#34;&gt;https://techcommunity.microsoft.com/t5/ai-azure-ai-services-blog/announcing-new-ai-safety-amp-responsible-ai-features-in-azure/ba-p/3983686&lt;/a&gt;)强调的那样。&lt;/p&gt;&#xA;&lt;p&gt;Azure 通过将 AI 与一系列 Azure 服务相集成，为 Java 开发人员提供了充分发挥 AI 潜力的机会，其中包括 Azure 上的矢量存储等与 AI 相关的资源。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Azure OpenAI 客户端提供三种连接选项：使用 Azure API 密钥或使用 OpenAI API 密钥，或使用 Microsoft Entra ID。&lt;/p&gt;&#xA;&lt;h2 id=&#34;azure-api-密钥和端点&#34;&gt;&#xA;  Azure API 密钥和端点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#azure-api-%e5%af%86%e9%92%a5%e5%92%8c%e7%ab%af%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;要使用 API 密钥访问模型，请从 [&#xA;  &lt;a href=&#34;https://portal.azure.com&#34;&gt;Azure 门户&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://portal.azure.com&#34;&gt;https://portal.azure.com&lt;/a&gt;)上的 Azure OpenAI 服务部分获取 Azure OpenAI &lt;code&gt;endpoint&lt;/code&gt; 和 &lt;code&gt;api-key&lt;/code&gt; 。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI 定义了两个配置属性：&lt;/p&gt;</description>
    </item>
    <item>
      <title>MiniMax 聊天</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/minimax-%E8%81%8A%E5%A4%A9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/minimax-%E8%81%8A%E5%A4%A9/</guid>
      <description>&lt;h1 id=&#34;minimax-聊天&#34;&gt;&#xA;  MiniMax 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#minimax-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 MiniMax 的各种 AI 语言模型。您可以与 MiniMax 语言模型进行交互，并基于 MiniMax 模型创建多语言对话助手。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 MiniMax 创建一个 API 来访问 MiniMax 语言模型。&lt;/p&gt;&#xA;&lt;p&gt;在 [&#xA;  &lt;a href=&#34;https://www.minimaxi.com/login&#34;&gt;MiniMax 注册页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.minimaxi.com/login&#34;&gt;https://www.minimaxi.com/login&lt;/a&gt;)创建一个帐户，并在 [&#xA;  &lt;a href=&#34;https://www.minimaxi.com/user-center/basic-information/interface-key&#34;&gt;API Keys 页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.minimaxi.com/user-center/basic-information/interface-key&#34;&gt;https://www.minimaxi.com/user-center/basic-information/interface-key&lt;/a&gt;)生成令牌。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.minimax.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 &lt;code&gt;API Key&lt;/code&gt;s 页面获取的 &lt;code&gt;API Key&lt;/code&gt; 的值。&lt;/p&gt;&#xA;&lt;p&gt;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.minimax.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-minimax-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 (SpEL) 来引用环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;minimax&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${MINIMAX_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export MINIMAX_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-minimax-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;</description>
    </item>
    <item>
      <title>ZhiPuAI 图像生成</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%9E%8B-api/zhipuai-%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%9E%8B-api/zhipuai-%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90/</guid>
      <description>&lt;h1 id=&#34;zhipuai-图像生成&#34;&gt;&#xA;  ZhiPuAI 图像生成&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#zhipuai-%e5%9b%be%e5%83%8f%e7%94%9f%e6%88%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持来自 ZhiPuAI 的图像生成模型 CogView。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 ZhiPuAI 创建一个 API 来访问 ZhiPu AI 语言模型。&lt;/p&gt;&#xA;&lt;p&gt;在[&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/login&#34;&gt;智普 AI 注册页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/login&#34;&gt;https://open.bigmodel.cn/login&lt;/a&gt;)创建账号，并在 [&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/usercenter/apikeys&#34;&gt;API Keys 页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/usercenter/apikeys&#34;&gt;https://open.bigmodel.cn/usercenter/apikeys&lt;/a&gt;)生成 token。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.zhipuai.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 &lt;code&gt;API Key&lt;/code&gt;s 页面获取的 &lt;code&gt;API Key&lt;/code&gt; 的值。&lt;/p&gt;&#xA;&lt;p&gt;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.zhipuai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-zhipuai-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 (SpEL) 引用自定义环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;zhipuai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${ZHIPUAI_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export ZHIPUAI_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-zhipuai-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve API key from a secure source or environment variable&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String apiKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ZHIPUAI_API_KEY&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 的构件已发布在 Maven Central 和 Spring Snapshot 仓库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;“构件仓库”&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些仓库添加到您的构建系统中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>云绑定</title>
      <link>https://studyllm.github.io/docs/%E6%8C%87%E5%8D%97/%E4%BA%91%E7%BB%91%E5%AE%9A/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E6%8C%87%E5%8D%97/%E4%BA%91%E7%BB%91%E5%AE%9A/</guid>
      <description>&lt;h1 id=&#34;云绑定&#34;&gt;&#xA;  云绑定&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%91%e7%bb%91%e5%ae%9a&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 基于 [&#xA;  &lt;a href=&#34;https://github.com/spring-cloud/spring-cloud-bindings&#34;&gt;spring-cloud-bindings&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://github.com/spring-cloud/[spring-cloud-bindings]%28https://github.com/spring-cloud/spring-cloud-bindings%29&#34;&gt;https://github.com/spring-cloud/[spring-cloud-bindings](https://github.com/spring-cloud/spring-cloud-bindings)&lt;/a&gt;) 的基础，提供对云绑定的支持。这允许应用程序为提供程序指定绑定类型，然后使用通用格式表达属性。spring-ai 云绑定将处理这些属性，并将其绑定到 spring-ai 原生属性。&lt;/p&gt;&#xA;&lt;p&gt;例如，使用 &lt;code&gt;OpenAi&lt;/code&gt; 时，绑定类型为 &lt;code&gt;openai&lt;/code&gt; 。使用属性 spring.ai.cloud.bindings.&lt;code&gt;openai&lt;/code&gt;.enabled 可以启用或禁用绑定处理器。默认情况下，指定绑定类型时将启用此属性。可以指定 &lt;code&gt;api-key&lt;/code&gt; 、 &lt;code&gt;uri&lt;/code&gt; 、 &lt;code&gt;username&lt;/code&gt; 、 &lt;code&gt;password&lt;/code&gt; 等配置，spring-ai 会将它们映射到所支持系统中的相应属性。&lt;/p&gt;&#xA;&lt;p&gt;要启用云绑定支持，请在应用程序中包含以下依赖项。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-spring-cloud-bindings&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者到你的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-spring-cloud-bindings&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;可用的云绑定&#34;&gt;&#xA;  可用的云绑定&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%af%e7%94%a8%e7%9a%84%e4%ba%91%e7%bb%91%e5%ae%9a&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;以下是 &lt;code&gt;spring-ai-spring-clou-bindings&lt;/code&gt; 模块中当前提供云绑定支持的组件：&lt;/p&gt;</description>
    </item>
    <item>
      <title>多模态 API</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E5%A4%9A%E6%A8%A1%E6%80%81-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E5%A4%9A%E6%A8%A1%E6%80%81-api/</guid>
      <description>&lt;h1 id=&#34;多模态-api&#34;&gt;&#xA;  多模态 API&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a4%9a%e6%a8%a1%e6%80%81-api&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;人类能够同时处理多种数据输入模式的知识。我们的学习方式和经验都是多模态的。我们拥有的不仅仅是视觉、听觉和文本。&lt;/p&gt;&#xA;&lt;p&gt;与这些原则相反，机器学习通常专注于为处理单一模态而定制的专用模型。例如，我们开发了用于文本转语音或语音转文本等任务的音频模型，以及用于对象检测和分类等任务的计算机视觉模型。&lt;/p&gt;&#xA;&lt;p&gt;然而，新一波多模态大型语言模型开始涌现。例如，OpenAI 的 GPT-4o、谷歌的 Vertex AI Gemini 1.5、Anthropic 的 Claude3，以及开源产品 Llama3.2、LLaVA 和 BakLLaVA，它们能够接受多种输入，包括文本、图像、音频和视频，并通过集成这些输入来生成文本响应。&lt;/p&gt;&#xA;&lt;h2 id=&#34;spring-ai-多模态&#34;&gt;&#xA;  Spring AI 多模态&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-ai-%e5%a4%9a%e6%a8%a1%e6%80%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;多模态性是指模型同时理解和处理来自各种来源的信息的能力，包括文本、图像、音频和其他数据格式。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI Message API 提供了支持多模式 LLM 所需的所有抽象。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;./images/spring-ai-message-api.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;UserMessage 的 &lt;code&gt;content&lt;/code&gt; 字段主要用于文本输入，而可选的 &lt;code&gt;media&lt;/code&gt; 字段允许添加一个或多个不同模态的附加内容，例如图像、音频和视频。&lt;code&gt;MimeType&lt;/code&gt; 指定模态类型。根据所使用的 LLM， &lt;code&gt;Media&lt;/code&gt; 数据字段可以是作为 &lt;code&gt;Resource&lt;/code&gt; 对象的原始媒体内容 &lt;code&gt;MimeType&lt;/code&gt; 也可以是指向该内容的 &lt;code&gt;URI&lt;/code&gt; 。&lt;/p&gt;&#xA;&lt;p&gt;例如，我们可以将下面的图片（ &lt;code&gt;multimodal.test.png&lt;/code&gt; ）作为输入，并要求 LLM 解释它所看到的内容。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;./images/multimodal.test.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;对于大多数多模式 LLM，Spring AI 代码看起来像这样：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; imageResource &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ClassPathResource(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/multimodal.test.png&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; userMessage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; UserMessage(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Explain what do you see in this picture?&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// content&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Media(MimeTypeUtils.&lt;span style=&#34;color:#a6e22e&#34;&gt;IMAGE_PNG&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;imageResource&lt;/span&gt;)); &lt;span style=&#34;color:#75715e&#34;&gt;// media&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ChatResponse response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chatModel.&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Prompt(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;userMessage&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者使用流畅的 [&#xA;  &lt;a href=&#34;chatclient.html&#34;&gt;ChatClient&lt;/a&gt;](chatclient.html) API：&lt;/p&gt;</description>
    </item>
    <item>
      <title>色度</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/%E8%89%B2%E5%BA%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/%E8%89%B2%E5%BA%A6/</guid>
      <description>&lt;h1 id=&#34;色度&#34;&gt;&#xA;  色度&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%89%b2%e5%ba%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将引导您设置 Chroma VectorStore 来存储文档嵌入并执行相似性搜索。&lt;/p&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://docs.trychroma.com/&#34;&gt;Chroma&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.trychroma.com/&#34;&gt;https://docs.trychroma.com/&lt;/a&gt;) 是一个开源的嵌入数据库。它提供了存储文档嵌入、内容和元数据的工具，并支持搜索这些嵌入，包括元数据过滤。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;启动时，如果尚未配置， &lt;code&gt;ChromaVectorStore&lt;/code&gt; 会创建所需的集合。&lt;/p&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Chroma 矢量存储提供了 Spring Boot 自动配置功能。要启用此功能，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-vector-store-chroma&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者到你的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-vector-store-chroma&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;向量存储实现可以为您初始化必要的模式，但您必须通过在适当的构造函数中指定 &lt;code&gt;initializeSchema&lt;/code&gt; 布尔值或在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置 &lt;code&gt;…​initialize-schema=true&lt;/code&gt; 来选择加入。&lt;/p&gt;&#xA;&lt;p&gt;此外，您还需要一个已配置的 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; bean。有关更多信息，请参阅 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; 部分。&lt;/p&gt;&#xA;&lt;p&gt;以下是所需 bean 的示例：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; EmbeddingModel &lt;span style=&#34;color:#a6e22e&#34;&gt;embeddingModel&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Can be any other EmbeddingModel implementation.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OpenAiEmbeddingModel(OpenAiApi.&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;apiKey&lt;/span&gt;(System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OPENAI_API_KEY&amp;#34;&lt;/span&gt;)).&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要连接到 Chroma，您需要提供实例的访问详细信息。您可以通过 Spring Boot 的 application.properties 提供简单的配置，&lt;/p&gt;</description>
    </item>
    <item>
      <title>Couchbase</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/couchbase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/couchbase/</guid>
      <description>&lt;h1 id=&#34;couchbase&#34;&gt;&#xA;  Couchbase&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#couchbase&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将引导您设置 &lt;code&gt;CouchbaseSearchVectorStore&lt;/code&gt; 来存储文档嵌入并使用 Couchbase 执行相似性搜索。&lt;/p&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://docs.couchbase.com/server/current/vector-search/vector-search.html&#34;&gt;Couchbase&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.couchbase.com/server/current/vector-search/vector-search.html&#34;&gt;https://docs.couchbase.com/server/current/vector-search/vector-search.html&lt;/a&gt;) 是一个分布式 JSON 文档数据库，具备关系型数据库管理系统 (DBMS) 的所有功能。此外，它还允许用户使用基于向量的存储和检索来查询信息。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;正在运行的 Couchbase 实例。以下选项可用：Couchbase * [&#xA;  &lt;a href=&#34;https://hub.docker.com/_/couchbase/&#34;&gt;Docker&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://hub.docker.com/_/couchbase/&#34;&gt;https://hub.docker.com/_/couchbase/&lt;/a&gt;)&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;[&#xA;  &lt;a href=&#34;https://cloud.couchbase.com/&#34;&gt;Capella - Couchbase 即服务&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://cloud.couchbase.com/&#34;&gt;https://cloud.couchbase.com/&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;li&gt;[&#xA;  &lt;a href=&#34;https://www.couchbase.com/downloads/?family=couchbase-server&#34;&gt;本地安装 Couchbase&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.couchbase.com/downloads/?family=couchbase-server&#34;&gt;https://www.couchbase.com/downloads/?family=couchbase-server&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;li&gt;[&#xA;  &lt;a href=&#34;https://www.couchbase.com/downloads/?family=open-source-kubernetes&#34;&gt;Couchbase Kubernetes 操作员&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.couchbase.com/downloads/?family=open-source-kubernetes&#34;&gt;https://www.couchbase.com/downloads/?family=open-source-kubernetes&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Couchbase 矢量存储提供了 Spring Boot 自动配置功能。要启用此功能，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-vector-store-couchbase&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者到你的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-couchbase-store-spring-boot-starter&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;向量存储实现可以使用默认选项为您初始化配置的存储桶、范围、集合和搜索索引，但您必须通过在适当的构造函数中指定 &lt;code&gt;initializeSchema&lt;/code&gt; 布尔值来选择加入。&lt;/p&gt;&#xA;&lt;p&gt;请查看向量存储的[&#xA;  &lt;a href=&#34;./#couchbasevector-properties&#34;&gt;配置参数&lt;/a&gt;](#couchbasevector-properties)列表，以了解默认值和配置选项。&lt;/p&gt;&#xA;&lt;p&gt;此外，您还需要一个已配置的 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; bean。有关更多信息，请参阅 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; 部分。&lt;/p&gt;&#xA;&lt;p&gt;现在，您可以将 &lt;code&gt;CouchbaseSearchVectorStore&lt;/code&gt; 自动连接为应用程序中的矢量存储。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Autowired&lt;/span&gt; VectorStore vectorStore;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;List &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Document&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; documents &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; List.&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Document(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Spring AI rocks!! Spring AI rocks!! Spring AI rocks!! Spring AI rocks!! Spring AI rocks!!&amp;#34;&lt;/span&gt;, Map.&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;meta1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;meta1&amp;#34;&lt;/span&gt;)),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Document(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The World is Big and Salvation Lurks Around the Corner&amp;#34;&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Document(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You walk forward facing the past and you turn back toward the future.&amp;#34;&lt;/span&gt;, Map.&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;meta2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;meta2&amp;#34;&lt;/span&gt;)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Add the documents to Qdrant&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vectorStore.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(documents);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve documents similar to a query&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Document&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vectorStore.&lt;span style=&#34;color:#a6e22e&#34;&gt;similaritySearch&lt;/span&gt;(SearchRequest.&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Spring&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;withTopK&lt;/span&gt;(5));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;配置属性&#34;&gt;&#xA;  配置属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%85%8d%e7%bd%ae%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;要连接到 Couchbase 并使用 &lt;code&gt;CouchbaseSearchVectorStore&lt;/code&gt; ，您需要提供实例的访问详细信息。您可以通过 Spring Boot 的 &lt;code&gt;application.properties&lt;/code&gt; 提供配置：&lt;/p&gt;</description>
    </item>
    <item>
      <title>DeepSeek 聊天</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/deepseek-%E8%81%8A%E5%A4%A9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/deepseek-%E8%81%8A%E5%A4%A9/</guid>
      <description>&lt;h1 id=&#34;deepseek-聊天&#34;&gt;&#xA;  DeepSeek 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#deepseek-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 DeepSeek 的各种 AI 语言模型。您可以与 DeepSeek 语言模型进行交互，并基于 DeepSeek 模型创建多语言对话助手。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 DeepSeek 创建 API 密钥才能访问 DeepSeek 语言模型。&lt;/p&gt;&#xA;&lt;p&gt;在 [&#xA;  &lt;a href=&#34;https://platform.deepseek.com/sign_up&#34;&gt;DeepSeek 注册页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://platform.deepseek.com/sign_up&#34;&gt;https://platform.deepseek.com/sign_up&lt;/a&gt;)创建一个帐户，并在 [&#xA;  &lt;a href=&#34;https://platform.deepseek.com/api_keys&#34;&gt;API Keys 页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://platform.deepseek.com/api_keys&#34;&gt;https://platform.deepseek.com/api_keys&lt;/a&gt;)生成一个令牌。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.deepseek.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 &lt;code&gt;API Key&lt;/code&gt;s 页面获取的 &lt;code&gt;API Key&lt;/code&gt; 的值。&lt;/p&gt;&#xA;&lt;p&gt;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.deepseek.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-deepseek-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 (SpEL) 引用自定义环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;deepseek&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${DEEPSEEK_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export DEEPSEEK_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-deepseek-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Oracle 云基础设施 (OCI) GenAI 嵌入</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/oracle-%E4%BA%91%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD-oci-genai-%E5%B5%8C%E5%85%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/oracle-%E4%BA%91%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD-oci-genai-%E5%B5%8C%E5%85%A5/</guid>
      <description>&lt;h1 id=&#34;oracle-云基础设施-oci-genai-嵌入&#34;&gt;&#xA;  Oracle 云基础设施 (OCI) GenAI 嵌入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#oracle-%e4%ba%91%e5%9f%ba%e7%a1%80%e8%ae%be%e6%96%bd-oci-genai-%e5%b5%8c%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://www.oracle.com/artificial-intelligence/generative-ai/generative-ai-service/&#34;&gt;OCI GenAI 服务&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.oracle.com/artificial-intelligence/generative-ai/generative-ai-service/&#34;&gt;https://www.oracle.com/artificial-intelligence/generative-ai/generative-ai-service/&lt;/a&gt;)提供按需模型或专用 AI 集群的文本嵌入。&lt;/p&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://docs.oracle.com/en-us/iaas/Content/generative-ai/embed-models.htm&#34;&gt;OCI 嵌入模型页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.oracle.com/en-us/iaas/Content/generative-ai/embed-models.htm&#34;&gt;https://docs.oracle.com/en-us/iaas/Content/generative-ai/embed-models.htm&lt;/a&gt;)和 [&#xA;  &lt;a href=&#34;https://docs.oracle.com/en-us/iaas/Content/generative-ai/use-playground-embed.htm&#34;&gt;OCI 文本嵌入页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.oracle.com/en-us/iaas/Content/generative-ai/use-playground-embed.htm&#34;&gt;https://docs.oracle.com/en-us/iaas/Content/generative-ai/use-playground-embed.htm&lt;/a&gt;)提供了有关在 OCI 上使用和托管嵌入模型的详细信息。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 的构件已发布在 Maven Central 和 Spring Snapshot 仓库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;“构件仓库”&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些仓库添加到您的构建系统中。&lt;/p&gt;&#xA;&lt;p&gt;为了帮助管理依赖项，Spring AI 提供了 BOM（物料清单），以确保在整个项目中使用一致版本的 Spring AI。请参阅[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)部分，将 Spring AI BOM 添加到您的构建系统中。&lt;/p&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 OCI GenAI 嵌入客户端提供了 Spring Boot 自动配置功能。要启用此功能，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-model-oci-genai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者到你的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-model-oci-genai&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;嵌入属性&#34;&gt;&#xA;  嵌入属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b5%8c%e5%85%a5%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;前缀 &lt;code&gt;spring.ai.oci.genai&lt;/code&gt; 是配置与 OCI GenAI 的连接的属性前缀。&lt;/p&gt;</description>
    </item>
    <item>
      <title>千帆影像</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%9E%8B-api/%E5%8D%83%E5%B8%86%E5%BD%B1%E5%83%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%9E%8B-api/%E5%8D%83%E5%B8%86%E5%BD%B1%E5%83%8F/</guid>
      <description>&lt;h1 id=&#34;千帆影像&#34;&gt;&#xA;  千帆影像&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8d%83%e5%b8%86%e5%bd%b1%e5%83%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;此功能已移至 Spring AI 社区存储库。&lt;/p&gt;&#xA;&lt;p&gt;请访问 [&#xA;  &lt;a href=&#34;https://github.com/spring-ai-community/qianfan&#34;&gt;github.com/spring-ai-community/qianfan&lt;/a&gt;](https://&#xA;  &lt;a href=&#34;https://github.com/spring-ai-community/qianfan&#34;&gt;github.com/spring-ai-community/qianfan&lt;/a&gt;) 获取最新版本。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker 模型运行者聊天</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/docker-%E6%A8%A1%E5%9E%8B%E8%BF%90%E8%A1%8C%E8%80%85%E8%81%8A%E5%A4%A9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/docker-%E6%A8%A1%E5%9E%8B%E8%BF%90%E8%A1%8C%E8%80%85%E8%81%8A%E5%A4%A9/</guid>
      <description>&lt;h1 id=&#34;docker-模型运行者聊天&#34;&gt;&#xA;  Docker 模型运行者聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#docker-%e6%a8%a1%e5%9e%8b%e8%bf%90%e8%a1%8c%e8%80%85%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://docs.docker.com/desktop/features/model-runner/&#34;&gt;Docker Model Runner&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.docker.com/desktop/features/model-runner/&#34;&gt;https://docs.docker.com/desktop/features/model-runner/&lt;/a&gt;) 是一个 AI 推理引擎，提供来自[&#xA;  &lt;a href=&#34;https://hub.docker.com/u/ai&#34;&gt;不同提供商&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://hub.docker.com/u/ai&#34;&gt;https://hub.docker.com/u/ai&lt;/a&gt;)的多种模型。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI 通过重用现有的 [&#xA;  &lt;a href=&#34;openai-chat.html&#34;&gt;OpenAI&lt;/a&gt;](openai-chat.html) 支持的 &lt;code&gt;ChatClient&lt;/code&gt; 与 Docker Model Runner 集成。为此，请将基本 URL 设置为 &lt;code&gt;[[localhost:12434/engines](http://localhost:12434/engines)](http://[localhost:12434/engines](http://localhost:12434/engines))&lt;/code&gt; ，并选择提供的 [&#xA;  &lt;a href=&#34;https://hub.docker.com/u/ai&#34;&gt;LLM 模型&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://hub.docker.com/u/ai&#34;&gt;https://hub.docker.com/u/ai&lt;/a&gt;)之一。&lt;/p&gt;&#xA;&lt;p&gt;查看 [&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/DockerModelRunnerWithOpenAiChatModelIT.java&#34;&gt;DockerModelRunnerWithOpenAiChatModelIT.java&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/[DockerModelRunnerWithOpenAiChatModelIT.java]%28https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/DockerModelRunnerWithOpenAiChatModelIT.java%29&#34;&gt;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/[DockerModelRunnerWithOpenAiChatModelIT.java](https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/DockerModelRunnerWithOpenAiChatModelIT.java)&lt;/a&gt;) 测试，了解如何将 Docker Model Runner 与 Spring AI 结合使用的示例。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;下载适用于 Mac 4.40.0 的 Docker Desktop。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;选择以下选项之一来启用模型运行器：&lt;/p&gt;&#xA;&lt;p&gt;选项 1：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;启用模型运行器 docker desktop enable model-runner &amp;ndash;tcp 12434 。&lt;/li&gt;&#xA;&lt;li&gt;将 base-url 设置为 localhost:12434/engines&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;选项 2：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;启用模型运行器 docker desktop enable model-runner 。&lt;/li&gt;&#xA;&lt;li&gt;使用 Testcontainers 并设置 base-url 如下：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Container&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; SocatContainer socat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SocatContainer().&lt;span style=&#34;color:#a6e22e&#34;&gt;withTarget&lt;/span&gt;(80, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;model-runner.docker.internal&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; OpenAiApi &lt;span style=&#34;color:#a6e22e&#34;&gt;chatCompletionApi&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; baseUrl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://%s:%d/engines&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;formatted&lt;/span&gt;(socat.&lt;span style=&#34;color:#a6e22e&#34;&gt;getHost&lt;/span&gt;(), socat.&lt;span style=&#34;color:#a6e22e&#34;&gt;getMappedPort&lt;/span&gt;(80));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; OpenAiApi.&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;baseUrl&lt;/span&gt;(baseUrl).&lt;span style=&#34;color:#a6e22e&#34;&gt;apiKey&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您可以通过阅读[&#xA;  &lt;a href=&#34;https://www.docker.com/blog/run-llms-locally/&#34;&gt;使用 Docker 博客文章在本地运行 LLM&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.docker.com/blog/run-llms-locally/&#34;&gt;https://www.docker.com/blog/run-llms-locally/&lt;/a&gt;) 来了解有关 Docker Model Runner 的更多信息。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Elasticsearch</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/elasticsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/elasticsearch/</guid>
      <description>&lt;h1 id=&#34;elasticsearch&#34;&gt;&#xA;  Elasticsearch&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#elasticsearch&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将引导您设置 Elasticsearch &lt;code&gt;VectorStore&lt;/code&gt; 来存储文档嵌入并执行相似性搜索。&lt;/p&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://www.elastic.co/elasticsearch&#34;&gt;Elasticsearch&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.elastic.co/elasticsearch&#34;&gt;https://www.elastic.co/elasticsearch&lt;/a&gt;) 是一个基于 Apache Lucene 库的开源搜索和分析引擎。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;正在运行的 Elasticsearch 实例。以下选项可用：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;自管理 Elasticsearch&lt;/li&gt;&#xA;&lt;li&gt;弹性云&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Elasticsearch 矢量存储提供了 Spring Boot 自动配置功能。要启用此功能，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 或 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件中：&lt;/p&gt;&#xA;&lt;p&gt;向量存储实现可以为您初始化必要的模式，但您必须通过在相应的构造函数中指定 &lt;code&gt;initializeSchema&lt;/code&gt; 布尔值或在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置 &lt;code&gt;…​initialize-schema=true&lt;/code&gt; 来选择启用。或者，您可以选择退出初始化，并使用 Elasticsearch 客户端手动创建索引，如果索引需要高级映射或其他配置，这种方法会很有用。&lt;/p&gt;&#xA;&lt;p&gt;请查看向量存储的[&#xA;  &lt;a href=&#34;./#elasticsearchvector-properties&#34;&gt;配置参数&lt;/a&gt;](#elasticsearchvector-properties)列表，了解默认值和配置选项。您也可以通过配置 &lt;code&gt;ElasticsearchVectorStoreOptions&lt;/code&gt; bean 来设置这些属性。&lt;/p&gt;&#xA;&lt;p&gt;此外，您还需要一个已配置的 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; bean。有关更多信息，请参阅 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; 部分。&lt;/p&gt;&#xA;&lt;p&gt;现在，您可以将 &lt;code&gt;ElasticsearchVectorStore&lt;/code&gt; 自动连接为应用程序中的向量存储。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Autowired&lt;/span&gt; VectorStore vectorStore;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;List &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Document&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; documents &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; List.&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Document(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Spring AI rocks!! Spring AI rocks!! Spring AI rocks!! Spring AI rocks!! Spring AI rocks!!&amp;#34;&lt;/span&gt;, Map.&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;meta1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;meta1&amp;#34;&lt;/span&gt;)),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Document(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The World is Big and Salvation Lurks Around the Corner&amp;#34;&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Document(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You walk forward facing the past and you turn back toward the future.&amp;#34;&lt;/span&gt;, Map.&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;meta2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;meta2&amp;#34;&lt;/span&gt;)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Add the documents to Elasticsearch&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vectorStore.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(documents);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve documents similar to a query&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Document&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;vectorStore&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;similaritySearch&lt;/span&gt;(SearchRequest.&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Spring&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;topK&lt;/span&gt;(5).&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;配置属性&#34;&gt;&#xA;  配置属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%85%8d%e7%bd%ae%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;要连接到 Elasticsearch 并使用 &lt;code&gt;ElasticsearchVectorStore&lt;/code&gt; ，您需要提供实例的访问详细信息。您可以通过 Spring Boot 的 &lt;code&gt;application.yml&lt;/code&gt; 提供简单的配置，&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ollama 嵌入</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/ollama-%E5%B5%8C%E5%85%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/ollama-%E5%B5%8C%E5%85%A5/</guid>
      <description>&lt;h1 id=&#34;ollama-嵌入&#34;&gt;&#xA;  Ollama 嵌入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ollama-%e5%b5%8c%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;使用 [&#xA;  &lt;a href=&#34;https://ollama.ai/&#34;&gt;Ollama&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://ollama.ai/&#34;&gt;https://ollama.ai/&lt;/a&gt;) ，您可以在本地运行各种 [&#xA;  &lt;a href=&#34;https://ollama.com/search?c=embedding&#34;&gt;AI 模型&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://ollama.com/search?c=embedding&#34;&gt;https://ollama.com/search?c=embedding&lt;/a&gt;) ，并从中生成嵌入。嵌入是一个浮点数向量（列表）。两个向量之间的距离衡量它们的关联性。距离越小，关联性越高；距离越大，关联性越低。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;OllamaEmbeddingModel&lt;/code&gt; 实现利用了 Ollama [&#xA;  &lt;a href=&#34;https://github.com/ollama/ollama/blob/main/docs/api.md#generate-embeddings&#34;&gt;Embeddings API&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://github.com/ollama/ollama/blob/main/docs/api.md#generate-embeddings&#34;&gt;https://github.com/ollama/ollama/blob/main/docs/api.md#generate-embeddings&lt;/a&gt;) 端点。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;首先，您需要访问 Ollama 实例。有以下几种选择：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在本地机器上下载并安装 Ollama 。&lt;/li&gt;&#xA;&lt;li&gt;通过 Testcontainers 配置并运行 Ollama 。&lt;/li&gt;&#xA;&lt;li&gt;通过 Kubernetes 服务绑定绑定到 Ollama 实例。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;您可以从 [&#xA;  &lt;a href=&#34;https://ollama.com/search?c=embedding&#34;&gt;Ollama 模型库中&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://ollama.com/search?c=embedding&#34;&gt;https://ollama.com/search?c=embedding&lt;/a&gt;)提取您想要在应用程序中使用的模型：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-shellscript&#34; data-lang=&#34;shellscript&#34;&gt;ollama pull &amp;lt;model-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;您还可以从数千个免费的 [&#xA;  &lt;a href=&#34;https://huggingface.co/models?library=gguf&amp;amp;sort=trending&#34;&gt;GGUF Hugging Face Models&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://huggingface.co/models?library=gguf&amp;amp;sort=trending&#34;&gt;https://huggingface.co/models?library=gguf&amp;sort=trending&lt;/a&gt;) 中挑选任意一个：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-shellscript&#34; data-lang=&#34;shellscript&#34;&gt;ollama pull hf.co/&amp;lt;username&amp;gt;/&amp;lt;model-repository&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者，您可以启用自动下载任何所需模型的选项： [&#xA;  &lt;a href=&#34;./#auto-pulling-models&#34;&gt;自动拉取模型&lt;/a&gt;](#auto-pulling-models) 。&lt;/p&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Azure Ollama 嵌入模型提供 Spring Boot 自动配置。要启用它，请将以下依赖项添加到 Maven &lt;code&gt;pom.xml&lt;/code&gt; 或 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件中：&lt;/p&gt;</description>
    </item>
    <item>
      <title>聊天记忆</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BF%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BF%86/</guid>
      <description>&lt;h1 id=&#34;聊天记忆&#34;&gt;&#xA;  聊天记忆&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%81%8a%e5%a4%a9%e8%ae%b0%e5%bf%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;大型语言模型 (LLM) 是无状态的，这意味着它们不会保留先前交互的信息。当您希望在多个交互之间维护上下文或状态时，这可能会造成限制。为了解决这个问题，Spring AI 提供了聊天记忆功能，允许您使用 LLM 跨多个交互存储和检索信息。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;ChatMemory&lt;/code&gt; 抽象允许您实现各种类型的内存以支持不同的用例。消息的底层存储由 &lt;code&gt;ChatMemory&lt;/code&gt;Repository 处理，其唯一职责是存储和检索消息。由 &lt;code&gt;ChatMemory&lt;/code&gt; 实现决定保留哪些消息以及何时删除它们。策略示例包括保留最后 N 条消息、将消息保留一段时间或将消息保留到一定的令牌限制。&lt;/p&gt;&#xA;&lt;p&gt;在选择记忆类型之前，必须了解聊天记忆和聊天历史之间的区别。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;聊天记忆 。大型语言模型保留并用于在整个对话过程中保持语境感知的信息。&lt;/li&gt;&#xA;&lt;li&gt;聊天记录 。整个对话历史记录，包括用户和模型之间交换的所有消息。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;ChatMemory&lt;/code&gt; 抽象旨在管理聊天内存 。它允许您存储和检索与当前对话上下文相关的消息。但是，它并非存储聊天历史记录的最佳选择。如果您需要维护所有交换消息的完整记录，则应考虑使用其他方法，例如依赖 Spring Data 来高效地存储和检索完整的聊天历史记录。&lt;/p&gt;&#xA;&lt;h2 id=&#34;快速入门&#34;&gt;&#xA;  快速入门&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bf%ab%e9%80%9f%e5%85%a5%e9%97%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 会自动配置一个 &lt;code&gt;ChatMemory&lt;/code&gt; bean，您可以在应用程序中直接使用它。默认情况下，它使用内存存储库 ( InMemory&lt;code&gt;ChatMemory&lt;/code&gt;Repository ) 来存储消息，并使用 MessageWindow&lt;code&gt;ChatMemory&lt;/code&gt; 实现来管理对话历史记录。如果已配置其他存储库（例如 Cassandra、JDBC 或 Neo4j），Spring AI 将改用该存储库。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Autowired&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ChatMemory chatMemory;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下部分将进一步描述 Spring AI 中可用的不同内存类型和存储库。&lt;/p&gt;&#xA;&lt;h2 id=&#34;内存类型&#34;&gt;&#xA;  内存类型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%86%85%e5%ad%98%e7%b1%bb%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;ChatMemory&lt;/code&gt; 抽象允许您实现各种类型的内存，以适应不同的用例。内存类型的选择会显著影响应用程序的性能和行为。本节介绍 Spring AI 提供的内置内存类型及其特性。&lt;/p&gt;&#xA;&lt;h2 id=&#34;消息窗口聊天记忆&#34;&gt;&#xA;  消息窗口聊天记忆&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b6%88%e6%81%af%e7%aa%97%e5%8f%a3%e8%81%8a%e5%a4%a9%e8%ae%b0%e5%bf%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;MessageWindowChatMemory&lt;/code&gt; 会维护一个消息窗口，其大小不超过指定的最大限制。当消息数量超过上限时，较旧的消息会被删除，但系统消息会被保留。默认窗口大小为 20 条消息。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GemFire 矢量商店</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/gemfire-%E7%9F%A2%E9%87%8F%E5%95%86%E5%BA%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/gemfire-%E7%9F%A2%E9%87%8F%E5%95%86%E5%BA%97/</guid>
      <description>&lt;h1 id=&#34;gemfire-矢量商店&#34;&gt;&#xA;  GemFire 矢量商店&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#gemfire-%e7%9f%a2%e9%87%8f%e5%95%86%e5%ba%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将引导您设置 &lt;code&gt;GemFireVectorStore&lt;/code&gt; 来存储文档嵌入并执行相似性搜索。&lt;/p&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://tanzu.vmware.com/gemfire&#34;&gt;GemFire&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://tanzu.vmware.com/gemfire&#34;&gt;https://tanzu.vmware.com/gemfire&lt;/a&gt;) 是一个分布式内存键值存储系统，能够以极快的速度执行读写操作。它提供高可用性的并行消息队列、持续可用性以及事件驱动的架构，让您能够动态扩展而无需停机。随着您的数据规模需求不断增长以支持高性能实时应用，[&#xA;  &lt;a href=&#34;https://tanzu.vmware.com/gemfire&#34;&gt;GemFire&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://tanzu.vmware.com/gemfire&#34;&gt;https://tanzu.vmware.com/gemfire&lt;/a&gt;) 可以轻松实现线性扩展。&lt;/p&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://docs.vmware.com/en/VMware-GemFire-VectorDB/1.0/gemfire-vectordb/overview.html&#34;&gt;GemFire VectorDB&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.vmware.com/en/VMware-GemFire-VectorDB/1.0/gemfire-vectordb/overview.html&#34;&gt;https://docs.vmware.com/en/VMware-GemFire-VectorDB/1.0/gemfire-vectordb/overview.html&lt;/a&gt;) 扩展了 GemFire 的功能，作为一个多功能矢量数据库，可以高效地存储、检索和执行矢量相似性搜索。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;将 GemFire VectorStore Spring Boot 启动器添加到项目的 Maven 构建文件 &lt;code&gt;pom.xml&lt;/code&gt; ：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-vector-store-gemfire&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者到你的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 文件&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &amp;#39;org.springframework.ai:spring-ai-starter-vector-store-gemfire&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;配置属性&#34;&gt;&#xA;  配置属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%85%8d%e7%bd%ae%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您可以在 Spring Boot 配置中使用以下属性来进一步配置 &lt;code&gt;GemFireVectorStore&lt;/code&gt; 。&lt;/p&gt;&#xA;&lt;h2 id=&#34;手动配置&#34;&gt;&#xA;  手动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%89%8b%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;如果只使用 &lt;code&gt;GemFireVectorStore&lt;/code&gt; 而不使用 Spring Boot 的自动配置，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-gemfire-store&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于 Gradle 用户，请将以下内容添加到 &lt;code&gt;build.gradle&lt;/code&gt; 文件的依赖项块下，以便仅使用 &lt;code&gt;GemFireVectorStore&lt;/code&gt; ：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Transformers（ONNX）嵌入</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/transformersonnx%E5%B5%8C%E5%85%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/transformersonnx%E5%B5%8C%E5%85%A5/</guid>
      <description>&lt;h1 id=&#34;transformersonnx嵌入&#34;&gt;&#xA;  Transformers（ONNX）嵌入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#transformersonnx%e5%b5%8c%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;`Transformers&lt;code&gt;EmbeddingModel``` 是 &lt;/code&gt;EmbeddingModel`` 实现，它使用选定的[&#xA;  &lt;a href=&#34;https://www.sbert.net/&#34;&gt;句子转换器&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.sbert.net/&#34;&gt;https://www.sbert.net/&lt;/a&gt;)在本地计算[&#xA;  &lt;a href=&#34;https://www.sbert.net/examples/applications/computing-embeddings/README.html#sentence-embeddings-with-transformers&#34;&gt;句子嵌入&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.sbert.net/examples/applications/computing-embeddings/README.html#sentence-embeddings-with-transformers&#34;&gt;https://www.sbert.net/examples/applications/computing-embeddings/README.html#sentence-embeddings-with-transformers&lt;/a&gt;) 。&lt;/p&gt;&#xA;&lt;p&gt;您可以使用任何 [&#xA;  &lt;a href=&#34;https://huggingface.co/spaces/mteb/leaderboard&#34;&gt;HuggingFace 嵌入模型&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://huggingface.co/spaces/mteb/leaderboard&#34;&gt;https://huggingface.co/spaces/mteb/leaderboard&lt;/a&gt;) 。&lt;/p&gt;&#xA;&lt;p&gt;它使用[&#xA;  &lt;a href=&#34;https://www.sbert.net/docs/pretrained_models.html&#34;&gt;预先训练的&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.sbert.net/docs/pretrained_models.html&#34;&gt;https://www.sbert.net/docs/pretrained_models.html&lt;/a&gt;)变压器模型，序列化为[&#xA;  &lt;a href=&#34;https://onnx.ai/&#34;&gt;开放神经网络交换 (ONNX)&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://onnx.ai/&#34;&gt;https://onnx.ai/&lt;/a&gt;) 格式。&lt;/p&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://djl.ai/&#34;&gt;Deep Java 库&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://djl.ai/&#34;&gt;https://djl.ai/&lt;/a&gt;)和 Microsoft [&#xA;  &lt;a href=&#34;https://onnxruntime.ai/docs/get-started/with-java.html&#34;&gt;ONNX Java 运行时&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://onnxruntime.ai/docs/get-started/with-java.html&#34;&gt;https://onnxruntime.ai/docs/get-started/with-java.html&lt;/a&gt;)库用于运行 ONNX 模型并计算 Java 中的嵌入。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;为了在 Java 中运行，我们需要将 Tokenizer 和 Transformer 模型序列化为 &lt;code&gt;ONNX&lt;/code&gt; 格式。&lt;/p&gt;&#xA;&lt;p&gt;使用 [&#xA;  &lt;a href=&#34;https://huggingface.co/docs/optimum/exporters/onnx/usage_guides/export_a_model#exporting-a-model-to-onnx-using-the-cli&#34;&gt;optimal-cli&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://huggingface.co/docs/optimum/exporters/onnx/usage_guides/export_a_model#exporting-a-model-to-onnx-using-the-cli&#34;&gt;https://huggingface.co/docs/optimum/exporters/onnx/usage_guides/export_a_model#exporting-a-model-to-onnx-using-the-cli&lt;/a&gt;) 进行序列化 - 一种快速实现此目的的方法是使用 [&#xA;  &lt;a href=&#34;https://huggingface.co/docs/optimum/exporters/onnx/usage_guides/export_a_model#exporting-a-model-to-onnx-using-the-cli&#34;&gt;optimal-cli&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://huggingface.co/docs/optimum/exporters/onnx/usage_guides/export_a_model#exporting-a-model-to-onnx-using-the-cli&#34;&gt;https://huggingface.co/docs/optimum/exporters/onnx/usage_guides/export_a_model#exporting-a-model-to-onnx-using-the-cli&lt;/a&gt;) 命令行工具。以下代码片段准备了一个 Python 虚拟环境，安装了所需的软件包，并使用 &lt;code&gt;optimum-cli&lt;/code&gt; 序列化（例如导出）指定的模型：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 -m venv venv&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source ./venv/bin/activate&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;venv&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; pip install --upgrade pip&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;venv&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; pip install optimum onnx onnxruntime sentence-transformers&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;venv&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; optimum-cli export onnx --model sentence-transformers/all-MiniLM-L6-v2 onnx-output-folder&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该代码片段将 [&#xA;  &lt;a href=&#34;https://huggingface.co/sentence-transformers/all-MiniLM-L6-v2&#34;&gt;sentence-transformers/all-MiniLM-L6-v2&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://huggingface.co/[sentence-transformers/all-MiniLM-L6-v2]%28https://huggingface.co/sentence-transformers/all-MiniLM-L6-v2%29&#34;&gt;https://huggingface.co/[sentence-transformers/all-MiniLM-L6-v2](https://huggingface.co/sentence-transformers/all-MiniLM-L6-v2)&lt;/a&gt;) 转换器导出到 &lt;code&gt;onnx-output-folder&lt;/code&gt; 文件夹。后者包含嵌入模型使用的 &lt;code&gt;tokenizer.json&lt;/code&gt; 和 &lt;code&gt;model.onnx&lt;/code&gt; 文件。&lt;/p&gt;</description>
    </item>
    <item>
      <title>工具调用</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E5%B7%A5%E5%85%B7%E8%B0%83%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E5%B7%A5%E5%85%B7%E8%B0%83%E7%94%A8/</guid>
      <description>&lt;h1 id=&#34;工具调用&#34;&gt;&#xA;  工具调用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b7%a5%e5%85%b7%e8%b0%83%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;工具调用 （也称为函数调用 ）是 AI 应用程序中的一种常见模式，允许模型与一组 API 或工具进行交互，从而增强其功能。&lt;/p&gt;&#xA;&lt;p&gt;工具主要用于：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;信息检索 。此类工具可用于从外部来源（例如数据库、Web 服务、文件系统或 Web 搜索引擎）检索信息。其目标是增强模型的知识，使其能够回答原本无法回答的问题。因此，它们可用于检索增强生成 (RAG) 场景。例如，可以使用工具检索给定位置的当前天气、检索最新新闻文章或查询数据库中的特定记录。&lt;/li&gt;&#xA;&lt;li&gt;采取行动 。此类别中的工具可用于在软件系统中采取行动，例如发送电子邮件、在数据库中创建新记录、提交表单或触发工作流。其目标是自动化原本需要人工干预或明确编程的任务。例如，可以使用工具为与聊天机器人交互的客户预订航班、在网页上填写表单，或在代码生成场景中基于自动化测试 (TDD) 实现 Java 类。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;尽管我们通常将工具调用称为模型功能，但实际上工具调用逻辑是由客户端应用程序提供的。模型只能请求工具调用并提供输入参数，而应用程序负责根据输入参数执行工具调用并返回结果。模型永远无法访问任何作为工具提供的 API，这是一个至关重要的安全考虑因素。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI 提供了便捷的 API 来定义工具、解析来自模型的工具调用请求以及执行工具调用。以下部分概述了 Spring AI 中的工具调用功能。&lt;/p&gt;&#xA;&lt;h2 id=&#34;快速入门&#34;&gt;&#xA;  快速入门&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bf%ab%e9%80%9f%e5%85%a5%e9%97%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;让我们看看如何在 Spring AI 中开始使用工具调用。我们将实现两个简单的工具：一个用于信息检索，一个用于执行操作。信息检索工具将用于获取用户时区的当前日期和时间。操作工具将用于设置指定时间的闹钟。&lt;/p&gt;&#xA;&lt;h2 id=&#34;信息检索&#34;&gt;&#xA;  信息检索&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bf%a1%e6%81%af%e6%a3%80%e7%b4%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;AI 模型无法访问实时信息。任何假设模型能够感知当前日期或天气预报等信息的问题都无法由模型回答。不过，我们可以提供一个工具来检索这些信息，并让模型在需要访问实时信息时调用此工具。&lt;/p&gt;&#xA;&lt;p&gt;让我们在 &lt;code&gt;DateTimeTools&lt;/code&gt; 类中实现一个工具，用于获取用户时区的当前日期和时间。该工具不接受任何参数。Spring 框架中的 &lt;code&gt;LocaleContextHolder&lt;/code&gt; 可以提供用户的时区信息。该工具将被定义为一个带有 &lt;code&gt;@Tool&lt;/code&gt; 注解的方法。为了帮助模型理解是否以及何时调用此工具，我们将提供该工具功能的详细描述。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.time.LocalDateTime;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.ai.tool.annotation.Tool;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.context.i18n.LocaleContextHolder;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DateTimeTools&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Tool&lt;/span&gt;(description &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Get the current date and time in the user&amp;#39;s timezone&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    String &lt;span style=&#34;color:#a6e22e&#34;&gt;getCurrentDateTime&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; LocalDateTime.&lt;span style=&#34;color:#a6e22e&#34;&gt;now&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;atZone&lt;/span&gt;(LocaleContextHolder.&lt;span style=&#34;color:#a6e22e&#34;&gt;getTimeZone&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;toZoneId&lt;/span&gt;()).&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，让我们将该工具提供给模型。在本例中，我们将使用 &lt;code&gt;ChatClient&lt;/code&gt; 与模型交互。我们将通过 &lt;code&gt;tools()&lt;/code&gt; 方法传递一个 &lt;code&gt;DateTimeTools&lt;/code&gt; 实例，将该工具提供给模型。当模型需要获取当前日期和时间时，它会请求调用该工具。在内部， &lt;code&gt;ChatClient&lt;/code&gt; 将调用该工具并将结果返回给模型，然后模型将使用工具调用结果生成对原始问题的最终响应。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Groq 聊天</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/groq-%E8%81%8A%E5%A4%A9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/groq-%E8%81%8A%E5%A4%A9/</guid>
      <description>&lt;h1 id=&#34;groq-聊天&#34;&gt;&#xA;  Groq 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#groq-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://groq.com/&#34;&gt;Groq&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://groq.com/&#34;&gt;https://groq.com/&lt;/a&gt;) 是一种基于 LPU™ 的超快 AI 推理引擎，支持各种 [&#xA;  &lt;a href=&#34;https://console.groq.com/docs/models&#34;&gt;AI 模型&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://console.groq.com/docs/models&#34;&gt;https://console.groq.com/docs/models&lt;/a&gt;) ，支持 &lt;code&gt;Tool/Function Calling&lt;/code&gt; 并公开与 &lt;code&gt;OpenAI API&lt;/code&gt; 兼容的端点。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI 通过重用现有的 [&#xA;  &lt;a href=&#34;openai-chat.html&#34;&gt;OpenAI&lt;/a&gt;](openai-chat.html) 客户端与 [&#xA;  &lt;a href=&#34;https://groq.com/&#34;&gt;Groq&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://groq.com/&#34;&gt;https://groq.com/&lt;/a&gt;) 集成。为此，您需要获取 [&#xA;  &lt;a href=&#34;https://groq.com/&#34;&gt;Groq&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://groq.com/&#34;&gt;https://groq.com/&lt;/a&gt;) Api Key ，将 base-url 设置为 [&#xA;  &lt;a href=&#34;https://api.groq.com/openai&#34;&gt;api.groq.com/openai&lt;/a&gt;](https://&#xA;  &lt;a href=&#34;https://api.groq.com/openai&#34;&gt;api.groq.com/openai&lt;/a&gt;) ，并选择提供的 [&#xA;  &lt;a href=&#34;https://groq.com/&#34;&gt;Groq&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://groq.com/&#34;&gt;https://groq.com/&lt;/a&gt;) 模型之一。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;./images/spring-ai-groq-integration.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;查看 [&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/GroqWithOpenAiChatModelIT.java&#34;&gt;GroqWithOpenAiChatModelIT.java&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/[GroqWithOpenAiChatModelIT.java]%28https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/GroqWithOpenAiChatModelIT.java%29&#34;&gt;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/[GroqWithOpenAiChatModelIT.java](https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/GroqWithOpenAiChatModelIT.java)&lt;/a&gt;) 测试，了解将 Groq 与 Spring AI 结合使用的示例。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;创建 API 密钥 ：访问此处创建 API 密钥。Spring AI 项目定义了一个名为 spring.ai.openai.api-key 的配置属性，您应该将其设置为从 groq.com 获取的 API Key 的值。&lt;/li&gt;&#xA;&lt;li&gt;设置 Groq URL ：您必须将 spring.ai.openai.base-url 属性设置为 api.groq.com/openai 。&lt;/li&gt;&#xA;&lt;li&gt;选择 Groq 模型 ：使用 spring.ai.openai.chat.model=&lt;model name&gt; 属性从可用的 Groq 模型中进行选择。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置这些配置属性：&lt;/p&gt;</description>
    </item>
    <item>
      <title>MariaDB 向量存储</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/mariadb-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/mariadb-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8/</guid>
      <description>&lt;h1 id=&#34;mariadb-向量存储&#34;&gt;&#xA;  MariaDB 向量存储&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mariadb-%e5%90%91%e9%87%8f%e5%ad%98%e5%82%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将引导您设置 &lt;code&gt;MariaDBVectorStore&lt;/code&gt; 来存储文档嵌入并执行相似性搜索。&lt;/p&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://mariadb.org/projects/mariadb-vector/&#34;&gt;MariaDB Vector&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://mariadb.org/projects/mariadb-vector/&#34;&gt;https://mariadb.org/projects/mariadb-vector/&lt;/a&gt;) 是 MariaDB 11.7 的一部分，支持存储和搜索机器学习生成的嵌入。它使用向量索引提供高效的向量相似性搜索功能，支持余弦相似度和欧氏距离度量。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一个正在运行的 MariaDB (11.7+) 实例。以下选项可用：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Docker 镜像&lt;/li&gt;&#xA;&lt;li&gt;MariaDB 服务器&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Docker 镜像&lt;/li&gt;&#xA;&lt;li&gt;MariaDB 服务器&lt;/li&gt;&#xA;&lt;li&gt;如果需要，可以使用 EmbeddingModel 的 API 密钥来生成 MariaDBVectorStore 存储的嵌入。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 MariaDB 矢量存储提供了 Spring Boot 自动配置功能。要启用此功能，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-vector-store-mariadb&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者到你的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-vector-store-mariadb&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;向量存储实现可以为您初始化所需的模式，但您必须通过在适当的构造函数中指定 &lt;code&gt;initializeSchema&lt;/code&gt; 布尔值或在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置 &lt;code&gt;…​initialize-schema=true&lt;/code&gt; 来选择加入。&lt;/p&gt;&#xA;&lt;p&gt;此外，您还需要一个已配置的 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; bean。有关更多信息，请参阅 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; 部分。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenAI 嵌入</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/openai-%E5%B5%8C%E5%85%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/openai-%E5%B5%8C%E5%85%A5/</guid>
      <description>&lt;h1 id=&#34;openai-嵌入&#34;&gt;&#xA;  OpenAI 嵌入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#openai-%e5%b5%8c%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 OpenAI 的文本嵌入模型。OpenAI 的文本嵌入用于衡量文本字符串的相关性。嵌入是一个浮点数向量（列表）。两个向量之间的距离衡量它们的相关性。距离越小，相关性越高；距离越大，相关性越低。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 OpenAI 创建一个 API 来访问 OpenAI 嵌入模型。&lt;/p&gt;&#xA;&lt;p&gt;在 [&#xA;  &lt;a href=&#34;https://platform.openai.com/signup&#34;&gt;OpenAI 注册页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://platform.openai.com/signup&#34;&gt;https://platform.openai.com/signup&lt;/a&gt;)创建一个帐户，并在 [&#xA;  &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;API 密钥页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;https://platform.openai.com/account/api-keys&lt;/a&gt;)上生成令牌。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.openai.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 openai.com 获取的 &lt;code&gt;API Key&lt;/code&gt; 的值。&lt;/p&gt;&#xA;&lt;p&gt;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.openai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-openai-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 (SpEL) 来引用环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;openai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${OPENAI_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export OPENAI_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-openai-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve API key from a secure source or environment variable&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String apiKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OPENAI_API_KEY&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 的构件已发布在 Maven Central 和 Spring Snapshot 仓库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;“构件仓库”&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些仓库添加到您的构建系统中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Milvus</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/milvus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/milvus/</guid>
      <description>&lt;h1 id=&#34;milvus&#34;&gt;&#xA;  Milvus&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#milvus&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://milvus.io/&#34;&gt;Milvus&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://milvus.io/&#34;&gt;https://milvus.io/&lt;/a&gt;) 是一个开源向量数据库，在数据科学和机器学习领域备受关注。其突出特点之一在于对向量索引和查询的强大支持。[&#xA;  &lt;a href=&#34;https://milvus.io/&#34;&gt;Milvus&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://milvus.io/&#34;&gt;https://milvus.io/&lt;/a&gt;) 采用先进的尖端算法来加速搜索过程，即使在处理海量数据集时，也能高效地检索相似的向量。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;正在运行的 Milvus 实例。有以下选项可供选择：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Milvus 单机版 ：Docker、Operator、Helm、DEB/RPM、Docker Compose。&lt;/li&gt;&#xA;&lt;li&gt;Milvus Cluster ：操作员、Helm。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Milvus 单机版 ：Docker、Operator、Helm、DEB/RPM、Docker Compose。&lt;/li&gt;&#xA;&lt;li&gt;Milvus Cluster ：操作员、Helm。&lt;/li&gt;&#xA;&lt;li&gt;如果需要， EmbeddingModel 的 API 密钥可以生成 MilvusVectorStore 存储的嵌入。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;依赖项&#34;&gt;&#xA;  依赖项&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%be%9d%e8%b5%96%e9%a1%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;然后将 Milvus VectorStore 启动启动器依赖项添加到您的项目中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-vector-store-milvus&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者到你的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-vector-store-milvus&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;向量存储实现可以为您初始化必要的模式，但您必须通过在适当的构造函数中指定 &lt;code&gt;initializeSchema&lt;/code&gt; 布尔值或在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置 &lt;code&gt;…​initialize-schema=true&lt;/code&gt; 来选择加入。&lt;/p&gt;&#xA;&lt;p&gt;Vector Store 还需要一个 &lt;code&gt;EmbeddingModel&lt;/code&gt; 实例来计算文档的嵌入。你可以从可用的 &lt;code&gt;EmbeddingModel&lt;/code&gt; 实现中选择一个。&lt;/p&gt;&#xA;&lt;p&gt;要连接并配置 &lt;code&gt;MilvusVectorStore&lt;/code&gt; ，您需要提供实例的访问详细信息。您可以通过 Spring Boot 的 &lt;code&gt;application.yml&lt;/code&gt; 提供简单的配置。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PostgresML 嵌入</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/postgresml-%E5%B5%8C%E5%85%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/postgresml-%E5%B5%8C%E5%85%A5/</guid>
      <description>&lt;h1 id=&#34;postgresml-嵌入&#34;&gt;&#xA;  PostgresML 嵌入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#postgresml-%e5%b5%8c%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 PostgresML 文本嵌入模型。&lt;/p&gt;&#xA;&lt;p&gt;嵌入是文本的数值表示形式。它们用于将单词和句子表示为向量（数字数组）。嵌入可以用来查找相似的文本片段，方法是使用距离度量比较数值向量的相似性；或者，由于大多数算法无法直接使用文本，因此嵌入可以用作其他机器学习模型的输入特征。&lt;/p&gt;&#xA;&lt;p&gt;许多预训练的 LLM 可用于在 PostgresML 中从文本生成嵌入。您可以浏览所有可用的[&#xA;  &lt;a href=&#34;https://huggingface.co/models?library=sentence-transformers&#34;&gt;模型&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://huggingface.co/models?library=sentence-transformers&#34;&gt;https://huggingface.co/models?library=sentence-transformers&lt;/a&gt;) ，在 Hugging Face 上找到最佳解决方案。&lt;/p&gt;&#xA;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 的构件已发布在 Maven Central 和 Spring Snapshot 仓库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;“构件仓库”&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些仓库添加到您的构建系统中。&lt;/p&gt;&#xA;&lt;p&gt;为了帮助管理依赖项，Spring AI 提供了 BOM（物料清单），以确保在整个项目中使用一致版本的 Spring AI。请参阅[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)部分，将 Spring AI BOM 添加到您的构建系统中。&lt;/p&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Azure PostgresML 嵌入模型提供 Spring Boot 自动配置。 Spring AI offers Spring Boot auto-configuration for the Azure PostgresML Embedding Model. 若要启用此功能，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件：To enable it, add the following dependency to your project&amp;rsquo;s Maven &lt;code&gt;pom.xml&lt;/code&gt; file:&lt;/p&gt;</description>
    </item>
    <item>
      <title>拥抱脸聊天</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/%E6%8B%A5%E6%8A%B1%E8%84%B8%E8%81%8A%E5%A4%A9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/%E6%8B%A5%E6%8A%B1%E8%84%B8%E8%81%8A%E5%A4%A9/</guid>
      <description>&lt;h1 id=&#34;拥抱脸聊天&#34;&gt;&#xA;  拥抱脸聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8b%a5%e6%8a%b1%e8%84%b8%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Hugging Face 文本生成推理 (TGI) 是一种专门的部署解决方案，用于在云端提供大型语言模型 (LLM)，并通过 API 访问它们。TGI 通过持续批处理、令牌流和高效的内存管理等功能，为文本生成任务提供优化的性能。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要在 Hugging Face 上创建一个推理端点，并创建一个 API 令牌来访问该端点。更多详情请点击[&#xA;  &lt;a href=&#34;https://huggingface.co/docs/inference-endpoints/index&#34;&gt;此处&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://huggingface.co/docs/inference-endpoints/index&#34;&gt;https://huggingface.co/docs/inference-endpoints/index&lt;/a&gt;) 。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI 项目定义了两个配置属性：&lt;/p&gt;&#xA;&lt;p&gt;您可以[&#xA;  &lt;a href=&#34;https://ui.endpoints.huggingface.co/&#34;&gt;在此处&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://ui.endpoints.huggingface.co/&#34;&gt;https://ui.endpoints.huggingface.co/&lt;/a&gt;)的推理端点 UI 上找到您的推理端点 URL。&lt;/p&gt;&#xA;&lt;p&gt;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置这些配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.huggingface.chat.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-huggingface-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.huggingface.chat.url&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-inference-endpoint-url&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 (SpEL) 来引用自定义环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;huggingface&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;chat&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${HUGGINGFACE_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;url&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${HUGGINGFACE_ENDPOINT_URL}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export HUGGINGFACE_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-huggingface-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export HUGGINGFACE_ENDPOINT_URL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-inference-endpoint-url&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置这些配置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve API key and endpoint URL from secure sources or environment variables&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String apiKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HUGGINGFACE_API_KEY&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String endpointUrl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HUGGINGFACE_ENDPOINT_URL&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 的构件已发布在 Maven Central 和 Spring Snapshot 仓库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;“构件仓库”&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些仓库添加到您的构建系统中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mistral 人工智能聊天</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/mistral-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E8%81%8A%E5%A4%A9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/mistral-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E8%81%8A%E5%A4%A9/</guid>
      <description>&lt;h1 id=&#34;mistral-人工智能聊天&#34;&gt;&#xA;  Mistral 人工智能聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mistral-%e4%ba%ba%e5%b7%a5%e6%99%ba%e8%83%bd%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 Mistral AI 的各种 AI 语言模型。您可以与 Mistral AI 语言模型进行交互，并基于 Mistral 模型创建多语言对话助手。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 Mistral AI 创建一个 API 来访问 Mistral AI 语言模型。&lt;/p&gt;&#xA;&lt;p&gt;在 [&#xA;  &lt;a href=&#34;https://auth.mistral.ai/ui/registration&#34;&gt;Mistral AI 注册页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://auth.mistral.ai/ui/registration&#34;&gt;https://auth.mistral.ai/ui/registration&lt;/a&gt;)创建一个帐户，并在 [&#xA;  &lt;a href=&#34;https://console.mistral.ai/api-keys/&#34;&gt;API Keys 页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://console.mistral.ai/api-keys/&#34;&gt;https://console.mistral.ai/api-keys/&lt;/a&gt;)上生成令牌。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.mistralai.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 console.mistralai.ai 获取的 &lt;code&gt;API Key&lt;/code&gt; 的值。&lt;/p&gt;&#xA;&lt;p&gt;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.mistralai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-mistralai-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 (SpEL) 引用自定义环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;mistralai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${MISTRALAI_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export MISTRALAI_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-mistralai-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;</description>
    </item>
    <item>
      <title>MongoDB Atlas</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb-atlas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb-atlas/</guid>
      <description>&lt;h1 id=&#34;mongodb-atlas&#34;&gt;&#xA;  MongoDB Atlas&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mongodb-atlas&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将引导您将 MongoDB Atlas 设置为矢量存储以与 Spring AI 一起使用。&lt;/p&gt;&#xA;&lt;h2 id=&#34;什么是-mongodb-atlas&#34;&gt;&#xA;  什么是 MongoDB Atlas？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af-mongodb-atlas&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://www.mongodb.com/products/platform/atlas-database&#34;&gt;MongoDB Atlas&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.mongodb.com/products/platform/atlas-database&#34;&gt;https://www.mongodb.com/products/platform/atlas-database&lt;/a&gt;) 是 MongoDB 推出的完全托管云数据库，可在 AWS、Azure 和 GCP 上使用。Atlas 支持对 MongoDB 文档数据进行原生向量搜索和全文搜索。&lt;/p&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://www.mongodb.com/products/platform/atlas-vector-search&#34;&gt;MongoDB Atlas 向量搜索&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.mongodb.com/products/platform/atlas-vector-search&#34;&gt;https://www.mongodb.com/products/platform/atlas-vector-search&lt;/a&gt;)允许您将向量嵌入存储在 MongoDB 文档中，创建向量搜索索引，并使用近似最近邻算法（分层可导航小世界）执行 KNN 搜索。您可以在 MongoDB 聚合阶段使用 &lt;code&gt;$vectorSearch&lt;/code&gt; 聚合运算符对向量嵌入执行搜索。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;运行 MongoDB 6.0.11、7.0.2 或更高版本的 Atlas 集群。要开始使用 MongoDB Atlas，您可以按照此处的说明操作。确保您的 IP 地址包含在 Atlas 项目的访问列表中。&lt;/li&gt;&#xA;&lt;li&gt;正在运行且启用了向量搜索的 MongoDB Atlas 实例&lt;/li&gt;&#xA;&lt;li&gt;配置了向量搜索索引的集合&lt;/li&gt;&#xA;&lt;li&gt;具有 id（字符串）、内容（字符串）、元数据（文档）和嵌入（向量）字段的集合架构&lt;/li&gt;&#xA;&lt;li&gt;索引和集合操作的适当访问权限&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 MongoDB Atlas 矢量存储提供了 Spring Boot 自动配置功能。要启用此功能，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;</description>
    </item>
    <item>
      <title>千帆嵌入</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/%E5%8D%83%E5%B8%86%E5%B5%8C%E5%85%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/%E5%8D%83%E5%B8%86%E5%B5%8C%E5%85%A5/</guid>
      <description>&lt;h1 id=&#34;千帆嵌入&#34;&gt;&#xA;  千帆嵌入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8d%83%e5%b8%86%e5%b5%8c%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;此功能已移至 Spring AI 社区存储库。&lt;/p&gt;&#xA;&lt;p&gt;请访问 [&#xA;  &lt;a href=&#34;https://github.com/spring-ai-community/qianfan&#34;&gt;github.com/spring-ai-community/qianfan&lt;/a&gt;](https://&#xA;  &lt;a href=&#34;https://github.com/spring-ai-community/qianfan&#34;&gt;github.com/spring-ai-community/qianfan&lt;/a&gt;) 获取最新版本。&lt;/p&gt;</description>
    </item>
    <item>
      <title>评估测试</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E8%AF%84%E4%BC%B0%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E8%AF%84%E4%BC%B0%E6%B5%8B%E8%AF%95/</guid>
      <description>&lt;h1 id=&#34;评估测试&#34;&gt;&#xA;  评估测试&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%af%84%e4%bc%b0%e6%b5%8b%e8%af%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;测试人工智能应用程序需要评估生成的内容，以确保人工智能模型没有产生幻觉反应。&lt;/p&gt;&#xA;&lt;p&gt;评估响应结果的一种方法是使用 AI 模型本身进行评估。选择最佳的 AI 模型进行评估，该模型可能与生成响应结果的模型不同。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI 用于评估响应的接口是 &lt;code&gt;Evaluator&lt;/code&gt; ，定义如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@FunctionalInterface&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Evaluator&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    EvaluationResponse &lt;span style=&#34;color:#a6e22e&#34;&gt;evaluate&lt;/span&gt;(EvaluationRequest evaluationRequest);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;评估的输入是 &lt;code&gt;EvaluationRequest&lt;/code&gt; 定义为&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EvaluationRequest&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String userText;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Content&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; dataList;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String responseContent;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EvaluationRequest&lt;/span&gt;(String userText, List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Content&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; dataList, String responseContent) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;userText&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; userText;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dataList&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dataList;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;responseContent&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; responseContent;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;userText ：来自用户的原始输入，以 String 形式&lt;/li&gt;&#xA;&lt;li&gt;dataList ：上下文数据，例如来自检索增强生成的数据，附加到原始输入。&lt;/li&gt;&#xA;&lt;li&gt;responseContent ：AI 模型的响应内容（ String&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;相关性评估器&#34;&gt;&#xA;  相关性评估器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%9b%b8%e5%85%b3%e6%80%a7%e8%af%84%e4%bc%b0%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;`Relevancy&lt;code&gt;Evaluator``` 是 &lt;/code&gt;Evaluator`` 接口的一个实现，旨在评估 AI 生成的响应与所提供上下文的相关性。此评估器通过确定 AI 模型的响应是否与用户输入（就检索到的上下文而言）相关，来帮助评估 RAG 流程的质量。&lt;/p&gt;</description>
    </item>
    <item>
      <title>MiniMax 聊天</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/minimax-%E8%81%8A%E5%A4%A9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/minimax-%E8%81%8A%E5%A4%A9/</guid>
      <description>&lt;h1 id=&#34;minimax-聊天&#34;&gt;&#xA;  MiniMax 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#minimax-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 MiniMax 的各种 AI 语言模型。您可以与 MiniMax 语言模型进行交互，并基于 MiniMax 模型创建多语言对话助手。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 MiniMax 创建一个 API 来访问 MiniMax 语言模型。&lt;/p&gt;&#xA;&lt;p&gt;在 [&#xA;  &lt;a href=&#34;https://www.minimaxi.com/login&#34;&gt;MiniMax 注册页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.minimaxi.com/login&#34;&gt;https://www.minimaxi.com/login&lt;/a&gt;)创建一个帐户，并在 [&#xA;  &lt;a href=&#34;https://www.minimaxi.com/user-center/basic-information/interface-key&#34;&gt;API Keys 页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.minimaxi.com/user-center/basic-information/interface-key&#34;&gt;https://www.minimaxi.com/user-center/basic-information/interface-key&lt;/a&gt;)生成令牌。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.minimax.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 &lt;code&gt;API Key&lt;/code&gt;s 页面获取的 &lt;code&gt;API Key&lt;/code&gt; 的值。&lt;/p&gt;&#xA;&lt;p&gt;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.minimax.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-minimax-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 (SpEL) 来引用环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;minimax&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${MINIMAX_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export MINIMAX_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-minimax-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Neo4j</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/neo4j/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/neo4j/</guid>
      <description>&lt;h1 id=&#34;neo4j&#34;&gt;&#xA;  Neo4j&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#neo4j&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将引导您设置 &lt;code&gt;Neo4jVectorStore&lt;/code&gt; 来存储文档嵌入并执行相似性搜索。&lt;/p&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://neo4j.com&#34;&gt;Neo4j&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://neo4j.com&#34;&gt;https://neo4j.com&lt;/a&gt;) 是一个开源 NoSQL 图形数据库。它是一个完全事务性 (ACID) 数据库，以图的形式存储数据，这些图由节点组成，并通过关系连接。受现实世界结构的启发，它能够对复杂数据提供高性能查询，同时保持开发人员的直观和简单。&lt;/p&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://neo4j.com/docs/cypher-manual/current/indexes-for-vector-search/&#34;&gt;Neo4j 的向量搜索&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://neo4j.com/docs/cypher-manual/current/indexes-for-vector-search/&#34;&gt;https://neo4j.com/docs/cypher-manual/current/indexes-for-vector-search/&lt;/a&gt;)功能允许用户从大型数据集中查询向量嵌入。嵌入是数据对象（例如文本、图像、音频或文档）的数值表示。嵌入可以存储在节点属性中，并可使用 &lt;code&gt;db.index.vector.queryNodes()&lt;/code&gt; 函数进行查询。这些索引由 Lucene 提供支持，它使用分层可导航小世界图 (HNSW) 对向量场执行 k-ANN 近似最近邻 (k-ANN) 查询。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;正在运行的 Neo4j (5.15+) 实例。以下选项可用：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Docker 镜像&lt;/li&gt;&#xA;&lt;li&gt;Neo4j 桌面&lt;/li&gt;&#xA;&lt;li&gt;Neo4j 服务器实例&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Docker 镜像&lt;/li&gt;&#xA;&lt;li&gt;Neo4j 桌面&lt;/li&gt;&#xA;&lt;li&gt;Neo4j 服务器实例&lt;/li&gt;&#xA;&lt;li&gt;如果需要，可以使用 EmbeddingModel 的 API 密钥来生成 Neo4jVectorStore 存储的嵌入。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Neo4j 矢量存储提供了 Spring Boot 自动配置功能。要启用此功能，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-vector-store-neo4j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者到你的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Moonshot AI 聊天</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/moonshot-ai-%E8%81%8A%E5%A4%A9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/moonshot-ai-%E8%81%8A%E5%A4%A9/</guid>
      <description>&lt;h1 id=&#34;moonshot-ai-聊天&#34;&gt;&#xA;  Moonshot AI 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#moonshot-ai-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;此功能已移至 Spring AI 社区存储库。&lt;/p&gt;&#xA;&lt;p&gt;请访问 [&#xA;  &lt;a href=&#34;https://github.com/spring-ai-community/moonshot&#34;&gt;github.com/spring-ai-community/moonshot&lt;/a&gt;](https://&#xA;  &lt;a href=&#34;https://github.com/spring-ai-community/moonshot&#34;&gt;github.com/spring-ai-community/moonshot&lt;/a&gt;) 获取最新版本。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ZhiPuAI 嵌入</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/zhipuai-%E5%B5%8C%E5%85%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B-api/zhipuai-%E5%B5%8C%E5%85%A5/</guid>
      <description>&lt;h1 id=&#34;zhipuai-嵌入&#34;&gt;&#xA;  ZhiPuAI 嵌入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#zhipuai-%e5%b5%8c%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 ZhiPuAI 的文本嵌入模型。ZhiPuAI 的文本嵌入用于衡量文本字符串的相关性。嵌入是一个浮点数向量（列表）。两个向量之间的距离衡量它们的相关性。距离越小，相关性越高；距离越大，相关性越低。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 ZhiPuAI 创建一个 API 来访问 ZhiPu AI 语言模型。&lt;/p&gt;&#xA;&lt;p&gt;在[&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/login&#34;&gt;智普 AI 注册页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/login&#34;&gt;https://open.bigmodel.cn/login&lt;/a&gt;)创建账号，并在 [&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/usercenter/apikeys&#34;&gt;API Keys 页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/usercenter/apikeys&#34;&gt;https://open.bigmodel.cn/usercenter/apikeys&lt;/a&gt;)生成 token。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.zhipu.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 &lt;code&gt;API Key&lt;/code&gt;s 页面获取的 &lt;code&gt;API Key&lt;/code&gt; 的值。&lt;/p&gt;&#xA;&lt;p&gt;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.zhipu.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-zhipu-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 (SpEL) 来引用环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;zhipu&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${ZHIPU_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export ZHIPU_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-zhipu-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve API key from a secure source or environment variable&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String apiKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ZHIPU_API_KEY&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 的构件已发布在 Maven Central 和 Spring Snapshot 仓库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;“构件仓库”&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些仓库添加到您的构建系统中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>可观察性</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E5%8F%AF%E8%A7%82%E5%AF%9F%E6%80%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E5%8F%AF%E8%A7%82%E5%AF%9F%E6%80%A7/</guid>
      <description>&lt;h1 id=&#34;可观察性&#34;&gt;&#xA;  可观察性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%af%e8%a7%82%e5%af%9f%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 以 Spring 生态系统中的可观察性功能为基础，提供对 AI 相关操作的洞察。Spring AI 为其核心组件提供了指标和跟踪功能： &lt;code&gt;ChatClient&lt;/code&gt; （包括 &lt;code&gt;Advisor&lt;/code&gt; ）、&#xA;&lt;code&gt;ChatModel&lt;/code&gt; 、 &lt;code&gt;EmbeddingModel&lt;/code&gt; 、 &lt;code&gt;ImageModel&lt;/code&gt; 和 &lt;code&gt;VectorStore&lt;/code&gt; 。&lt;/p&gt;&#xA;&lt;h2 id=&#34;聊天客户端&#34;&gt;&#xA;  聊天客户端&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%81%8a%e5%a4%a9%e5%ae%a2%e6%88%b7%e7%ab%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;当 ChatClient 的 &lt;code&gt;call()&lt;/code&gt; 或 &lt;code&gt;stream()&lt;/code&gt; 操作被调用时， &lt;code&gt;spring.ai.chat.client&lt;/code&gt; 观测值会被记录下来。它们会测量执行调用所花费的时间，并传播相关的跟踪信息。&lt;/p&gt;&#xA;&lt;h2 id=&#34;提示内容&#34;&gt;&#xA;  提示内容&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8f%90%e7%a4%ba%e5%86%85%e5%ae%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;ChatClient&lt;/code&gt; 提示内容通常很大，并且可能包含敏感信息。因此，默认情况下不会导出该内容。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI 支持记录提示内容，以帮助调试和排除故障。&lt;/p&gt;&#xA;&lt;h2 id=&#34;输入数据已弃用&#34;&gt;&#xA;  输入数据（已弃用）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%be%93%e5%85%a5%e6%95%b0%e6%8d%ae%e5%b7%b2%e5%bc%83%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;ChatClient&lt;/code&gt; 输入数据通常很大，并且可能包含敏感信息。因此，默认情况下不会导出这些数据。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI 支持记录输入数据以帮助调试和故障排除。&lt;/p&gt;&#xA;&lt;h2 id=&#34;聊天客户顾问&#34;&gt;&#xA;  聊天客户顾问&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%81%8a%e5%a4%a9%e5%ae%a2%e6%88%b7%e9%a1%be%e9%97%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;spring.ai.advisor&lt;/code&gt; 观测值会在 advisor 执行时进行记录。它们会测量 advisor 执行的时间（包括内部 advisor 执行的时间），并传播相关的跟踪信息。&lt;/p&gt;&#xA;&lt;h2 id=&#34;聊天模型&#34;&gt;&#xA;  聊天模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%81%8a%e5%a4%a9%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;gen_ai.client.operation&lt;/code&gt; 观察值在调用 ChatModel 的 &lt;code&gt;call&lt;/code&gt; 或 &lt;code&gt;stream&lt;/code&gt; 方法时记录。它们测量方法完成所花费的时间并传播相关的跟踪信息。&lt;/p&gt;</description>
    </item>
    <item>
      <title>开放搜索</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%BC%80%E6%94%BE%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%BC%80%E6%94%BE%E6%90%9C%E7%B4%A2/</guid>
      <description>&lt;h1 id=&#34;开放搜索&#34;&gt;&#xA;  开放搜索&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%80%e6%94%be%e6%90%9c%e7%b4%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将引导您设置 &lt;code&gt;OpenSearchVectorStore&lt;/code&gt; 来存储文档嵌入并执行相似性搜索。&lt;/p&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://opensearch.org&#34;&gt;OpenSearch&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://opensearch.org&#34;&gt;https://opensearch.org&lt;/a&gt;) 是一个开源搜索和分析引擎，最初由 Elasticsearch 分叉而来，遵循 Apache 2.0 许可证发行。它通过简化 AI 生成资产的集成和管理来增强 AI 应用程序开发。[&#xA;  &lt;a href=&#34;https://opensearch.org&#34;&gt;OpenSearch&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://opensearch.org&#34;&gt;https://opensearch.org&lt;/a&gt;) 支持向量、词汇和混合搜索功能，并利用高级向量数据库功能实现低延迟查询和相似性搜索，详情请参阅[&#xA;  &lt;a href=&#34;https://opensearch.org/platform/search/vector-database.html&#34;&gt;向量数据库页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://opensearch.org/platform/search/vector-database.html&#34;&gt;https://opensearch.org/platform/search/vector-database.html&lt;/a&gt;) 。&lt;/p&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://opensearch.org/docs/latest/search-plugins/knn/index/&#34;&gt;OpenSearch k-NN&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://opensearch.org/docs/latest/search-plugins/knn/index/&#34;&gt;https://opensearch.org/docs/latest/search-plugins/knn/index/&lt;/a&gt;) 功能允许用户从大型数据集中查询向量嵌入。嵌入是数据对象（例如文本、图像、音频或文档）的数值表示。嵌入可以存储在索引中，并使用各种相似度函数进行查询。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;正在运行的 OpenSearch 实例。有以下选项可用：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;自主管理的 OpenSearch&lt;/li&gt;&#xA;&lt;li&gt;亚马逊开放搜索服务&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;自主管理的 OpenSearch&lt;/li&gt;&#xA;&lt;li&gt;亚马逊开放搜索服务&lt;/li&gt;&#xA;&lt;li&gt;如果需要，可以使用 EmbeddingModel 的 API 密钥来生成 OpenSearchVectorStore 存储的嵌入。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 OpenSearch 向量存储提供了 Spring Boot 自动配置功能。要启用此功能，请在项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中添加以下依赖项：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-vector-store-opensearch&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者到你的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-vector-store-opensearch&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于 Amazon OpenSearch Service，请改用以下依赖项：&lt;/p&gt;</description>
    </item>
    <item>
      <title>NVIDIA 聊天</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/nvidia-%E8%81%8A%E5%A4%A9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/nvidia-%E8%81%8A%E5%A4%A9/</guid>
      <description>&lt;h1 id=&#34;nvidia-聊天&#34;&gt;&#xA;  NVIDIA 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#nvidia-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://docs.api.nvidia.com/nim/reference/llm-apis&#34;&gt;NVIDIA LLM API&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.api.nvidia.com/nim/reference/llm-apis&#34;&gt;https://docs.api.nvidia.com/nim/reference/llm-apis&lt;/a&gt;) 是一个代理 AI 推理引擎，提供来自[&#xA;  &lt;a href=&#34;https://docs.api.nvidia.com/nim/reference/llm-apis#models&#34;&gt;不同提供商&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.api.nvidia.com/nim/reference/llm-apis#models&#34;&gt;https://docs.api.nvidia.com/nim/reference/llm-apis#models&lt;/a&gt;)的多种模型。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI 通过重用现有的 [&#xA;  &lt;a href=&#34;openai-chat.html&#34;&gt;OpenAI&lt;/a&gt;](openai-chat.html) 客户端与 NVIDIA LLM API 集成。为此，您需要将 base-url 设置为 &lt;code&gt;[[integrate.api.nvidia.com](https://integrate.api.nvidia.com)](https://[integrate.api.nvidia.com](https://integrate.api.nvidia.com))&lt;/code&gt; ，选择其中一个提供的 [&#xA;  &lt;a href=&#34;https://docs.api.nvidia.com/nim/reference/llm-apis#model&#34;&gt;LLM 模型&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.api.nvidia.com/nim/reference/llm-apis#model&#34;&gt;https://docs.api.nvidia.com/nim/reference/llm-apis#model&lt;/a&gt;)并获取其 &lt;code&gt;api-key&lt;/code&gt; 。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;./images/spring-ai-nvidia-llm-api-1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;检查 [&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/NvidiaWithOpenAiChatModelIT.java&#34;&gt;NvidiaWithOpenAiChatModelIT.java&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/[NvidiaWithOpenAiChatModelIT.java]%28https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/NvidiaWithOpenAiChatModelIT.java%29&#34;&gt;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/[NvidiaWithOpenAiChatModelIT.java](https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/NvidiaWithOpenAiChatModelIT.java)&lt;/a&gt;) 测试，了解将 NVIDIA LLM API 与 Spring AI 结合使用的示例。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;创建具有足够积分的 NVIDIA 帐户。&lt;/li&gt;&#xA;&lt;li&gt;选择要使用的 LLM 模型。例如，下图中的 meta/llama-3.1-70b-instruct 。&lt;/li&gt;&#xA;&lt;li&gt;从所选模型的页面中，您可以获取访问该模型的 api-key 。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;./images/spring-ai-nvidia-registration.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 OpenAI Chat Client 提供了 Spring Boot 自动配置功能。要启用此功能，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-model-openai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者到你的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Oracle Database 23ai - AI 向量搜索</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/oracle-database-23ai---ai-%E5%90%91%E9%87%8F%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/oracle-database-23ai---ai-%E5%90%91%E9%87%8F%E6%90%9C%E7%B4%A2/</guid>
      <description>&lt;h1 id=&#34;oracle-database-23ai---ai-向量搜索&#34;&gt;&#xA;  Oracle Database 23ai - AI 向量搜索&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#oracle-database-23ai---ai-%e5%90%91%e9%87%8f%e6%90%9c%e7%b4%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Oracle Database 23ai（23.4+）的 [&#xA;  &lt;a href=&#34;https://docs.oracle.com/en/database/oracle/oracle-database/23/vecse/overview-ai-vector-search.html&#34;&gt;AI 向量搜索&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.oracle.com/en/database/oracle/oracle-database/23/vecse/overview-ai-vector-search.html&#34;&gt;https://docs.oracle.com/en/database/oracle/oracle-database/23/vecse/overview-ai-vector-search.html&lt;/a&gt;)功能现已作为 Spring AI &lt;code&gt;VectorStore&lt;/code&gt; 提供，可帮助您存储文档嵌入并执行相似性搜索。当然，所有其他功能也均可使用。&lt;/p&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;首先将 Oracle Vector Store 启动程序依赖项添加到您的项目中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-vector-store-oracle&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者到你的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-vector-store-oracle&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果您需要此向量存储为您初始化模式，那么您需要在适当的构造函数中为 &lt;code&gt;initializeSchema&lt;/code&gt; 布尔参数传递 true，或者在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置 &lt;code&gt;…​initialize-schema=true&lt;/code&gt; 。&lt;/p&gt;&#xA;&lt;p&gt;Vector Store 还需要一个 &lt;code&gt;EmbeddingModel&lt;/code&gt; 实例来计算文档的嵌入。你可以从可用的 &lt;code&gt;EmbeddingModel&lt;/code&gt; 实现中选择一个。&lt;/p&gt;&#xA;&lt;p&gt;例如，要使用 [&#xA;  &lt;a href=&#34;../embeddings/openai-embeddings.html&#34;&gt;OpenAI EmbeddingModel，&lt;/a&gt;](../embeddings/openai-embeddings.html) 请将以下依赖项添加到您的项目：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-model-openai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者到你的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-model-openai&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要连接并配置 &lt;code&gt;OracleVectorStore&lt;/code&gt; ，您需要提供数据库的访问详细信息。您可以通过 Spring Boot 的 &lt;code&gt;application.yml&lt;/code&gt; 提供简单的配置。&lt;/p&gt;</description>
    </item>
    <item>
      <title>开发时服务</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E5%BC%80%E5%8F%91%E6%97%B6%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E5%BC%80%E5%8F%91%E6%97%B6%E6%9C%8D%E5%8A%A1/</guid>
      <description>&lt;h1 id=&#34;开发时服务&#34;&gt;&#xA;  开发时服务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%80%e5%8f%91%e6%97%b6%e6%9c%8d%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 提供了 Spring Boot 自动配置，用于建立与通过 Docker Compose 运行的模型服务或向量存储的连接。要启用此功能，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-spring-boot-docker-compose&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者到你的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-spring-boot-docker-compose&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;服务连接&#34;&gt;&#xA;  服务连接&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%8d%e5%8a%a1%e8%bf%9e%e6%8e%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;spring-ai-spring-boot-docker-compose&lt;/code&gt; 模块中提供了以下服务连接工厂：&lt;/p&gt;</description>
    </item>
    <item>
      <title>PG 载体</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/pg-%E8%BD%BD%E4%BD%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/pg-%E8%BD%BD%E4%BD%93/</guid>
      <description>&lt;h1 id=&#34;pg-载体&#34;&gt;&#xA;  PG 载体&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#pg-%e8%bd%bd%e4%bd%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将引导您设置 PGvector &lt;code&gt;VectorStore&lt;/code&gt; 来存储文档嵌入并执行相似性搜索。&lt;/p&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://github.com/pgvector/pgvector&#34;&gt;PGvector&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://github.com/pgvector/pgvector&#34;&gt;https://github.com/pgvector/pgvector&lt;/a&gt;) 是 PostgreSQL 的一个开源扩展，支持存储和搜索机器学习生成的嵌入。它提供了多种功能，让用户能够识别精确和近似的最近邻。它旨在与其他 PostgreSQL 功能（包括索引和查询）无缝协作。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;首先，您需要访问启用了 &lt;code&gt;vector&lt;/code&gt; 、 &lt;code&gt;hstore&lt;/code&gt; 和 &lt;code&gt;uuid-ossp&lt;/code&gt; 扩展的 PostgreSQL 实例。&lt;/p&gt;&#xA;&lt;p&gt;启动时， &lt;code&gt;PgVectorStore&lt;/code&gt; 将尝试安装所需的数据库扩展，并创建带有索引的所需 &lt;code&gt;vector_store&lt;/code&gt; 表（如果不存在）。&lt;/p&gt;&#xA;&lt;p&gt;或者，您可以像这样手动执行此操作：&lt;/p&gt;&#xA;&lt;p&gt;接下来，如果需要， [&#xA;  &lt;a href=&#34;../embeddings.html#available-implementations&#34;&gt;EmbeddingModel&lt;/a&gt;](../embeddings.html#available-implementations) 的 API 密钥可以生成 &lt;code&gt;PgVectorStore&lt;/code&gt; 存储的嵌入。&lt;/p&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;然后将 PgVectorStore 启动程序依赖项添加到您的项目中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-vector-store-pgvector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者到你的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-vector-store-pgvector&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;向量存储实现可以为您初始化所需的模式，但您必须通过在适当的构造函数中指定 &lt;code&gt;initializeSchema&lt;/code&gt; 布尔值或在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置 &lt;code&gt;…​initialize-schema=true&lt;/code&gt; 来选择加入。&lt;/p&gt;&#xA;&lt;p&gt;Vector Store 还需要一个 &lt;code&gt;EmbeddingModel&lt;/code&gt; 实例来计算文档的嵌入。您可以从可用的 &lt;code&gt;EmbeddingModel&lt;/code&gt; 实现中选择一个。&lt;/p&gt;</description>
    </item>
    <item>
      <title>聊天</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/%E8%81%8A%E5%A4%A9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/%E8%81%8A%E5%A4%A9/</guid>
      <description>&lt;h1 id=&#34;聊天&#34;&gt;&#xA;  聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;使用 [&#xA;  &lt;a href=&#34;https://ollama.ai/&#34;&gt;Ollama&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://ollama.ai/&#34;&gt;https://ollama.ai/&lt;/a&gt;) ，您可以在本地运行各种大型语言模型 (LLM) 并从中生成文本。Spring AI 通过 &lt;code&gt;[[Ollama](https://ollama.ai/)](https://ollama.ai/)ChatModel&lt;/code&gt; API 支持 [&#xA;  &lt;a href=&#34;https://ollama.ai/&#34;&gt;Ollama&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://ollama.ai/&#34;&gt;https://ollama.ai/&lt;/a&gt;) 聊天补全功能。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;首先，您需要访问 Ollama 实例。有以下几种选择：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在本地机器上下载并安装 Ollama 。&lt;/li&gt;&#xA;&lt;li&gt;通过 Testcontainers 配置并运行 Ollama 。&lt;/li&gt;&#xA;&lt;li&gt;通过 Kubernetes 服务绑定绑定到 Ollama 实例。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;您可以从 [&#xA;  &lt;a href=&#34;https://ollama.com/library&#34;&gt;Ollama 模型库中&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://ollama.com/library&#34;&gt;https://ollama.com/library&lt;/a&gt;)提取您想要在应用程序中使用的模型：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-shellscript&#34; data-lang=&#34;shellscript&#34;&gt;ollama pull &amp;lt;model-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;您还可以从数千个免费的 [&#xA;  &lt;a href=&#34;https://huggingface.co/models?library=gguf&amp;amp;sort=trending&#34;&gt;GGUF Hugging Face Models&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://huggingface.co/models?library=gguf&amp;amp;sort=trending&#34;&gt;https://huggingface.co/models?library=gguf&amp;sort=trending&lt;/a&gt;) 中挑选任意一个：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-shellscript&#34; data-lang=&#34;shellscript&#34;&gt;ollama pull hf.co/&amp;lt;username&amp;gt;/&amp;lt;model-repository&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者，您可以启用自动下载任何所需模型的选项： [&#xA;  &lt;a href=&#34;./#auto-pulling-models&#34;&gt;自动拉取模型&lt;/a&gt;](#auto-pulling-models) 。&lt;/p&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Ollama 聊天集成提供了 Spring Boot 自动配置。要启用此功能，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 或 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件中：&lt;/p&gt;&#xA;&lt;h2 id=&#34;基本属性&#34;&gt;&#xA;  基本属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9f%ba%e6%9c%ac%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;前缀 &lt;code&gt;spring.ai.ollama&lt;/code&gt; 是配置与 Ollama 的连接的属性前缀。&lt;/p&gt;</description>
    </item>
    <item>
      <title>困惑聊天</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/%E5%9B%B0%E6%83%91%E8%81%8A%E5%A4%A9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/%E5%9B%B0%E6%83%91%E8%81%8A%E5%A4%A9/</guid>
      <description>&lt;h1 id=&#34;困惑聊天&#34;&gt;&#xA;  困惑聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%b0%e6%83%91%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://perplexity.ai/&#34;&gt;Perplexity AI&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://perplexity.ai/&#34;&gt;https://perplexity.ai/&lt;/a&gt;) 提供独特的 AI 服务，将其语言模型与实时搜索功能相结合。它提供多种模型，并支持对话式 AI 的流式响应。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI 通过重用现有的 [&#xA;  &lt;a href=&#34;openai-chat.html&#34;&gt;OpenAI&lt;/a&gt;](openai-chat.html) 客户端与 Perplexity AI 集成。首先，您需要获取 [&#xA;  &lt;a href=&#34;https://docs.perplexity.ai/guides/getting-started&#34;&gt;Perplexity API 密钥&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.perplexity.ai/guides/getting-started&#34;&gt;https://docs.perplexity.ai/guides/getting-started&lt;/a&gt;) ，配置基本 URL ，并选择其中一个受支持的[&#xA;  &lt;a href=&#34;https://docs.perplexity.ai/guides/model-cards&#34;&gt;模型&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.perplexity.ai/guides/model-cards&#34;&gt;https://docs.perplexity.ai/guides/model-cards&lt;/a&gt;) 。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;./images/spring-ai-perplexity-integration.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;检查 [&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/PerplexityWithOpenAiChatModelIT.java&#34;&gt;PerplexityWithOpenAiChatModelIT.java&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/[PerplexityWithOpenAiChatModelIT.java]%28https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/PerplexityWithOpenAiChatModelIT.java%29&#34;&gt;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/[PerplexityWithOpenAiChatModelIT.java](https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/PerplexityWithOpenAiChatModelIT.java)&lt;/a&gt;) 测试，了解将 Perplexity 与 Spring AI 结合使用的示例。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;创建 API 密钥 ：访问此处创建 API 密钥。使用 Spring AI 项目中的 spring.ai.openai.api-key 属性进行配置。&lt;/li&gt;&#xA;&lt;li&gt;设置 Perplexity Base URL ：将 spring.ai.openai.base-url 属性设置为 api.perplexity.ai 。&lt;/li&gt;&#xA;&lt;li&gt;选择困惑度模型 ：使用 spring.ai.openai.chat.model=&lt;model name&gt; 属性指定模型。请参阅支持的模型 ，了解可用选项。&lt;/li&gt;&#xA;&lt;li&gt;设置聊天完成路径 ：将 spring.ai.openai.chat.completions-path 设置为 /chat/completions 。更多详情，请参阅聊天完成 API 。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置这些配置属性：&lt;/p&gt;</description>
    </item>
    <item>
      <title>松果</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%9D%BE%E6%9E%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%9D%BE%E6%9E%9C/</guid>
      <description>&lt;h1 id=&#34;松果&#34;&gt;&#xA;  松果&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9d%be%e6%9e%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将引导您设置 Pinecone &lt;code&gt;VectorStore&lt;/code&gt; 来存储文档嵌入并执行相似性搜索。&lt;/p&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://www.pinecone.io/&#34;&gt;Pinecone&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.pinecone.io/&#34;&gt;https://www.pinecone.io/&lt;/a&gt;) 是一个流行的基于云的矢量数据库，它允许您高效地存储和搜索矢量。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;要设置 &lt;code&gt;PineconeVectorStore&lt;/code&gt; ，请从您的 Pinecone 帐户收集以下详细信息：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Pinecone API 密钥&lt;/li&gt;&#xA;&lt;li&gt;松果索引名称&lt;/li&gt;&#xA;&lt;li&gt;Pinecone 命名空间&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Pinecone 矢量存储提供了 Spring Boot 自动配置功能。要启用此功能，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-vector-store-pinecone&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者到你的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-vector-store-pinecone&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此外，您还需要一个已配置的 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; bean。有关更多信息，请参阅 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; 部分。&lt;/p&gt;&#xA;&lt;p&gt;以下是所需 bean 的示例：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; EmbeddingModel &lt;span style=&#34;color:#a6e22e&#34;&gt;embeddingModel&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Can be any other EmbeddingModel implementation.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OpenAiEmbeddingModel(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OpenAiApi(System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OPENAI_API_KEY&amp;#34;&lt;/span&gt;)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要连接到 Pinecone，您需要提供实例的访问详细信息。您可以通过 Spring Boot 的 application.properties 提供简单的配置，&lt;/p&gt;</description>
    </item>
    <item>
      <title>卡德兰特</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%8D%A1%E5%BE%B7%E5%85%B0%E7%89%B9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%8D%A1%E5%BE%B7%E5%85%B0%E7%89%B9/</guid>
      <description>&lt;h1 id=&#34;卡德兰特&#34;&gt;&#xA;  卡德兰特&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8d%a1%e5%be%b7%e5%85%b0%e7%89%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将引导您设置 Qdrant &lt;code&gt;VectorStore&lt;/code&gt; 来存储文档嵌入并执行相似性搜索。&lt;/p&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://www.qdrant.tech/&#34;&gt;Qdrant&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.qdrant.tech/&#34;&gt;https://www.qdrant.tech/&lt;/a&gt;) 是一款开源的高性能向量搜索引擎/数据库。它采用 HNSW（分层可导航小世界）算法进行高效的 k-NN 搜索操作，并为基于元数据的查询提供高级过滤功能。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Qdrant 实例：按照 Qdrant 文档中的安装说明设置 Qdrant 实例。&lt;/li&gt;&#xA;&lt;li&gt;如果需要， EmbeddingModel 的 API 密钥可以生成 QdrantVectorStore 存储的嵌入。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Qdrant 矢量存储提供了 Spring Boot 自动配置功能。要启用此功能，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-vector-store-qdrant&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者到你的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-vector-store-qdrant&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请查看向量存储的[&#xA;  &lt;a href=&#34;./#qdrant-vectorstore-properties&#34;&gt;配置参数&lt;/a&gt;](#qdrant-vectorstore-properties)列表，以了解默认值和配置选项。&lt;/p&gt;&#xA;&lt;p&gt;向量存储实现可以为您初始化必要的模式，但您必须通过在构建器中指定 &lt;code&gt;initializeSchema&lt;/code&gt; 布尔值或在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置 &lt;code&gt;…​initialize-schema=true&lt;/code&gt; 来选择加入。&lt;/p&gt;&#xA;&lt;p&gt;此外，您还需要一个已配置的 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; bean。有关更多信息，请参阅 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; 部分。&lt;/p&gt;&#xA;&lt;p&gt;现在您可以将 &lt;code&gt;QdrantVectorStore&lt;/code&gt; 自动连接为应用程序中的矢量存储。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenAI 聊天</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/openai-%E8%81%8A%E5%A4%A9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/openai-%E8%81%8A%E5%A4%A9/</guid>
      <description>&lt;h1 id=&#34;openai-聊天&#34;&gt;&#xA;  OpenAI 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#openai-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 ChatGPT 背后的公司 OpenAI 的各种 AI 语言模型，该公司通过创建业界领先的文本生成模型和嵌入，在激发人们对 AI 驱动的文本生成的兴趣方面发挥了重要作用。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 OpenAI 创建一个 API 来访问 ChatGPT 模型。&lt;/p&gt;&#xA;&lt;p&gt;在 [&#xA;  &lt;a href=&#34;https://platform.openai.com/signup&#34;&gt;OpenAI 注册页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://platform.openai.com/signup&#34;&gt;https://platform.openai.com/signup&lt;/a&gt;)创建一个帐户，并在 [&#xA;  &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;API 密钥页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;https://platform.openai.com/account/api-keys&lt;/a&gt;)上生成令牌。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.openai.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 openai.com 获取的 &lt;code&gt;API Key&lt;/code&gt; 的值。&lt;/p&gt;&#xA;&lt;p&gt;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.openai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-openai-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 (SpEL) 引用自定义环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;openai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${OPENAI_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export OPENAI_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-openai-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve API key from a secure source or environment variable&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String apiKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OPENAI_API_KEY&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 的构件已发布在 Maven Central 和 Spring Snapshot 仓库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;“构件仓库”&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些仓库添加到您的构建系统中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redis</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/redis/</guid>
      <description>&lt;h1 id=&#34;redis&#34;&gt;&#xA;  Redis&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redis&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将引导您设置 &lt;code&gt;RedisVectorStore&lt;/code&gt; 来存储文档嵌入并执行相似性搜索。&lt;/p&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://redis.io&#34;&gt;Redis&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://redis.io&#34;&gt;https://redis.io&lt;/a&gt;) 是一个开源（BSD 许可）的内存数据结构存储，可用作数据库、缓存、消息代理和流引擎。[&#xA;  &lt;a href=&#34;https://redis.io&#34;&gt;Redis&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://redis.io&#34;&gt;https://redis.io&lt;/a&gt;) 提供多种数据结构，例如字符串、哈希、列表、集合、支持范围查询的有序集合、位图、超日志、地理空间索引和流。&lt;/p&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://redis.io/docs/interact/search-and-query/&#34;&gt;Redis Search 和 Query&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://redis.io/docs/interact/search-and-query/&#34;&gt;https://redis.io/docs/interact/search-and-query/&lt;/a&gt;) 扩展了 Redis OSS 的核心功能，并允许您使用 Redis 作为矢量数据库：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将向量和相关元数据存储在哈希或 JSON 文档中&lt;/li&gt;&#xA;&lt;li&gt;检索向量&lt;/li&gt;&#xA;&lt;li&gt;执行向量搜索&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Redis 矢量存储提供了 Spring Boot 自动配置功能。要启用此功能，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-vector-store-redis&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者到你的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-vector-store-redis&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;向量存储实现可以为您初始化必要的模式，但您必须通过在适当的构造函数中指定 &lt;code&gt;initializeSchema&lt;/code&gt; 布尔值或在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置 &lt;code&gt;…​initialize-schema=true&lt;/code&gt; 来选择加入。&lt;/p&gt;&#xA;&lt;p&gt;请查看向量存储的[&#xA;  &lt;a href=&#34;./#redisvector-properties&#34;&gt;配置参数&lt;/a&gt;](#redisvector-properties)列表，以了解默认值和配置选项。&lt;/p&gt;&#xA;&lt;p&gt;此外，您还需要一个已配置的 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; bean。有关更多信息，请参阅 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; 部分。&lt;/p&gt;&#xA;&lt;p&gt;现在，您可以将 &lt;code&gt;RedisVectorStore&lt;/code&gt; 自动连接为应用程序中的矢量存储。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SAP HANA 云</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/sap-hana-%E4%BA%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/sap-hana-%E4%BA%91/</guid>
      <description>&lt;h1 id=&#34;sap-hana-云&#34;&gt;&#xA;  SAP HANA 云&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sap-hana-%e4%ba%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;您需要一个 SAP HANA Cloud 矢量引擎帐户 - 请参阅 SAP HANA Cloud 矢量引擎 - 提供试用帐户指南来创建试用帐户。&lt;/li&gt;&#xA;&lt;li&gt;如果需要， EmbeddingModel 的 API 密钥可以生成向量存储所存储的嵌入。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 没有为 SAP Hana 向量存储提供专用模块。用户需要使用 Spring AI 中 SAP Hana 向量存储的标准向量存储模块 &lt;code&gt;spring-ai-hanadb-store&lt;/code&gt; 在应用程序中自行配置。&lt;/p&gt;&#xA;&lt;p&gt;请查看矢量存储的 [&#xA;  &lt;a href=&#34;./#hanacloudvectorstore-properties&#34;&gt;HanaCloudVectorStore 属性&lt;/a&gt;](#hanacloudvectorstore-properties)列表，以了解默认值和配置选项。&lt;/p&gt;&#xA;&lt;p&gt;此外，您还需要一个已配置的 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; bean。有关更多信息，请参阅 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; 部分。&lt;/p&gt;&#xA;&lt;h2 id=&#34;hanacloudvectorstore-属性&#34;&gt;&#xA;  HanaCloudVectorStore 属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hanacloudvectorstore-%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您可以在 Spring Boot 配置中使用以下属性来自定义 SAP Hana 矢量存储。它使用 &lt;code&gt;spring.datasource.&lt;/code&gt; 属性来配置 Hana 数据源和 &lt;code&gt;spring.ai.vectorstore.hanadb.&lt;/code&gt; 属性来配置 Hana 矢量存储。&lt;/p&gt;</description>
    </item>
    <item>
      <title>千帆聊天</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/%E5%8D%83%E5%B8%86%E8%81%8A%E5%A4%A9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/%E5%8D%83%E5%B8%86%E8%81%8A%E5%A4%A9/</guid>
      <description>&lt;h1 id=&#34;千帆聊天&#34;&gt;&#xA;  千帆聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8d%83%e5%b8%86%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;此功能已移至 Spring AI 社区存储库。&lt;/p&gt;&#xA;&lt;p&gt;请访问 [&#xA;  &lt;a href=&#34;https://github.com/spring-ai-community/qianfan&#34;&gt;github.com/spring-ai-community/qianfan&lt;/a&gt;](https://&#xA;  &lt;a href=&#34;https://github.com/spring-ai-community/qianfan&#34;&gt;github.com/spring-ai-community/qianfan&lt;/a&gt;) 获取最新版本。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Typesense</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/typesense/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/typesense/</guid>
      <description>&lt;h1 id=&#34;typesense&#34;&gt;&#xA;  Typesense&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#typesense&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将引导您设置 &lt;code&gt;TypesenseVectorStore&lt;/code&gt; 来存储文档嵌入并执行相似性搜索。&lt;/p&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://typesense.org&#34;&gt;Typesense&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://typesense.org&#34;&gt;https://typesense.org&lt;/a&gt;) 是一款开源的拼写错误容忍搜索引擎，它针对 50 毫秒内的即时搜索进行了优化，同时提供了直观的开发者体验。它提供向量搜索功能，允许您在常规搜索数据的同时存储和查询高维向量。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;正在运行的 Typesense 实例。以下选项可用：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Typesense Cloud （推荐）&lt;/li&gt;&#xA;&lt;li&gt;Docker 镜像 typesense/typesense:latest&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Typesense Cloud （推荐）&lt;/li&gt;&#xA;&lt;li&gt;Docker 镜像 typesense/typesense:latest&lt;/li&gt;&#xA;&lt;li&gt;如果需要， EmbeddingModel 的 API 密钥可以生成 TypesenseVectorStore 存储的嵌入。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Typesense 矢量存储提供了 Spring Boot 自动配置。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-vector-store-typesense&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者到你的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-vector-store-typesense&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请查看向量存储的[&#xA;  &lt;a href=&#34;./#_configuration_properties&#34;&gt;配置参数&lt;/a&gt;](#_configuration_properties)列表，以了解默认值和配置选项。&lt;/p&gt;&#xA;&lt;p&gt;向量存储实现可以为您初始化必要的模式，但您必须通过在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置 &lt;code&gt;…​initialize-schema=true&lt;/code&gt; 来选择加入。&lt;/p&gt;&#xA;&lt;p&gt;此外，您还需要一个已配置的 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; bean。有关更多信息，请参阅 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; 部分。&lt;/p&gt;</description>
    </item>
    <item>
      <title>智浦 AI 聊天</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/%E6%99%BA%E6%B5%A6-ai-%E8%81%8A%E5%A4%A9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B-api/%E6%99%BA%E6%B5%A6-ai-%E8%81%8A%E5%A4%A9/</guid>
      <description>&lt;h1 id=&#34;智浦-ai-聊天&#34;&gt;&#xA;  智浦 AI 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%99%ba%e6%b5%a6-ai-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 ZhiPu AI 的各种 AI 语言模型。您可以与 ZhiPu AI 语言模型进行交互，并基于 ZhiPuAI 模型创建多语言对话助手。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 ZhiPuAI 创建一个 API 来访问 ZhiPu AI 语言模型。&lt;/p&gt;&#xA;&lt;p&gt;在[&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/login&#34;&gt;智普 AI 注册页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/login&#34;&gt;https://open.bigmodel.cn/login&lt;/a&gt;)创建账号，并在 [&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/usercenter/apikeys&#34;&gt;API Keys 页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/usercenter/apikeys&#34;&gt;https://open.bigmodel.cn/usercenter/apikeys&lt;/a&gt;)生成 token。&lt;/p&gt;&#xA;&lt;p&gt;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.zhipuai.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 &lt;code&gt;API Key&lt;/code&gt;s 页面获取的 &lt;code&gt;API Key&lt;/code&gt; 的值。&lt;/p&gt;&#xA;&lt;p&gt;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.zhipuai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-zhipuai-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 (SpEL) 引用自定义环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;zhipuai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${ZHIPUAI_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export ZHIPUAI_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-zhipuai-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;</description>
    </item>
    <item>
      <title>威维特</title>
      <link>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%A8%81%E7%BB%B4%E7%89%B9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E5%8F%82%E8%80%83/%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%A8%81%E7%BB%B4%E7%89%B9/</guid>
      <description>&lt;h1 id=&#34;威维特&#34;&gt;&#xA;  威维特&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a8%81%e7%bb%b4%e7%89%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将引导您设置 Weaviate VectorStore 来存储文档嵌入并执行相似性搜索。&lt;/p&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://weaviate.io/&#34;&gt;Weaviate&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://weaviate.io/&#34;&gt;https://weaviate.io/&lt;/a&gt;) 是一个开源向量数据库，它允许您存储来自您常用的 ML 模型的数据对象和向量嵌入，并无缝扩展到数十亿个数据对象。它提供了用于存储文档嵌入、内容和元数据的工具，并支持搜索这些嵌入，包括元数据过滤。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;正在运行的 Weaviate 实例。以下选项可用：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Weaviate 云服务 （需要创建帐户和 API 密钥）&lt;/li&gt;&#xA;&lt;li&gt;Docker 容器&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Weaviate 云服务 （需要创建帐户和 API 密钥）&lt;/li&gt;&#xA;&lt;li&gt;Docker 容器&lt;/li&gt;&#xA;&lt;li&gt;如果需要，可以使用 EmbeddingModel 的 API 密钥来生成 WeaviateVectorStore 存储的嵌入。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;依赖项&#34;&gt;&#xA;  依赖项&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%be%9d%e8%b5%96%e9%a1%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;将 Weaviate Vector Store 依赖项添加到您的项目：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-weaviate-store&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者到你的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-weaviate-store&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;配置&#34;&gt;&#xA;  配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;要连接到 Weaviate 并使用 &lt;code&gt;WeaviateVectorStore&lt;/code&gt; ，您需要提供实例的访问详细信息。可以通过 Spring Boot 的 application.properties 提供配置：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
