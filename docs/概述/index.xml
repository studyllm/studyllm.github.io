<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>引言 on Spring AI 1.0.0</title>
    <link>https://studyllm.github.io/docs/%E6%A6%82%E8%BF%B0/</link>
    <description>Recent content in 引言 on Spring AI 1.0.0</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <atom:link href="https://studyllm.github.io/docs/%E6%A6%82%E8%BF%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>人工智能概念</title>
      <link>https://studyllm.github.io/docs/%E6%A6%82%E8%BF%B0/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E6%A6%82%E8%BF%B0/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%A6%82%E5%BF%B5/</guid>
      <description>&lt;h1 id=&#34;人工智能概念&#34;&gt;&#xA;  人工智能概念&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%ba%e5%b7%a5%e6%99%ba%e8%83%bd%e6%a6%82%e5%bf%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节描述Spring AI使用的核心概念。我们建议仔细阅读它，以了解Spring AI是如何实现的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;型号&#34;&gt;&#xA;  型号&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9e%8b%e5%8f%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;人工智能模型是设计用于处理和生成信息的算法，通常模仿人类的认知功能。通过从大型数据集学习模式和见解，这些模型可以做出预测、文本、图像或其他输出，增强跨行业的各种应用。&#xA;有许多不同类型的人工智能模型，每种模型都适用于特定的用例。虽然ChatGPT及其生成人工智能功能通过文本输入和输出吸引了用户，但许多模型和公司提供了不同的输入和输出。在ChatGPT之前，许多人都对文本到图像的生成模型（如Midtrivel和稳定扩散）着迷。&#xA;下表根据输入和输出类型对几个模型进行了分类：&#xA;&#xA;  &lt;img src=&#34;../../images/spring-ai-concepts-model-types.jpg&#34; alt=&#34;模型类型&#34; /&gt;&#xA;Spring AI目前支持将输入和输出处理为语言、图像和音频的模型。上一个表中的最后一行接受文本作为输入，输出数字，更常见的是嵌入文本，并表示AI模型中使用的内部数据结构。Spring AI支持嵌入，以支持更高级的用例。&#xA;将GPT等模型区分开来的是它们的预训练性质，如GPT聊天生成预训练变压器中的“P”所示。此预训练功能将AI转换为一般开发人员工具，不需要广泛的机器学习或模型训练背景。&lt;/p&gt;&#xA;&lt;h2 id=&#34;提示&#34;&gt;&#xA;  提示&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8f%90%e7%a4%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;提示是基于语言的输入的基础，指导人工智能模型产生特定的输出。对于熟悉ChatGPT的人来说，提示符可能看起来仅仅是输入到发送到API的对话框中的文本。然而，它包含的远不止这些。在许多AI模型中，提示的文本不仅仅是简单的字符串。&#xA;ChatGPT的API在提示中有多个文本输入，每个文本输入都被分配了一个角色。例如，有一个系统角色，它告诉模型如何行为，并设置交互的上下文。还有用户角色，通常是来自用户的输入。&#xA;制作有效的提示既是一门艺术，也是一门科学。ChatGPT是为人类对话而设计的。这与使用SQL之类的东西来“提问”有很大的不同。一个人必须与人工智能模型进行沟通，就像与另一个人交谈一样。&#xA;这种交互风格的重要性是如此之大，以至于术语“即时工程”已经成为自己的学科。有一组新兴的技术可以提高提示的有效性。在创建提示符方面投入时间可以显著提高结果输出。&#xA;共享提示已成为一种公共实践，并且正在对此主题进行积极的学术研究。作为一个例子，创建一个有效的提示可能是多么违反直觉（例如，与SQL对比），最近的一篇研究论文发现，你可以使用的最有效的提示之一是从短语“深呼吸，一步一步地工作”开始的。这应该会告诉你为什么语言如此重要。我们还没有完全理解如何最有效地使用该技术的先前迭代，如ChatGPT 3.5，更不用说正在开发的新版本了。&lt;/p&gt;&#xA;&lt;h2 id=&#34;提示模板&#34;&gt;&#xA;  提示模板&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8f%90%e7%a4%ba%e6%a8%a1%e6%9d%bf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;创建有效的提示涉及建立请求的上下文，并用特定于用户输入的值替换请求的部分。&#xA;该过程使用传统的基于文本的模板引擎来快速创建和管理。Spring AI为此使用OSS库StringTemplate。&#xA;例如，考虑简单的提示模板：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Tell me a {adjective} joke about {content}.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在SpringAI中，提示模板可以比作SpringMVC架构中的“视图”。模型对象，通常是java.util。Map，用于填充模板中的占位符。“渲染”字符串成为提供给AI模型的提示的内容。&#xA;发送到模型的提示的特定数据格式具有相当大的可变性。提示符最初是简单的字符串，现在已经发展到包括多个消息，其中每个消息中的每个字符串表示模型的不同角色。&lt;/p&gt;&#xA;&lt;h2 id=&#34;预埋件&#34;&gt;&#xA;  预埋件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%a2%84%e5%9f%8b%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;嵌入是文本、图像或视频的数字表示，用于捕获输入之间的关系。&#xA;嵌入的工作原理是将文本、图像和视频转换为浮点数数组，称为向量。这些向量旨在捕获文本、图像和视频的含义。嵌入数组的长度称为向量的维数。&#xA;通过计算两段文本的向量表示之间的数字距离，应用程序可以确定用于生成嵌入向量的对象之间的相似性。&#xA;&#xA;  &lt;img src=&#34;../../images/spring-ai-embeddings.jpg&#34; alt=&#34;预埋件&#34; /&gt;&#xA;作为一名探索人工智能的Java开发人员，不需要理解复杂的数学理论或这些向量表示背后的特定实现。基本了解它们在人工智能系统中的作用和功能就足够了，特别是当您将人工智能功能集成到应用程序中时。&#xA;嵌入在实际应用中特别相关，如检索增强生成（RAG）模式。它们支持将数据表示为语义空间中的点，这类似于欧几里德几何的2-D空间，但具有更高的维度。这意味着，就像欧几里德几何中平面上的点如何基于它们的坐标来接近或远离一样，在语义空间中，点的接近反映了意义上的相似性。关于相似主题的句子在多维空间中的位置更近，就像图上彼此靠近的点。这种接近性有助于文本分类、语义搜索甚至产品推荐等任务，因为它允许人工智能根据相关概念在扩展的语义景观中的“位置”来识别和分组相关概念。&#xA;您可以将此语义空间视为向量。&lt;/p&gt;&#xA;&lt;h2 id=&#34;代币&#34;&gt;&#xA;  代币&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%a3%e5%b8%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;代币是人工智能模型工作方式的构建块。在输入时，模型将单词转换为标记。在输出时，它们将标记转换回单词。&#xA;在英语中，一个标记大致相当于单词的75%。作为参考，莎士比亚的全部作品，总计约90万字，翻译成约120万个代币。&#xA;&#xA;  &lt;img src=&#34;../../images/spring-ai-concepts-tokens.png&#34; alt=&#34;代币&#34; /&gt;&#xA;也许更重要的是代币=货币。在托管AI模型的上下文中，您的费用由使用的代币数量决定。输入和输出都会影响整个令牌计数。&#xA;此外，模型受到令牌限制的影响，这限制了单个API调用中处理的文本量。该阈值通常被称为“上下文窗口”。模型不处理任何超过此限制的文本。&#xA;例如，ChatGPT3具有4K代币限制，而GPT4提供不同的选项，如8K、16K和32K。人类的Claude AI模型具有100K代币限额，Meta最近的研究产生了1M代币限额模型。&#xA;要使用GPT4总结莎士比亚的作品集，您需要设计软件工程策略来分割数据，并在模型的上下文窗口限制内呈现数据。Spring AI项目可以帮助您完成这项任务。&lt;/p&gt;&#xA;&lt;h2 id=&#34;结构化输出&#34;&gt;&#xA;  结构化输出&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bb%93%e6%9e%84%e5%8c%96%e8%be%93%e5%87%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;AI模型的输出通常以&lt;code&gt;java.lang.String&lt;/code&gt;的形式到达，即使您要求以JSON格式返回。它可能是正确的JSON，但不是JSON数据结构。它只是一个字符串。此外，在提示中询问“for JSON”不是100%准确的。&#xA;这种复杂性导致出现了一个专门的字段，涉及创建提示以产生预期的输出，然后将结果简单的字符串转换为用于应用程序集成的可用数据结构。&#xA;&#xA;  &lt;img src=&#34;../../images/structured-output-architecture.jpg&#34; alt=&#34;结构化输出转换器架构&#34; /&gt;&#xA;&#xA;  &lt;a href=&#34;api/structured-output-converter.html#_structuredoutputconverter&#34;&gt;结构化输出转换&lt;/a&gt;使用精心编制的提示，通常需要与模型进行多次交互，以实现所需的格式。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
