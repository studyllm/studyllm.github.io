<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mistral AI聊天 on Spring AI 1.0.0</title>
    <link>https://studyllm.github.io/docs/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B/mistral%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/</link>
    <description>Recent content in Mistral AI聊天 on Spring AI 1.0.0</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <atom:link href="https://studyllm.github.io/docs/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B/mistral%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mistral AI函数调用（不推荐）</title>
      <link>https://studyllm.github.io/docs/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B/mistral%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/mistral%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E4%B8%8D%E6%8E%A8%E8%8D%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%A8%A1%E5%9E%8B/%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B/mistral%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/mistral%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E4%B8%8D%E6%8E%A8%E8%8D%90/</guid>
      <description>&lt;h1 id=&#34;mistral-ai函数调用不推荐&#34;&gt;&#xA;  Mistral AI函数调用（不推荐）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mistral-ai%e5%87%bd%e6%95%b0%e8%b0%83%e7%94%a8%e4%b8%8d%e6%8e%a8%e8%8d%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;您可以使用&lt;code&gt;MistralAiChatModel&lt;/code&gt;注册自定义Java函数，并让Mistral AI模型智能地选择输出包含参数的JSON对象，以调用一个或多个已注册的函数。&#xA;Mistral AI API不直接调用函数；相反，模型生成JSON，您可以使用它来调用代码中的函数，并将结果返回给模型以完成对话。&#xA;Spring AI提供灵活且用户友好的方法来注册和调用自定义函数。&#xA;作为开发人员，您需要实现一个函数，该函数接受从AI模型发送的函数调用参数，并将结果返回给模型。&#xA;SpringAI使得这一点就像定义一个返回java.util的&lt;code&gt;@Bean&lt;/code&gt;定义一样简单。函数，并在调用&lt;code&gt;ChatModel&lt;/code&gt;时提供bean名称作为选项。&#xA;在引擎盖下，Spring用适当的适配器代码包装POJO（函数），该适配器代码支持与AI模型的交互，从而避免编写冗长的样板代码。&lt;/p&gt;&#xA;&lt;h2 id=&#34;它是如何工作的&#34;&gt;&#xA;  它是如何工作的&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%83%e6%98%af%e5%a6%82%e4%bd%95%e5%b7%a5%e4%bd%9c%e7%9a%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;假设我们希望人工智能模型用它没有的信息来响应，例如，给定位置的当前温度。&#xA;我们可以为AI模型提供关于我们自己函数的元数据，它可以在处理您的提示时使用这些元数据来检索该信息。&#xA;例如，如果在处理提示期间，AI模型确定它需要关于给定位置的温度的额外信息，则它将启动服务器端生成的请求/响应交互。人工智能模型调用客户端函数。&#xA;SpringAI大大简化了您需要编写的代码，以支持函数调用。&lt;/p&gt;&#xA;&lt;h2 id=&#34;快速入门&#34;&gt;&#xA;  快速入门&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bf%ab%e9%80%9f%e5%85%a5%e9%97%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;让我们创建一个聊天机器人，通过调用自己的函数来回答问题。&#xA;当模型需要回答“波士顿的天气怎么样？”这样的问题时，人工智能模型将调用客户端，提供位置值作为传递给函数的参数。这种类似RPC的数据作为JSON传递。&#xA;我们的函数调用一些基于SaaS的天气服务API，并将天气响应返回给模型以完成对话。&#xA;以下&lt;code&gt;MockWeatherService.java&lt;/code&gt;表示天气服务API：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MockWeatherService&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Function&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Request, Response&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; Unit { C, F }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;record&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;(String location, Unit unit) {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;record&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; temp, Unit unit) {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Response &lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;(Request request) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Response(30.&lt;span style=&#34;color:#a6e22e&#34;&gt;0&lt;/span&gt;, Unit.&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;将函数注册为bean&#34;&gt;&#xA;  将函数注册为Bean&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b0%86%e5%87%bd%e6%95%b0%e6%b3%a8%e5%86%8c%e4%b8%babean&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;使用&#xA;  &lt;a href=&#34;../mistralai-chat.html#_auto_configuration&#34;&gt;MistralAiChatModel自动配置&lt;/a&gt;，您可以使用多种方法在Spring上下文中将自定义函数注册为bean。&#xA;我们首先描述最友好的POJO选项。&lt;/p&gt;&#xA;&lt;h2 id=&#34;普通java函数&#34;&gt;&#xA;  普通Java函数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%99%ae%e9%80%9ajava%e5%87%bd%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在这种方法中，您可以像定义任何其他Spring托管对象一样，在应用程序上下文中定义&lt;code&gt;@Bean&lt;/code&gt;。&#xA;在内部，Spring AI &lt;code&gt;ChatModel&lt;/code&gt;将创建&lt;code&gt;ToolCallback&lt;/code&gt;的实例，该实例添加了通过AI模型调用它的逻辑。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
