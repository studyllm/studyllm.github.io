<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>聊天客户端API on Spring AI 1.0.0</title>
    <link>https://studyllm.github.io/docs/%E8%81%8A%E5%A4%A9%E5%AE%A2%E6%88%B7%E7%AB%AFapi/</link>
    <description>Recent content in 聊天客户端API on Spring AI 1.0.0</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <atom:link href="https://studyllm.github.io/docs/%E8%81%8A%E5%A4%A9%E5%AE%A2%E6%88%B7%E7%AB%AFapi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>顾问API</title>
      <link>https://studyllm.github.io/docs/%E8%81%8A%E5%A4%A9%E5%AE%A2%E6%88%B7%E7%AB%AFapi/%E9%A1%BE%E9%97%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E8%81%8A%E5%A4%A9%E5%AE%A2%E6%88%B7%E7%AB%AFapi/%E9%A1%BE%E9%97%AE/</guid>
      <description>&lt;h1 id=&#34;顾问api&#34;&gt;&#xA;  顾问API&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%a1%be%e9%97%aeapi&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI Advisors API提供了一种灵活而强大的方法来拦截、修改和增强Spring应用程序中的AI驱动交互。通过利用Advisors API，开发人员可以创建更复杂、可重用和可维护的AI组件。&#xA;关键好处包括封装重复的生成人工智能模式，转换发送到大型语言模型（LLM）的数据，以及提供跨各种模型和用例的可移植性。&#xA;您可以使用&#xA;  &lt;a href=&#34;chatclient.html#_advisor_configuration_in_chatclient&#34;&gt;ChatClient API&lt;/a&gt;配置现有顾问，如下例所示：&#xA;建议在构建时使用构建器的defaultAdvisors（）方法注册顾问。&#xA;顾问还参与Observability堆栈，因此您可以查看与其执行相关的度量和跟踪。&#xA;&#xA;  &lt;a href=&#34;retrieval-augmented-generation.html#_questionansweradvisor&#34;&gt;了解问答顾问&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;核心组件&#34;&gt;&#xA;  核心组件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%b8%e5%bf%83%e7%bb%84%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;该API由用于非流式方案的&lt;code&gt;CallAroundAdvisor&lt;/code&gt;和CallArroundAdvisorChain组成，以及用于流式场景的StreamAroundadisor和StreamArroundadvisorChain。它还包括&lt;code&gt;AdvisedRequest&lt;/code&gt;来表示未密封的提示请求，&lt;code&gt;AdvisedResponse&lt;/code&gt;用于聊天完成响应。两者都持有建议上下文，以便在顾问链中共享状态。&#xA;&#xA;  &lt;img src=&#34;../../images/advisors-api-classes.jpg&#34; alt=&#34;顾问API类&#34; /&gt;&#xA;nextAroundCall（）和nextArroundStream（）是关键的advisor方法，通常执行操作，如检查未密封的提示数据、自定义和增强提示数据、调用advisor链中的下一个实体、可选地阻止请求、检查聊天完成响应以及抛出异常以指示处理错误。&#xA;此外，getOrder（）方法确定链中的顾问顺序，而getName（）提供唯一的顾问名称。&#xA;由Spring AI框架创建的Advisor链允许按其getOrder（）值排序的多个顾问的顺序调用。首先执行较低的值。自动添加的最后一个advisor将请求发送到LLM。&#xA;以下流程图说明了顾问链和聊天模型之间的交互：&#xA;&#xA;  &lt;img src=&#34;../../images/advisors-flow.jpg&#34; alt=&#34;顾问API流程&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;顾问订单&#34;&gt;&#xA;  顾问订单&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%a1%be%e9%97%ae%e8%ae%a2%e5%8d%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;链中顾问的执行顺序由getOrder（）方法确定。理解要点：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;首先执行具有较低阶值的顾问。&lt;/li&gt;&#xA;&lt;li&gt;advisor链作为堆栈运行：&lt;/li&gt;&#xA;&lt;li&gt;链中的第一个顾问是第一个处理请求的顾问。&lt;/li&gt;&#xA;&lt;li&gt;它也是最后一个处理响应的。&lt;/li&gt;&#xA;&lt;li&gt;控制执行顺序：&lt;/li&gt;&#xA;&lt;li&gt;将订单设置为接近Ordered。HIGHEST_PRECEDENCE，确保在链中首先执行顾问（首先用于请求处理，最后用于响应处理）。&lt;/li&gt;&#xA;&lt;li&gt;将订单设置为接近Ordered。LOWEST_PRECEDENCE，确保advisor在链中的最后一个执行（最后一个用于请求处理，首先用于响应处理）。&lt;/li&gt;&#xA;&lt;li&gt;较高的值被解释为较低的优先级。&lt;/li&gt;&#xA;&lt;li&gt;如果多个顾问具有相同的顺序值，则不能保证其执行顺序。&#xA;作为提醒，这里是Spring &lt;code&gt;Ordered&lt;/code&gt;接口的语义：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Ordered&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Constant for the highest precedence value.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @see java.lang.Integer#MIN_VALUE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; HIGHEST_PRECEDENCE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Integer.&lt;span style=&#34;color:#a6e22e&#34;&gt;MIN_VALUE&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Constant for the lowest precedence value.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @see java.lang.Integer#MAX_VALUE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; LOWEST_PRECEDENCE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Integer.&lt;span style=&#34;color:#a6e22e&#34;&gt;MAX_VALUE&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Get the order value of this object.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * &amp;lt;p&amp;gt;Higher values are interpreted as lower priority. As a consequence,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * the object with the lowest value has the highest priority (somewhat&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * analogous to Servlet {@code load-on-startup} values).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * &amp;lt;p&amp;gt;Same order values will result in arbitrary sort positions for the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * affected objects.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return the order value&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @see #HIGHEST_PRECEDENCE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @see #LOWEST_PRECEDENCE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getOrder&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;api概述&#34;&gt;&#xA;  API概述&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#api%e6%a6%82%e8%bf%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;主Advisor接口位于包org.springframework.ai.chat.client.Advisor.api中。以下是创建自己的顾问时将遇到的关键界面：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
