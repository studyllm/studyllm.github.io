<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>引言 on Spring AI 1.0.0</title>
    <link>https://studyllm.github.io/</link>
    <description>Recent content in 引言 on Spring AI 1.0.0</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <atom:link href="https://studyllm.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AI 概念</title>
      <link>https://studyllm.github.io/docs/overview-%E6%A6%82%E8%BF%B0/ai-concepts-ai-%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/overview-%E6%A6%82%E8%BF%B0/ai-concepts-ai-%E6%A6%82%E5%BF%B5/</guid>
      <description>&lt;h1 id=&#34;ai-概念&#34;&gt;&#xA;  AI 概念&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ai-%e6%a6%82%e5%bf%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节介绍 Spring AI 使用的核心概念。我们建议仔细阅读它，以了解 Spring AI 是如何实现的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;模型&#34;&gt;&#xA;  模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;AI 模型是旨在处理和生成信息的算法，通常模仿人类的认知功能。通过从大型数据集中学习模式和见解，这些模型可以进行预测、文本、图像或其他输出，从而增强跨行业的各种应用程序。&#xA;有许多不同类型的 AI 模型，每种模型都适用于特定的使用案例。虽然 ChatGPT 及其生成式 AI 功能通过文本输入和输出吸引了用户，但许多模型和公司都提供了不同的输入和输出。在 ChatGPT 之前，许多人对 Midjourney 和 Stable Diffusion 等文本到图像生成模型着迷。&#xA;下表根据模型的输入和输出类型对多个模型进行分类：&#xA;&#xA;  &lt;img src=&#34;./images/spring-ai-concepts-model-types.jpg&#34; alt=&#34;&#34; /&gt;&#xA;Spring AI 目前支持将输入和输出处理为语言、图像和音频的模型。上表中的最后一行接受文本作为输入并输出数字，通常称为嵌入文本，表示 AI 模型中使用的内部数据结构。Spring AI 支持嵌入以支持更高级的用例。&#xA;像 GPT 这样的模型的不同之处在于它们的预训练性质，如 GPT 中的“P”所示——聊天生成预训练转换器。此预训练功能将 AI 转换为通用的开发人员工具，不需要广泛的机器学习或模型训练背景。&lt;/p&gt;&#xA;&lt;h2 id=&#34;提示&#34;&gt;&#xA;  提示&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8f%90%e7%a4%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;提示是基于语言的输入的基础，这些输入可指导 AI 模型生成特定输出。对于熟悉 ChatGPT 的人来说，提示可能看起来只是在发送到 API 的对话框中输入的文本。然而，它包含的远不止于此。在许多 AI 模型中，提示的文本不仅仅是一个简单的字符串。&#xA;ChatGPT 的 API 在一个提示中有多个文本输入，每个文本输入都分配了一个角色。例如，有 system 角色，它告诉模型如何行为并设置交互的上下文。还有 user role，通常是来自用户的 Importing。&#xA;制作有效的提示既是一门艺术，也是一门科学。ChatGPT 专为人类对话而设计。这与使用 SQL 之类的东西来 “ask a question” 完全不同。一个人必须与 AI 模型进行交流，类似于与另一个人交谈。&#xA;正是这种交互方式的重要性，以至于“Prompt Engineering”一词已经成为一门独立的学科。有一系列新兴的技术可以提高提示的有效性。投入时间制作提示可以大大提高结果输出。&#xA;分享提示已成为一种公共实践，并且正在积极地进行关于这一主题的学术研究。例如，创建有效的提示（例如，与 SQL 形成对比）是多么违反直觉， [&#xA;  &lt;a href=&#34;https://arxiv.org/abs/2205.11916&#34;&gt;最近的一篇研究论文&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://arxiv.org/abs/2205.11916&#34;&gt;https://arxiv.org/abs/2205.11916&lt;/a&gt;)发现，您可以使用的最有效的提示之一以短语“深呼吸并逐步完成此工作”开头。这应该可以告诉你为什么语言如此重要。我们还不完全了解如何最有效地利用这项技术的先前迭代，例如 ChatGPT 3.5，更不用说正在开发的新版本了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure AI 服务</title>
      <link>https://studyllm.github.io/docs/vector-databases/azure-ai-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/vector-databases/azure-ai-service/</guid>
      <description>&lt;h1 id=&#34;azure-ai-服务&#34;&gt;&#xA;  Azure AI 服务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#azure-ai-%e6%9c%8d%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本部分将指导你设置 &lt;code&gt;AzureVectorStore&lt;/code&gt; 以存储文档嵌入并使用 Azure AI 搜索服务执行相似性搜索。&#xA;[&#xA;  &lt;a href=&#34;https://azure.microsoft.com/en-us/products/ai-services/ai-search/&#34;&gt;Azure AI 搜索&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://azure.microsoft.com/en-us/products/ai-services/ai-search/&#34;&gt;https://azure.microsoft.com/en-us/products/ai-services/ai-search/&lt;/a&gt;)是一种多功能的云托管云信息检索系统，是 Microsoft 更大的 AI 平台的一部分。除其他功能外，它还允许用户使用基于向量的存储和检索来查询信息。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;配置&#34;&gt;&#xA;  配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;启动时，&lt;code&gt;AzureVectorStore&lt;/code&gt; 可以尝试在 AI 搜索服务实例中创建新索引，前提是您通过在构造函数中将相关的 &lt;code&gt;initialize-schema&lt;/code&gt; &lt;code&gt;布尔&lt;/code&gt;属性设置为 &lt;code&gt;true&lt;/code&gt;，或者如果使用 Spring Boot，则设置 &amp;hellip;&lt;code&gt;initialize-schema&lt;/code&gt;=&lt;code&gt;true&lt;/code&gt; 在 &lt;code&gt;application.properties&lt;/code&gt; 文件中。&#xA;或者，您可以手动创建索引。&#xA;若要设置 AzureVectorStore，需要从上述先决条件中检索到的设置以及索引名称：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Azure AI 搜索终结点&lt;/li&gt;&#xA;&lt;li&gt;Azure AI 搜索密钥&lt;/li&gt;&#xA;&lt;li&gt;（可选）Azure OpenAI API 终结点&lt;/li&gt;&#xA;&lt;li&gt;（可选）Azure OpenAI API 密钥&#xA;您可以将这些值作为作系统环境变量提供。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export AZURE_AI_SEARCH_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;My AI Search API Key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export AZURE_AI_SEARCH_ENDPOINT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;My AI Search Index&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export OPENAI_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;My Azure AI API Key&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Optional&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;依赖&#34;&gt;&#xA;  依赖&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%be%9d%e8%b5%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;将这些依赖项添加到您的项目中：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure OpenAI 听录</title>
      <link>https://studyllm.github.io/docs/models/audio-models/transcription-api/azure-openai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/audio-models/transcription-api/azure-openai/</guid>
      <description>&lt;h1 id=&#34;azure-openai-听录&#34;&gt;&#xA;  Azure OpenAI 听录&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#azure-openai-%e5%90%ac%e5%bd%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 [&#xA;  &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/ai-services/openai/whisper-quickstart?tabs=command-line%2Cpython-new&amp;amp;pivots=rest-api&#34;&gt;Azure Whisper 模型&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/ai-services/openai/whisper-quickstart?tabs=command-line%2Cpython-new&amp;amp;pivots=rest-api&#34;&gt;https://learn.microsoft.com/en-us/azure/ai-services/openai/whisper-quickstart?tabs=command-line%2Cpython-new&amp;pivots=rest-api&lt;/a&gt;) 。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;从 [&#xA;  &lt;a href=&#34;https://portal.azure.com&#34;&gt;Azure 门户&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://portal.azure.com&#34;&gt;https://portal.azure.com&lt;/a&gt;)上的 Azure OpenAI 服务部分获取 Azure OpenAI  &lt;code&gt;终结点&lt;/code&gt;和 &lt;code&gt;API 密钥&lt;/code&gt; 。Spring AI 定义了一个名为 spring.ai.azure.openai.&lt;code&gt;api-key&lt;/code&gt; config property 的配置属性，您应该将其设置为从 Azure 获取的 &lt;code&gt;API Key&lt;/code&gt; 的值。还有一个名为 spring.ai.azure.openai.&lt;code&gt;endpoint&lt;/code&gt; 的配置属性，您应该将其设置为在 Azure 中预置模型时获取的终端节点 URL。导出环境变量是设置该配置属性的一种方法：&lt;/p&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Azure OpenAI 听录生成客户端提供 Spring Boot 自动配置。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-model-azure-openai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或您的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-model-azure-openai&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;转录属性&#34;&gt;&#xA;  转录属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bd%ac%e5%bd%95%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;前缀 &lt;code&gt;spring.ai.openai.audio.transcription&lt;/code&gt; 用作属性前缀，允许您为 OpenAI 图像模型配置重试机制。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure OpenAI 映像生成</title>
      <link>https://studyllm.github.io/docs/models/image-models/azure-openai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/image-models/azure-openai/</guid>
      <description>&lt;h1 id=&#34;azure-openai-映像生成&#34;&gt;&#xA;  Azure OpenAI 映像生成&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#azure-openai-%e6%98%a0%e5%83%8f%e7%94%9f%e6%88%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 DALL-E，这是 Azure OpenAI 中的图像生成模型。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;从 [&#xA;  &lt;a href=&#34;https://portal.azure.com&#34;&gt;Azure 门户&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://portal.azure.com&#34;&gt;https://portal.azure.com&lt;/a&gt;)上的 Azure OpenAI 服务部分获取 Azure OpenAI  &lt;code&gt;终结点&lt;/code&gt;和 &lt;code&gt;API 密钥&lt;/code&gt; 。&#xA;Spring AI 定义了两个配置属性：&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置这些配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.azure.openai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-azure-openai-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.azure.openai.endpoint&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-azure-openai-endpoint&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 （SpEL） 来引用自定义环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;azure&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;openai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${AZURE_OPENAI_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;endpoint&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${AZURE_OPENAI_ENDPOINT}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export AZURE_OPENAI_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-azure-openai-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export AZURE_OPENAI_ENDPOINT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-azure-openai-endpoint&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置这些配置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve API key and endpoint from secure sources or environment variables&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String apiKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AZURE_OPENAI_API_KEY&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String endpoint &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AZURE_OPENAI_ENDPOINT&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;部署名称&#34;&gt;&#xA;  部署名称&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%83%a8%e7%bd%b2%e5%90%8d%e7%a7%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;要使用运行 Azure AI 应用程序，请通过 [Azure AI 门户]（[&#xA;  &lt;a href=&#34;https://oai.azure.com/portal&#34;&gt;oai.azure.com/portal&lt;/a&gt;](https://&#xA;  &lt;a href=&#34;https://oai.azure.com/portal&#34;&gt;oai.azure.com/portal&lt;/a&gt;)） 创建 Azure AI 部署。&#xA;在 Azure 中，每个客户端都必须指定&lt;code&gt;一个部署名称&lt;/code&gt;才能连接到 Azure OpenAI 服务。&#xA;必须了解 &lt;code&gt;Deployment Name&lt;/code&gt; 与您选择部署的模型不同&#xA;例如，可以将名为“MyImgAiDeployment”的部署配置为使用 &lt;code&gt;Dalle3&lt;/code&gt; 模型或 &lt;code&gt;Dalle2&lt;/code&gt; 模型。&#xA;现在，为了简单起见，您可以使用以下设置创建部署：&#xA;部署名称：&lt;code&gt;MyImgAiDeployment&lt;/code&gt;&#xA;模型： &lt;code&gt;Dalle3&lt;/code&gt;&#xA;此 Azure 配置将与 Spring Boot Azure AI Starter 及其自动配置功能的默认配置保持一致。&#xA;如果你使用不同的 Deployment Name，请相应地更新 configuration 属性：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cohere 嵌入</title>
      <link>https://studyllm.github.io/docs/models/embedding-models/amazon-bedrock/cohere/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/embedding-models/amazon-bedrock/cohere/</guid>
      <description>&lt;h1 id=&#34;cohere-嵌入&#34;&gt;&#xA;  Cohere 嵌入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cohere-%e5%b5%8c%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;提供 Bedrock Cohere Embedding 模型。将生成式 AI 功能集成到基本应用程序和工作流中，以改善业务成果。&#xA;[&#xA;  &lt;a href=&#34;https://aws.amazon.com/bedrock/cohere-command-embed/&#34;&gt;AWS Bedrock Cohere 模型页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://aws.amazon.com/bedrock/cohere-command-embed/&#34;&gt;https://aws.amazon.com/bedrock/cohere-command-embed/&lt;/a&gt;)和 [&#xA;  &lt;a href=&#34;https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-bedrock.html&#34;&gt;Amazon Bedrock 用户指南&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-bedrock.html&#34;&gt;https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-bedrock.html&lt;/a&gt;)包含有关如何使用 AWS 托管模型的详细信息。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;请参阅 [&#xA;  &lt;a href=&#34;../bedrock.html&#34;&gt;Amazon Bedrock 上的 Spring AI 文档&lt;/a&gt;](../bedrock.html)以设置 API 访问。&lt;/p&gt;&#xA;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 工件发布在 Maven Central 和 Spring Snapshot 存储库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;Artifact Repositories&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些存储库添加到您的构建系统中。&#xA;为了帮助进行[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)，Spring AI 提供了一个 BOM（物料清单），以确保在整个项目中使用一致的 Spring AI 版本。请参阅[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)部分，将 Spring AI BOM 添加到您的构建系统中。&lt;/p&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;将 &lt;code&gt;spring-ai-starter-model-bedrock&lt;/code&gt; 依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-model-bedrock&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或您的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ETL 管道</title>
      <link>https://studyllm.github.io/docs/retrieval-augmented-generation-rag/etl-pipeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/retrieval-augmented-generation-rag/etl-pipeline/</guid>
      <description>&lt;h1 id=&#34;etl-管道&#34;&gt;&#xA;  ETL 管道&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#etl-%e7%ae%a1%e9%81%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;提取、转换和加载 （ETL） 框架是检索增强生成 （RAG） 用例中数据处理的主干。&#xA;ETL 管道编排从原始数据源到结构化向量存储的流程，确保数据处于最佳格式，以便 AI 模型进行检索。&#xA;RAG 用例是文本，通过从数据主体中检索相关信息来提高生成输出的质量和相关性，从而增强生成模型的功能。&lt;/p&gt;&#xA;&lt;h2 id=&#34;api-概述&#34;&gt;&#xA;  API 概述&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#api-%e6%a6%82%e8%bf%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ETL 管道创建、转换和存储 &lt;code&gt;Document&lt;/code&gt; 实例。&#xA;&#xA;  &lt;img src=&#34;./images/spring-ai-document1-api.jpg&#34; alt=&#34;&#34; /&gt;&#xA;&lt;code&gt;Document&lt;/code&gt; 类包含文本、元数据和可选的其他媒体类型，如图像、音频和视频。&#xA;ETL 管道有三个主要组件：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;实现 Supplier&amp;lt;List&lt;Document&gt;&amp;gt; 的 DocumentReader&lt;/li&gt;&#xA;&lt;li&gt;DocumentTransformer 实现 Function&amp;lt;List&lt;Document&gt;, List&lt;Document&gt;&amp;gt;&lt;/li&gt;&#xA;&lt;li&gt;实现 Consumer&amp;lt;List&lt;Document&gt;&amp;gt; 的 DocumentWriter&#xA;&lt;code&gt;Document&lt;/code&gt; 类内容是在 &lt;code&gt;Document&lt;/code&gt;Reader 的帮助下从 PDF、文本文件和其他文档类型创建的。&#xA;要构建简单的 ETL 管道，您可以将每种类型的实例链接在一起。&#xA;&#xA;  &lt;img src=&#34;./images/etl-pipeline.jpg&#34; alt=&#34;&#34; /&gt;&#xA;假设我们有这三种 ETL 类型的以下实例&lt;/li&gt;&#xA;&lt;li&gt;PagePdfDocumentReader  的实现&lt;/li&gt;&#xA;&lt;li&gt;TokenTextSplitter，DocumentTransformer 的实现&lt;/li&gt;&#xA;&lt;li&gt;VectorStore 是 DocumentWriter 的实现&#xA;要执行将数据基本加载到 Vector Database 中以用于 Retrieval Augmented Generation 模式的作，请使用以下 Java 函数样式语法代码。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vectorStore.&lt;span style=&#34;color:#a6e22e&#34;&gt;accept&lt;/span&gt;(tokenTextSplitter.&lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;(pdfReader.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;()));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者，您可以使用对域更自然地表达的方法名称&lt;/p&gt;</description>
    </item>
    <item>
      <title>MCP 客户端启动启动器</title>
      <link>https://studyllm.github.io/docs/model-context-protocol-mcp/mcp-client-boot-starters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/model-context-protocol-mcp/mcp-client-boot-starters/</guid>
      <description>&lt;h1 id=&#34;mcp-客户端启动启动器&#34;&gt;&#xA;  MCP 客户端启动启动器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mcp-%e5%ae%a2%e6%88%b7%e7%ab%af%e5%90%af%e5%8a%a8%e5%90%af%e5%8a%a8%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI MCP（模型上下文协议）客户端引导启动器为 Spring Boot 应用程序中的 MCP 客户端功能提供自动配置。它支持具有各种传输选项的同步和异步客户端实现。&#xA;MCP Client Boot Starter 提供：&lt;/p&gt;&#xA;&lt;h2 id=&#34;首先&#34;&gt;&#xA;  首先&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%a6%96%e5%85%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;标准-mcp-客户端&#34;&gt;&#xA;  标准 MCP 客户端&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%87%e5%87%86-mcp-%e5%ae%a2%e6%88%b7%e7%ab%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-mcp-client&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;标准启动器通过 &lt;code&gt;STDIO&lt;/code&gt;（进程内）和/或 &lt;code&gt;SSE&lt;/code&gt;（远程）传输同时连接到一个或多个 MCP 服务器。&lt;code&gt;SSE&lt;/code&gt; 连接使用基于 HttpClient 的传输实现。与 MCP 服务器的每次连接都会创建一个新的 MCP 客户端实例。您可以选择 &lt;code&gt;SYNC&lt;/code&gt; 或 A&lt;code&gt;SYNC&lt;/code&gt; MCP 客户端（注意：您不能混合使用 sync 和 &lt;code&gt;async&lt;/code&gt; 客户端）。对于生产部署，我们建议将基于 WebFlux 的 &lt;code&gt;SSE&lt;/code&gt; 连接与 &lt;code&gt;spring-ai-starter-mcp-client-webflux&lt;/code&gt; .&lt;/p&gt;&#xA;&lt;h2 id=&#34;webflux-客户端&#34;&gt;&#xA;  WebFlux 客户端&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#webflux-%e5%ae%a2%e6%88%b7%e7%ab%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;WebFlux 启动器提供与标准启动器类似的功能，但使用基于 WebFlux 的 SSE 传输实现。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-mcp-client-webflux&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;配置属性&#34;&gt;&#xA;  配置属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%85%8d%e7%bd%ae%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;通用属性&#34;&gt;&#xA;  通用属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%80%9a%e7%94%a8%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;公共属性以 &lt;code&gt;spring.ai.mcp.client&lt;/code&gt; 为前缀：&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenAI 文本转语音 （TTS）</title>
      <link>https://studyllm.github.io/docs/models/audio-models/text-to-speech-tts-api/openai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/audio-models/text-to-speech-tts-api/openai/</guid>
      <description>&lt;h1 id=&#34;openai-文本转语音-tts&#34;&gt;&#xA;  OpenAI 文本转语音 （TTS）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#openai-%e6%96%87%e6%9c%ac%e8%bd%ac%e8%af%ad%e9%9f%b3-tts&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;介绍&#34;&gt;&#xA;  介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;音频 API 提供基于 OpenAI 的 TTS（文本到语音转换）模型的语音终端节点，使用户能够：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;讲述一篇书面博客文章。&lt;/li&gt;&#xA;&lt;li&gt;生成多种语言的语音音频。&lt;/li&gt;&#xA;&lt;li&gt;使用流提供实时音频输出。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 OpenAI 文本转语音客户端提供 Spring Boot 自动配置。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-model-openai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或复制到您的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-model-openai&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;语音属性&#34;&gt;&#xA;  语音属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%af%ad%e9%9f%b3%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;连接属性&#34;&gt;&#xA;  连接属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%9e%e6%8e%a5%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;前缀 &lt;code&gt;spring.ai.openai&lt;/code&gt; 用作允许您连接到 OpenAI 的属性前缀。&lt;/p&gt;&#xA;&lt;h2 id=&#34;配置属性&#34;&gt;&#xA;  配置属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%85%8d%e7%bd%ae%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;前缀 &lt;code&gt;spring.ai.openai.audio.speech&lt;/code&gt; 用作属性前缀，允许您配置 OpenAI Text-to-Speech 客户端。&lt;/p&gt;&#xA;&lt;h2 id=&#34;运行时选项&#34;&gt;&#xA;  运行时选项&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%90%e8%a1%8c%e6%97%b6%e9%80%89%e9%a1%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;OpenAiAudioSpeechOptions&lt;/code&gt; 类提供了在发出文本转语音请求时要使用的选项。在启动时，将使用 &lt;code&gt;spring.ai.openai.audio.speech&lt;/code&gt; 指定的选项，但你可以在运行时覆盖这些选项。&#xA;例如：&lt;/p&gt;</description>
    </item>
    <item>
      <title>VertexAI Gemini 聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/google-vertexai/vertexai-gemini/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/google-vertexai/vertexai-gemini/</guid>
      <description>&lt;h1 id=&#34;vertexai-gemini-聊天&#34;&gt;&#xA;  VertexAI Gemini 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#vertexai-gemini-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/docs/generative-ai/multimodal/overview&#34;&gt;Vertex AI Gemini API&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/docs/generative-ai/multimodal/overview&#34;&gt;https://cloud.google.com/vertex-ai/docs/generative-ai/multimodal/overview&lt;/a&gt;) 允许开发人员使用 Gemini 模型构建生成式 AI 应用程序。[&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/docs/generative-ai/multimodal/overview&#34;&gt;Vertex AI Gemini API&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/docs/generative-ai/multimodal/overview&#34;&gt;https://cloud.google.com/vertex-ai/docs/generative-ai/multimodal/overview&lt;/a&gt;) 支持将多模态提示作为输入和输出文本或代码。多模态模型是一种能够处理来自多种模态的信息（包括图像、视频和文本）的模型。例如，您可以向模型发送一盘饼干的照片，并要求它为您提供这些饼干的配方。&#xA;Gemini 是由 Google DeepMind 开发的一系列生成式 AI 模型，专为多模式用例而设计。Gemini API 允许您访问 [&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/generative-ai/docs/models/gemini/2-0-flash&#34;&gt;Gemini 2.0 Flash&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/generative-ai/docs/models/gemini/2-0-flash&#34;&gt;https://cloud.google.com/vertex-ai/generative-ai/docs/models/gemini/2-0-flash&lt;/a&gt;) 和 [&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/generative-ai/docs/models/gemini/2-0-flash&#34;&gt;Gemini 2.0 Flash&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/generative-ai/docs/models/gemini/2-0-flash%29-Lite&#34;&gt;https://cloud.google.com/vertex-ai/generative-ai/docs/models/gemini/2-0-flash)-Lite&lt;/a&gt;。有关 Vertex AI Gemini API 模型的规格，请参阅[&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/generative-ai/docs/models#gemini-models&#34;&gt;模型信息&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/generative-ai/docs/models#gemini-models&#34;&gt;https://cloud.google.com/vertex-ai/generative-ai/docs/models#gemini-models&lt;/a&gt;) 。&#xA;&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/inference&#34;&gt;Gemini API 参考&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;安装适合您作系统的 gcloud CLI。&lt;/li&gt;&#xA;&lt;li&gt;通过运行以下命令进行身份验证。将 PROJECT_ID 替换为您的 Google Cloud 项目 ID，将 ACCOUNT 替换为您的 Google Cloud 用户名。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcloud config set project &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PROJECT_ID&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcloud auth application&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; login &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ACCOUNT&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 VertexAI Gemini Chat 客户端提供 Spring Boot 自动配置。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 或 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件中：&lt;/p&gt;</description>
    </item>
    <item>
      <title>从 FunctionCallback 迁移到 ToolCallback API</title>
      <link>https://studyllm.github.io/docs/upgrade-notes-%E5%8D%87%E7%BA%A7%E8%AF%B4%E6%98%8E/migrating-functioncallback-to-toolcallback-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/upgrade-notes-%E5%8D%87%E7%BA%A7%E8%AF%B4%E6%98%8E/migrating-functioncallback-to-toolcallback-api/</guid>
      <description>&lt;h1 id=&#34;从-functioncallback-迁移到-toolcallback-api&#34;&gt;&#xA;  从 FunctionCallback 迁移到 ToolCallback API&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%8e-functioncallback-%e8%bf%81%e7%a7%bb%e5%88%b0-toolcallback-api&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本指南可帮助您从已弃用的 &lt;code&gt;FunctionCallback&lt;/code&gt; API 迁移到 Spring AI 中的新 &lt;code&gt;ToolCallback&lt;/code&gt; API。有关新 API 的更多信息，请查看 [&#xA;  &lt;a href=&#34;tools.html&#34;&gt;Tools Calling&lt;/a&gt;](tools.html) 文档。&lt;/p&gt;&#xA;&lt;h2 id=&#34;变更概述&#34;&gt;&#xA;  变更概述&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%98%e6%9b%b4%e6%a6%82%e8%bf%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;这些更改是改进和扩展 Spring AI 中的工具调用功能的更广泛努力的一部分。除其他外，新 API 从 “functions” 改为 “tools” 术语，以更好地与行业惯例保持一致。这涉及多项 API 更改，同时通过已弃用的方法保持向后兼容性。&lt;/p&gt;&#xA;&lt;h2 id=&#34;主要变化&#34;&gt;&#xA;  主要变化&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%bb%e8%a6%81%e5%8f%98%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;迁移示例&#34;&gt;&#xA;  迁移示例&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%81%e7%a7%bb%e7%a4%ba%e4%be%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;1-基本函数回调&#34;&gt;&#xA;  1. 基本函数回调&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%9f%ba%e6%9c%ac%e5%87%bd%e6%95%b0%e5%9b%9e%e8%b0%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;以前：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FunctionCallback.&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;getCurrentWeather&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MockWeatherService())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;description&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Get the weather in location&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;inputType&lt;/span&gt;(MockWeatherService.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;后：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FunctionToolCallback.&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;getCurrentWeather&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MockWeatherService())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;description&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Get the weather in location&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;inputType&lt;/span&gt;(MockWeatherService.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-chatclient-使用情况&#34;&gt;&#xA;  2. ChatClient 使用情况&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-chatclient-%e4%bd%bf%e7%94%a8%e6%83%85%e5%86%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;以前：&lt;/p&gt;</description>
    </item>
    <item>
      <title>聊天模型比较</title>
      <link>https://studyllm.github.io/docs/models/chat-models/chat-models-comparison/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/chat-models-comparison/</guid>
      <description>&lt;h1 id=&#34;聊天模型比较&#34;&gt;&#xA;  聊天模型比较&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%81%8a%e5%a4%a9%e6%a8%a1%e5%9e%8b%e6%af%94%e8%be%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;下表比较了 Spring AI 支持的各种聊天模型，详细介绍了它们的功能：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;多模态 ：模型可以处理的输入类型（例如，文本、图像、音频、视频）。&lt;/li&gt;&#xA;&lt;li&gt;Tools/Function Calling：模型是否支持函数调用或工具使用。&lt;/li&gt;&#xA;&lt;li&gt;Streaming：如果模型提供 Streaming 响应。&lt;/li&gt;&#xA;&lt;li&gt;Retry：支持重试机制。&lt;/li&gt;&#xA;&lt;li&gt;可观测性 ：用于监视和调试的功能。&lt;/li&gt;&#xA;&lt;li&gt;内置 JSON： 对 JSON 输出的原生支持。&lt;/li&gt;&#xA;&lt;li&gt;本地部署：模型是否可以在本地运行。&lt;/li&gt;&#xA;&lt;li&gt;OpenAI API 兼容性：如果模型与 OpenAI 的 API 兼容。&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>适度</title>
      <link>https://studyllm.github.io/docs/models/moderation-models/openai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/moderation-models/openai/</guid>
      <description>&lt;h1 id=&#34;适度&#34;&gt;&#xA;  适度&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%80%82%e5%ba%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;介绍&#34;&gt;&#xA;  介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 支持 OpenAI 的审核模型，该模型允许您检测文本中可能有害或敏感的内容。请按照[&#xA;  &lt;a href=&#34;https://platform.openai.com/docs/guides/moderation&#34;&gt;本指南&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://platform.openai.com/docs/guides/moderation&#34;&gt;https://platform.openai.com/docs/guides/moderation&lt;/a&gt;)了解有关 OpenAI 审核模型的更多信息。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 OpenAI 审核模型提供 Spring Boot 自动配置。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-model-openai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或复制到您的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-model-openai&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;审核属性&#34;&gt;&#xA;  审核属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%a1%e6%a0%b8%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;连接属性&#34;&gt;&#xA;  连接属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%9e%e6%8e%a5%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;前缀 spring.ai.openai 用作允许您连接到 OpenAI 的属性前缀。&lt;/p&gt;&#xA;&lt;h2 id=&#34;配置属性&#34;&gt;&#xA;  配置属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%85%8d%e7%bd%ae%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;前缀 spring.ai.openai.moderation 用作配置 OpenAI 审核模型的属性前缀。&lt;/p&gt;&#xA;&lt;h2 id=&#34;运行时选项&#34;&gt;&#xA;  运行时选项&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%90%e8%a1%8c%e6%97%b6%e9%80%89%e9%a1%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;OpenAiModerationOptions 类提供了在发出审核请求时要使用的选项。在启动时，将使用 spring.ai.openai.moderation 指定的选项，但您可以在运行时覆盖这些选项。&#xA;例如：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OpenAiModerationOptions moderationOptions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; OpenAiModerationOptions.&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;model&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text-moderation-latest&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ModerationPrompt moderationPrompt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ModerationPrompt(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Text to be moderated&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;moderationOptions&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ModerationResponse response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; openAiModerationModel.&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;moderationPrompt&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Access the moderation results&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Moderation moderation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; moderationResponse.&lt;span style=&#34;color:#a6e22e&#34;&gt;getResult&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;getOutput&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Print general information&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Moderation ID: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; moderation.&lt;span style=&#34;color:#a6e22e&#34;&gt;getId&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Model used: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; moderation.&lt;span style=&#34;color:#a6e22e&#34;&gt;getModel&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Access the moderation results (there&amp;#39;s usually only one, but it&amp;#39;s a list)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (ModerationResult result : moderation.&lt;span style=&#34;color:#a6e22e&#34;&gt;getResults&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\nModeration Result:&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Flagged: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; result.&lt;span style=&#34;color:#a6e22e&#34;&gt;isFlagged&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Access categories&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Categories categories &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getCategories&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\nCategories:&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sexual: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; categories.&lt;span style=&#34;color:#a6e22e&#34;&gt;isSexual&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hate: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; categories.&lt;span style=&#34;color:#a6e22e&#34;&gt;isHate&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Harassment: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; categories.&lt;span style=&#34;color:#a6e22e&#34;&gt;isHarassment&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Self-Harm: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; categories.&lt;span style=&#34;color:#a6e22e&#34;&gt;isSelfHarm&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sexual/Minors: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; categories.&lt;span style=&#34;color:#a6e22e&#34;&gt;isSexualMinors&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hate/Threatening: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; categories.&lt;span style=&#34;color:#a6e22e&#34;&gt;isHateThreatening&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Violence/Graphic: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; categories.&lt;span style=&#34;color:#a6e22e&#34;&gt;isViolenceGraphic&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Self-Harm/Intent: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; categories.&lt;span style=&#34;color:#a6e22e&#34;&gt;isSelfHarmIntent&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Self-Harm/Instructions: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; categories.&lt;span style=&#34;color:#a6e22e&#34;&gt;isSelfHarmInstructions&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Harassment/Threatening: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; categories.&lt;span style=&#34;color:#a6e22e&#34;&gt;isHarassmentThreatening&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Violence: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; categories.&lt;span style=&#34;color:#a6e22e&#34;&gt;isViolence&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Access category scores&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CategoryScores scores &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getCategoryScores&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\nCategory Scores:&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sexual: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; scores.&lt;span style=&#34;color:#a6e22e&#34;&gt;getSexual&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hate: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; scores.&lt;span style=&#34;color:#a6e22e&#34;&gt;getHate&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Harassment: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; scores.&lt;span style=&#34;color:#a6e22e&#34;&gt;getHarassment&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Self-Harm: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; scores.&lt;span style=&#34;color:#a6e22e&#34;&gt;getSelfHarm&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sexual/Minors: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; scores.&lt;span style=&#34;color:#a6e22e&#34;&gt;getSexualMinors&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hate/Threatening: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; scores.&lt;span style=&#34;color:#a6e22e&#34;&gt;getHateThreatening&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Violence/Graphic: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; scores.&lt;span style=&#34;color:#a6e22e&#34;&gt;getViolenceGraphic&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Self-Harm/Intent: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; scores.&lt;span style=&#34;color:#a6e22e&#34;&gt;getSelfHarmIntent&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Self-Harm/Instructions: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; scores.&lt;span style=&#34;color:#a6e22e&#34;&gt;getSelfHarmInstructions&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Harassment/Threatening: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; scores.&lt;span style=&#34;color:#a6e22e&#34;&gt;getHarassmentThreatening&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Violence: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; scores.&lt;span style=&#34;color:#a6e22e&#34;&gt;getViolence&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;手动配置&#34;&gt;&#xA;  手动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%89%8b%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;将 &lt;code&gt;spring-ai-openai&lt;/code&gt; 依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;</description>
    </item>
    <item>
      <title>顾问 API</title>
      <link>https://studyllm.github.io/docs/chat-client-api/advisors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/chat-client-api/advisors/</guid>
      <description>&lt;h1 id=&#34;顾问-api&#34;&gt;&#xA;  顾问 API&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%a1%be%e9%97%ae-api&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI Advisors API 提供了一种灵活而强大的方法来拦截、修改和增强 Spring 应用程序中的 AI 驱动的交互。通过利用 Advisors API，开发人员可以创建更复杂、可重用和可维护的 AI 组件。&#xA;主要优势包括封装重复的生成式 AI 模式、转换发送到大型语言模型 （LLM） 和从大型语言模型 （LLM） 发送的数据，以及提供跨各种模型和用例的可移植性。&#xA;您可以使用 [&#xA;  &lt;a href=&#34;chatclient.html#_advisor_configuration_in_chatclient&#34;&gt;ChatClient API&lt;/a&gt;](chatclient.html#_advisor_configuration_in_chatclient) 配置现有顾问，如以下示例所示：&#xA;建议在构建时使用 builder 的 &lt;code&gt;defaultAdvisors（）&lt;/code&gt; 方法注册 advisor。&#xA;顾问还参与可观测性堆栈，因此您可以查看与其执行相关的指标和跟踪。&lt;/p&gt;&#xA;&lt;h2 id=&#34;核心组件&#34;&gt;&#xA;  核心组件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%b8%e5%bf%83%e7%bb%84%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;该 API 由用于非流式处理场景的 &lt;code&gt;CallAroundAdvisor&lt;/code&gt; 和 &lt;code&gt;CallAroundAdvisor&lt;/code&gt;Chain 以及用于流式处理场景的 &lt;code&gt;StreamAroundAdvisor&lt;/code&gt; 和 &lt;code&gt;StreamAroundAdvisor&lt;/code&gt;Chain 组成。它还包括 &lt;code&gt;AdvisedRequest&lt;/code&gt; 来表示未密封的 Prompt 请求，&lt;code&gt;AdvisedResponse&lt;/code&gt; 用于聊天完成响应。两者都持有一个 &lt;code&gt;advise-context&lt;/code&gt; 来在整个 advisor 链中共享状态。&#xA;&#xA;  &lt;img src=&#34;./images/advisors-api-classes.jpg&#34; alt=&#34;&#34; /&gt;&#xA;&lt;code&gt;nextAroundCall（）&lt;/code&gt; 和 &lt;code&gt;nextAroundStream（）&lt;/code&gt; 是关键的 advisor 方法，通常执行一些作，例如检查未密封的 Prompt 数据、自定义和扩充 Prompt 数据、调用 advisor 链中的下一个实体、选择性地阻止请求、检查聊天完成响应以及引发异常以指示处理错误。&#xA;此外，&lt;code&gt;getOrder（）&lt;/code&gt; 方法确定链中的 advisor 顺序，而 &lt;code&gt;getName（）&lt;/code&gt; 提供唯一的 advisor 名称。&#xA;由 Spring AI 框架创建的 Advisor 链允许按顺序调用多个 advisor，这些 advisor 按其 &lt;code&gt;getOrder（）&lt;/code&gt; 值排序。首先执行较低的值。自动添加的最后一个 advisor 将请求发送到 LLM。&#xA;以程图说明了顾问链和聊天模型之间的交互：&#xA;&#xA;  &lt;img src=&#34;./images/advisors-flow.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure OpenAI 嵌入</title>
      <link>https://studyllm.github.io/docs/models/embedding-models/azure-openai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/embedding-models/azure-openai/</guid>
      <description>&lt;h1 id=&#34;azure-openai-嵌入&#34;&gt;&#xA;  Azure OpenAI 嵌入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#azure-openai-%e5%b5%8c%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Azure 的 OpenAI 扩展了 OpenAI 功能，为各种任务提供安全的文本生成和嵌入计算模型：&#xA;Azure OpenAI 嵌入依赖于&lt;code&gt;余弦相似性&lt;/code&gt;来计算文档和查询之间的相似性。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Azure OpenAI 客户端提供三个连接选项：使用 Azure API 密钥或使用 OpenAI API 密钥，或使用 Microsoft Entra ID。&lt;/p&gt;&#xA;&lt;h2 id=&#34;azure-api-密钥和端点&#34;&gt;&#xA;  Azure API 密钥和端点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#azure-api-%e5%af%86%e9%92%a5%e5%92%8c%e7%ab%af%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;从 [&#xA;  &lt;a href=&#34;https://portal.azure.com&#34;&gt;Azure 门户&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://portal.azure.com&#34;&gt;https://portal.azure.com&lt;/a&gt;)上的 Azure OpenAI 服务部分获取 Azure OpenAI  &lt;code&gt;终结点&lt;/code&gt;和 &lt;code&gt;API 密钥&lt;/code&gt; 。&#xA;Spring AI 定义了两个配置属性：&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 或 &lt;code&gt;application.yml&lt;/code&gt; 文件中设置这些配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.azure.openai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-azure-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.azure.openai.endpoint&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-azure-endpoint-url&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果您更喜欢对 API 密钥等敏感信息使用环境变量，则可以在配置中使用 Spring 表达式语言 （SpEL）：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;azure&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;openai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${AZURE_OPENAI_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;endpoint&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${AZURE_OPENAI_ENDPOINT}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export AZURE_OPENAI_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-azure-openai-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export AZURE_OPENAI_ENDPOINT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-azure-endpoint-url&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;openai-密钥&#34;&gt;&#xA;  OpenAI 密钥&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#openai-%e5%af%86%e9%92%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;要使用 OpenAI 服务（而不是 Azure）进行身份验证，请提供 OpenAI API 密钥。这会自动将终端节点设置为 [&#xA;  &lt;a href=&#34;https://api.openai.com/v1&#34;&gt;api.openai.com/v1&lt;/a&gt;](https://&#xA;  &lt;a href=&#34;https://api.openai.com/v1&#34;&gt;api.openai.com/v1&lt;/a&gt;)。&#xA;使用此方法时，请将 &lt;code&gt;spring.ai.azure.openai.chat.options.deployment-name&lt;/code&gt; property 设置为您要使用的 [&#xA;  &lt;a href=&#34;https://platform.openai.com/docs/models&#34;&gt;OpenAI 模型&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://platform.openai.com/docs/models&#34;&gt;https://platform.openai.com/docs/models&lt;/a&gt;)的名称。&#xA;在您的应用程序配置中：&lt;/p&gt;</description>
    </item>
    <item>
      <title>MCP 服务器启动启动器</title>
      <link>https://studyllm.github.io/docs/model-context-protocol-mcp/mcp-server-boot-starters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/model-context-protocol-mcp/mcp-server-boot-starters/</guid>
      <description>&lt;h1 id=&#34;mcp-服务器启动启动器&#34;&gt;&#xA;  MCP 服务器启动启动器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mcp-%e6%9c%8d%e5%8a%a1%e5%99%a8%e5%90%af%e5%8a%a8%e5%90%af%e5%8a%a8%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI MCP（模型上下文协议）服务器启动器提供了在 Spring Boot 应用程序中设置 MCP 服务器的自动配置。它支持将 MCP 服务器功能与 Spring Boot 的自动配置系统无缝集成。&#xA;MCP Server Boot Starter 提供：&lt;/p&gt;&#xA;&lt;h2 id=&#34;首先&#34;&gt;&#xA;  首先&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%a6%96%e5%85%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;根据您的运输要求选择以下启动器之一：&lt;/p&gt;&#xA;&lt;h2 id=&#34;标准-mcp-服务器&#34;&gt;&#xA;  标准 MCP 服务器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%87%e5%87%86-mcp-%e6%9c%8d%e5%8a%a1%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;完整的 MCP 服务器功能支持 &lt;code&gt;STDIO&lt;/code&gt; 服务器传输。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-mcp-server-spring-boot-starter&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;适用于命令行和桌面工具&lt;/li&gt;&#xA;&lt;li&gt;不需要额外的 Web 依赖项&#xA;启动器激活 &lt;code&gt;McpServerAutoConfiguration&lt;/code&gt; 自动配置，负责：&lt;/li&gt;&#xA;&lt;li&gt;配置基本 Server 组件&lt;/li&gt;&#xA;&lt;li&gt;处理工具、资源和提示规范&lt;/li&gt;&#xA;&lt;li&gt;管理 Server 功能和更改通知&lt;/li&gt;&#xA;&lt;li&gt;提供同步和异步服务器实现&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;webmvc-服务器传输&#34;&gt;&#xA;  WebMVC 服务器传输&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#webmvc-%e6%9c%8d%e5%8a%a1%e5%99%a8%e4%bc%a0%e8%be%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;完整的 MCP 服务器功能支持基于 Spring MVC 的 &lt;code&gt;SSE&lt;/code&gt;（服务器发送事件）服务器传输和可选的 &lt;code&gt;STDIO&lt;/code&gt; 传输。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-mcp-server-webmvc&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动器激活 &lt;code&gt;McpWebMvcServerAutoConfiguration&lt;/code&gt; 和 &lt;code&gt;McpServerAutoConfiguration&lt;/code&gt; 自动配置以提供：&lt;/p&gt;</description>
    </item>
    <item>
      <title>None</title>
      <link>https://studyllm.github.io/docs/vector-databases/azure-cosmos-db/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/vector-databases/azure-cosmos-db/</guid>
      <description>&lt;h1 id=&#34;none&#34;&gt;&#xA;  None&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#none&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本部分将指导你完成设置 &lt;code&gt;CosmosDBVectorStore&lt;/code&gt; 以存储文档嵌入并执行相似性搜索。&lt;/p&gt;&#xA;&lt;h2 id=&#34;什么是-azure-cosmos-db&#34;&gt;&#xA;  什么是 Azure Cosmos DB？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af-azure-cosmos-db&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://azure.microsoft.com/en-us/services/cosmos-db/&#34;&gt;Azure Cosmos DB&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://azure.microsoft.com/en-us/services/cosmos-db/&#34;&gt;https://azure.microsoft.com/en-us/services/cosmos-db/&lt;/a&gt;) 是 Microsoft 的全球分布式云原生数据库服务，专为任务关键型应用程序而设计。它提供高可用性、低延迟以及水平扩展以满足现代应用程序需求的能力。它是从头开始构建的，其核心是全球分发、精细的多租户和水平可扩展性。它是 Azure 中的一项基础服务，被全球范围内的大多数 Microsoft 关键任务应用程序使用，包括 Teams、Skype、Xbox Live、Office 365、Bing、Azure Active Directory、Azure 门户、Microsoft Store 等。它还被数以千计的外部客户使用，包括 OpenAI for ChatGPT 和其他需要弹性扩展、交钥匙全球分发以及全球低延迟和高可用性的任务关键型 AI 应用程序。&lt;/p&gt;&#xA;&lt;h2 id=&#34;什么是-diskann&#34;&gt;&#xA;  什么是 DiskANN？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af-diskann&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;DiskANN（基于磁盘的近似最近邻搜索）是 Azure Cosmos DB 中用于增强矢量搜索性能的创新技术。它通过对 Cosmos DB 中存储的嵌入进行索引，实现对高维数据的高效且可缩放的相似性搜索。&#xA;DiskANN 具有以下优势：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;效率 ：与传统方法相比，通过利用基于磁盘的结构，DiskANN 显著缩短了查找最近邻所需的时间。&lt;/li&gt;&#xA;&lt;li&gt;可扩展性 ：它可以处理超过内存容量的大型数据集，使其适用于各种应用程序，包括机器学习和 AI 驱动的解决方案。&lt;/li&gt;&#xA;&lt;li&gt;低延迟 ：DiskANN 最大限度地减少了搜索作期间的延迟，确保应用程序即使在数据量很大的情况下也能快速检索结果。&#xA;在 Spring AI for Azure Cosmos DB 的上下文中，向量搜索将创建并利用 DiskANN 索引来确保相似性查询的最佳性能。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;使用自动配置设置-azure-cosmos-db-矢量存储&#34;&gt;&#xA;  使用自动配置设置 Azure Cosmos DB 矢量存储&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%bf%e7%94%a8%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae%e8%ae%be%e7%bd%ae-azure-cosmos-db-%e7%9f%a2%e9%87%8f%e5%ad%98%e5%82%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;以下代码演示如何使用自动配置设置 &lt;code&gt;CosmosDBVectorStore&lt;/code&gt;：&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenAI 图像生成</title>
      <link>https://studyllm.github.io/docs/models/image-models/openai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/image-models/openai/</guid>
      <description>&lt;h1 id=&#34;openai-图像生成&#34;&gt;&#xA;  OpenAI 图像生成&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#openai-%e5%9b%be%e5%83%8f%e7%94%9f%e6%88%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 OpenAI 的图像生成模型 DALL-E。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 OpenAI 创建 API 密钥才能访问 ChatGPT 模型。&#xA;在 [&#xA;  &lt;a href=&#34;https://platform.openai.com/signup&#34;&gt;OpenAI 注册页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://platform.openai.com/signup&#34;&gt;https://platform.openai.com/signup&lt;/a&gt;)创建一个帐户，并在 [&#xA;  &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;API 密钥页面上&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;https://platform.openai.com/account/api-keys&lt;/a&gt;)生成令牌。&#xA;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.openai.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 openai.com 获取的 &lt;code&gt;API 密钥&lt;/code&gt;的值。&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.openai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-openai-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 （SpEL） 来引用自定义环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;openai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${OPENAI_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export OPENAI_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-openai-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve API key from a secure source or environment variable&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String apiKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OPENAI_API_KEY&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 OpenAI Image Generation Client 提供 Spring Boot 自动配置。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Titan 嵌入</title>
      <link>https://studyllm.github.io/docs/models/embedding-models/amazon-bedrock/titan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/embedding-models/amazon-bedrock/titan/</guid>
      <description>&lt;h1 id=&#34;titan-嵌入&#34;&gt;&#xA;  Titan 嵌入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#titan-%e5%b5%8c%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;提供 Bedrock Titan Embedding 模型。&#xA;[&#xA;  &lt;a href=&#34;https://aws.amazon.com/bedrock/titan/&#34;&gt;Amazon Titan&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://aws.amazon.com/bedrock/titan/&#34;&gt;https://aws.amazon.com/bedrock/titan/&lt;/a&gt;) 基础模型 （FM） 通过完全托管的 API 为客户提供了广泛的高性能图像、多模态嵌入和文本模型选择。[&#xA;  &lt;a href=&#34;https://aws.amazon.com/bedrock/titan/&#34;&gt;Amazon Titan&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://aws.amazon.com/bedrock/titan/&#34;&gt;https://aws.amazon.com/bedrock/titan/&lt;/a&gt;) 模型由 AWS 创建，并在大型数据集上进行预训练，使其成为强大的通用模型，旨在支持各种使用案例，同时还支持负责任地使用 AI。按原样使用它们，或使用您自己的数据私下自定义它们。&#xA;[&#xA;  &lt;a href=&#34;https://aws.amazon.com/bedrock/titan/&#34;&gt;AWS Bedrock Titan 模型页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://aws.amazon.com/bedrock/titan/&#34;&gt;https://aws.amazon.com/bedrock/titan/&lt;/a&gt;)和 [&#xA;  &lt;a href=&#34;https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-bedrock.html&#34;&gt;Amazon Bedrock 用户指南&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-bedrock.html&#34;&gt;https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-bedrock.html&lt;/a&gt;)包含有关如何使用 AWS 托管模型的详细信息。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;请参阅 [&#xA;  &lt;a href=&#34;../bedrock.html&#34;&gt;Amazon Bedrock 上的 Spring AI 文档&lt;/a&gt;](../bedrock.html)以设置 API 访问。&lt;/p&gt;&#xA;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 工件发布在 Maven Central 和 Spring Snapshot 存储库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;Artifact Repositories&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些存储库添加到您的构建系统中。&#xA;为了帮助进行[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)，Spring AI 提供了一个 BOM（物料清单），以确保在整个项目中使用一致的 Spring AI 版本。请参阅[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)部分，将 Spring AI BOM 添加到您的构建系统中。&lt;/p&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;将 &lt;code&gt;spring-ai-starter-model-bedrock&lt;/code&gt; 依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;</description>
    </item>
    <item>
      <title>基岩版 Converse API</title>
      <link>https://studyllm.github.io/docs/models/chat-models/amazon-bedrock-converse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/amazon-bedrock-converse/</guid>
      <description>&lt;h1 id=&#34;基岩版-converse-api&#34;&gt;&#xA;  基岩版 Converse API&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9f%ba%e5%b2%a9%e7%89%88-converse-api&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://docs.aws.amazon.com/bedrock/latest/userguide/conversation-inference.html&#34;&gt;Amazon Bedrock Converse API&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.aws.amazon.com/bedrock/latest/userguide/conversation-inference.html&#34;&gt;https://docs.aws.amazon.com/bedrock/latest/userguide/conversation-inference.html&lt;/a&gt;) 为对话式 AI 模型提供了一个统一的接口，具有增强功能，包括函数/工具调用、多模态输入和流式响应。&#xA;Bedrock Converse API 具有以下高级功能：&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;请参阅 [&#xA;  &lt;a href=&#34;https://docs.aws.amazon.com/bedrock/latest/userguide/getting-started.html&#34;&gt;Amazon Bedrock 入门&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.aws.amazon.com/bedrock/latest/userguide/getting-started.html&#34;&gt;https://docs.aws.amazon.com/bedrock/latest/userguide/getting-started.html&lt;/a&gt;)以设置 API 访问&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;获取 AWS 凭证：如果您还没有配置 AWS 账户和 AWS CLI，此视频指南可以帮助您配置它：AWS CLI 和 SDK 设置在不到 4 分钟的时间内，只需不到 4 分钟）。 您应该能够获取您的访问密钥和安全密钥。&lt;/li&gt;&#xA;&lt;li&gt;启用要使用的模型：转到 Amazon Bedrock，然后从左侧的 Model Access（模型访问 ）菜单中，配置对要使用的模型的访问。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;将 &lt;code&gt;spring-ai-starter-model-bedrock-converse&lt;/code&gt; 依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 或 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件中：&lt;/p&gt;&#xA;&lt;h2 id=&#34;聊天属性&#34;&gt;&#xA;  聊天属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%81%8a%e5%a4%a9%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;前缀 &lt;code&gt;spring.ai.bedrock.aws&lt;/code&gt; 是用于配置与 AWS Bedrock 的连接的属性前缀。&#xA;prefix &lt;code&gt;spring.ai.bedrock.converse.chat&lt;/code&gt; 是为 Converse API 配置聊天模型实现的属性 prefix。&lt;/p&gt;</description>
    </item>
    <item>
      <title>开始</title>
      <link>https://studyllm.github.io/docs/getting-started-%E5%BC%80%E5%A7%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/getting-started-%E5%BC%80%E5%A7%8B/</guid>
      <description>&lt;h1 id=&#34;开始&#34;&gt;&#xA;  开始&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%80%e5%a7%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节提供了如何开始使用 Spring AI 的起点。&#xA;您应该根据需要按照以下每个部分中的步骤进行作。&lt;/p&gt;&#xA;&lt;h2 id=&#34;spring-初始化&#34;&gt;&#xA;  Spring 初始化&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-%e5%88%9d%e5%a7%8b%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;前往 [&#xA;  &lt;a href=&#34;https://start.spring.io/&#34;&gt;start.spring.io&lt;/a&gt;](https://&#xA;  &lt;a href=&#34;https://start.spring.io/&#34;&gt;start.spring.io&lt;/a&gt;/) 并选择要在新应用程序中使用的 AI 模型和矢量存储。&lt;/p&gt;&#xA;&lt;h2 id=&#34;构件存储库&#34;&gt;&#xA;  构件存储库&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9e%84%e4%bb%b6%e5%ad%98%e5%82%a8%e5%ba%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;里程碑---使用-maven-central&#34;&gt;&#xA;  里程碑 - 使用 Maven Central&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%87%8c%e7%a8%8b%e7%a2%91---%e4%bd%bf%e7%94%a8-maven-central&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;从 1.0.0-M6 开始，Maven Central 中提供了版本。无需更改您的构建文件。&lt;/p&gt;&#xA;&lt;h2 id=&#34;快照---添加快照存储库&#34;&gt;&#xA;  快照 - 添加快照存储库&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bf%ab%e7%85%a7---%e6%b7%bb%e5%8a%a0%e5%bf%ab%e7%85%a7%e5%ad%98%e5%82%a8%e5%ba%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;要使用 Snapshot（以及 1.0.0-M6 之前的里程碑）版本，您需要在构建文件中添加以下快照存储库。&#xA;将以下存储库定义添加到您的 Maven 或 Gradle 构建文件中：&#xA;注意： 将 Maven 与 Spring AI 快照一起使用时，请注意您的 Maven 镜像配置。如果您在 &lt;code&gt;settings.xml&lt;/code&gt; 中配置了镜像，如下所示：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;mirror&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;my-mirror&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;mirrorOf&amp;gt;&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/mirrorOf&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;https://my-company-repository.com/maven&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/mirror&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通配符 &lt;code&gt;*&lt;/code&gt; 会将所有存储库请求重定向到您的镜像，从而阻止访问 Spring 快照存储库。要解决此问题，请修改 &lt;code&gt;mirrorOf&lt;/code&gt; 配置以排除 Spring 存储库：&lt;/p&gt;</description>
    </item>
    <item>
      <title>适度</title>
      <link>https://studyllm.github.io/docs/models/moderation-models/mistral-ai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/moderation-models/mistral-ai/</guid>
      <description>&lt;h1 id=&#34;适度&#34;&gt;&#xA;  适度&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%80%82%e5%ba%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;介绍&#34;&gt;&#xA;  介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 支持由 Mistral AI 引入并由 Mistral 审核模型提供支持的新审核服务。它支持沿多个策略维度检测有害文本内容。点击此[&#xA;  &lt;a href=&#34;https://docs.mistral.ai/capabilities/guardrailing/&#34;&gt;链接&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.mistral.ai/capabilities/guardrailing/&#34;&gt;https://docs.mistral.ai/capabilities/guardrailing/&lt;/a&gt;)了解有关 Mistral AI 审核模型的更多信息。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Mistral AI 审核模型提供了 Spring Boot 自动配置。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-model-mistral-ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或复制到您的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-model-mistral-ai&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;审核属性&#34;&gt;&#xA;  审核属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%a1%e6%a0%b8%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;连接属性&#34;&gt;&#xA;  连接属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%9e%e6%8e%a5%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;前缀 spring.ai.mistralai 用作属性前缀，可让您连接到 Mistral AI。&lt;/p&gt;&#xA;&lt;h2 id=&#34;配置属性&#34;&gt;&#xA;  配置属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%85%8d%e7%bd%ae%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;前缀 spring.ai.mistralai.moderation 用作配置 Mistral AI 审核模型的属性前缀。&lt;/p&gt;&#xA;&lt;h2 id=&#34;运行时选项&#34;&gt;&#xA;  运行时选项&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%90%e8%a1%8c%e6%97%b6%e9%80%89%e9%a1%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;MistralAiModerationOptions 类提供了在发出审核请求时要使用的选项。在启动时，使用 spring.ai.mistralai.moderation 指定的选项，但你可以在运行时覆盖这些选项。&#xA;例如：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Anthropic 3 聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/anthropic-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/anthropic-3/</guid>
      <description>&lt;h1 id=&#34;anthropic-3-聊天&#34;&gt;&#xA;  Anthropic 3 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#anthropic-3-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://www.anthropic.com/&#34;&gt;Anthropic Claude&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.anthropic.com/&#34;&gt;https://www.anthropic.com/&lt;/a&gt;) 是一系列基础 AI 模型，可用于各种应用程序。对于开发人员和企业，您可以利用 API 访问并直接在 [&#xA;  &lt;a href=&#34;https://www.anthropic.com/api&#34;&gt;Anthropic 的 AI 基础设施&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.anthropic.com/api&#34;&gt;https://www.anthropic.com/api&lt;/a&gt;)之上进行构建。&#xA;Spring AI 支持 Anthropic [&#xA;  &lt;a href=&#34;https://docs.anthropic.com/claude/reference/messages_post&#34;&gt;Messaging API&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.anthropic.com/claude/reference/messages_post&#34;&gt;https://docs.anthropic.com/claude/reference/messages_post&lt;/a&gt;) 进行同步和流式文本生成。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要在 Anthropic 门户上创建一个 API 密钥。&#xA;在 [&#xA;  &lt;a href=&#34;https://console.anthropic.com/dashboard&#34;&gt;Anthropic API 控制面板&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://console.anthropic.com/dashboard&#34;&gt;https://console.anthropic.com/dashboard&lt;/a&gt;)上创建一个账户，并在 [&#xA;  &lt;a href=&#34;https://console.anthropic.com/settings/keys&#34;&gt;Get API Keys&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://console.anthropic.com/settings/keys&#34;&gt;https://console.anthropic.com/settings/keys&lt;/a&gt;) 页面上生成 API 密钥。&#xA;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.anthropic.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 anthropic.com 获取的 &lt;code&gt;API 密钥&lt;/code&gt;的值。&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.anthropic.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-anthropic-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 （SpEL） 来引用自定义环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;anthropic&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${ANTHROPIC_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export ANTHROPIC_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-anthropic-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Apache Cassandra 矢量存储</title>
      <link>https://studyllm.github.io/docs/vector-databases/apache-cassandra-vector-store/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/vector-databases/apache-cassandra-vector-store/</guid>
      <description>&lt;h1 id=&#34;apache-cassandra-矢量存储&#34;&gt;&#xA;  Apache Cassandra 矢量存储&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#apache-cassandra-%e7%9f%a2%e9%87%8f%e5%ad%98%e5%82%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将指导您设置 &lt;code&gt;CassandraVectorStore&lt;/code&gt; 以存储文档嵌入并执行相似性搜索。&lt;/p&gt;&#xA;&lt;h2 id=&#34;什么是-apache-cassandra&#34;&gt;&#xA;  什么是 Apache Cassandra？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af-apache-cassandra&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://cassandra.apache.org&#34;&gt;Apache Cassandra®&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://cassandra.apache.org&#34;&gt;https://cassandra.apache.org&lt;/a&gt;) 是真正的开源分布式数据库，以线性可扩展性、经过验证的容错能力和低延迟而闻名，使其成为任务关键型事务数据的完美平台。&#xA;其矢量相似性搜索 （VSS） 基于 JVector 库，可确保一流的性能和相关性。&#xA;Apache Cassandra 中的向量搜索非常简单：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; content &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; content_vector ANN &lt;span style=&#34;color:#66d9ef&#34;&gt;OF&lt;/span&gt; query_embedding;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以[&#xA;  &lt;a href=&#34;https://cassandra.apache.org/doc/latest/cassandra/getting-started/vector-search-quickstart.html&#34;&gt;在此处&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://cassandra.apache.org/doc/latest/cassandra/getting-started/vector-search-quickstart.html&#34;&gt;https://cassandra.apache.org/doc/latest/cassandra/getting-started/vector-search-quickstart.html&lt;/a&gt;)阅读有关此内容的更多文档。&#xA;这个 Spring AI Vector Store 旨在适用于全新的 RAG 应用程序，并能够在现有数据和表之上进行改造。&#xA;该存储还可用于现有数据库中的非 RAG 用例，例如语义搜索、地理位置邻近搜索等。&#xA;存储将根据其配置根据需要自动创建或增强架构。如果您不需要修改架构，请使用 &lt;code&gt;initializeSchema&lt;/code&gt; 配置存储。&#xA;使用 spring-boot-autoconfigure &lt;code&gt;initializeSchema&lt;/code&gt; 时，根据 Spring Boot 标准默认为 &lt;code&gt;false&lt;/code&gt;，您必须通过设置来选择模式创建/修改 &lt;code&gt;......initialize-schema=true&lt;/code&gt; 在 &lt;code&gt;application.properties&lt;/code&gt; 文件中。&lt;/p&gt;&#xA;&lt;h2 id=&#34;什么是-jvector&#34;&gt;&#xA;  什么是 JVector？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af-jvector&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://github.com/jbellis/jvector&#34;&gt;JVector&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://github.com/jbellis/jvector&#34;&gt;https://github.com/jbellis/jvector&lt;/a&gt;) 是一个纯 Java 嵌入式矢量搜索引擎。&#xA;它从其他 HNSW 向量相似性搜索实现中脱颖而出，具有以下特点：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;算法快速。JVector 使用受 DiskANN 和相关研究启发的最先进的图形算法，这些算法提供高召回率和低延迟。&lt;/li&gt;&#xA;&lt;li&gt;实施速度快。JVector 使用 Panama SIMD API 来加速索引构建和查询。&lt;/li&gt;&#xA;&lt;li&gt;内存高效。JVector 使用乘积量化来压缩向量，以便它们在搜索期间可以保留在内存中。&lt;/li&gt;&#xA;&lt;li&gt;磁盘感知。JVector 的磁盘布局旨在在查询时执行最低的必要 IOPS。&lt;/li&gt;&#xA;&lt;li&gt;并发的。索引构建以线性方式扩展到至少 32 个线程。线程翻倍，构建时间减半。&lt;/li&gt;&#xA;&lt;li&gt;增量。在构建索引时查询索引。添加向量和在搜索结果中找到它之间没有延迟。&lt;/li&gt;&#xA;&lt;li&gt;易于嵌入。API 旨在让人们在生产环境中使用它时轻松嵌入。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;依赖&#34;&gt;&#xA;  依赖&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%be%9d%e8%b5%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;将这些依赖项添加到您的项目中：&lt;/p&gt;</description>
    </item>
    <item>
      <title>MCP 实用程序</title>
      <link>https://studyllm.github.io/docs/model-context-protocol-mcp/mcp-utilities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/model-context-protocol-mcp/mcp-utilities/</guid>
      <description>&lt;h1 id=&#34;mcp-实用程序&#34;&gt;&#xA;  MCP 实用程序&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mcp-%e5%ae%9e%e7%94%a8%e7%a8%8b%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;MCP 实用程序为将模型上下文协议与 Spring AI 应用程序集成提供了基础支持。这些实用程序实现了 Spring AI 的工具系统和 MCP 服务器之间的无缝通信，支持同步和异步作。它们通常用于编程 MCP 客户端和服务器配置和交互。要获得更简化的配置，请考虑使用 boot starters。&lt;/p&gt;&#xA;&lt;h2 id=&#34;toolcallback-实用程序&#34;&gt;&#xA;  ToolCallback 实用程序&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#toolcallback-%e5%ae%9e%e7%94%a8%e7%a8%8b%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;工具回调适配器&#34;&gt;&#xA;  工具回调适配器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b7%a5%e5%85%b7%e5%9b%9e%e8%b0%83%e9%80%82%e9%85%8d%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;使 MCP 工具适应 Spring AI 的工具接口，同时支持同步和异步执行。&lt;/p&gt;&#xA;&lt;h2 id=&#34;工具回调提供程序&#34;&gt;&#xA;  工具回调提供程序&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b7%a5%e5%85%b7%e5%9b%9e%e8%b0%83%e6%8f%90%e4%be%9b%e7%a8%8b%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;从 MCP 客户端发现并提供 MCP 工具。&lt;/p&gt;&#xA;&lt;h2 id=&#34;toolcallbacks-到-toolspecifications&#34;&gt;&#xA;  ToolCallbacks 到 ToolSpecifications&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#toolcallbacks-%e5%88%b0-toolspecifications&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;将 Spring AI 工具回调转换为 MCP 工具规范：&lt;/p&gt;&#xA;&lt;h2 id=&#34;mcp-客户端到-toolcallbacks&#34;&gt;&#xA;  MCP 客户端到 ToolCallbacks&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mcp-%e5%ae%a2%e6%88%b7%e7%ab%af%e5%88%b0-toolcallbacks&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;从 MCP 客户端获取工具回调&lt;/p&gt;&#xA;&lt;h2 id=&#34;本机映像支持&#34;&gt;&#xA;  本机映像支持&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%ac%e6%9c%ba%e6%98%a0%e5%83%8f%e6%94%af%e6%8c%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;McpHints&lt;/code&gt; 类为 MCP 架构类提供 GraalVM 原生图像提示。在构建本机映像时，此类会自动为 MCP 架构类注册所有必要的反射提示。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mistral AI 嵌入</title>
      <link>https://studyllm.github.io/docs/models/embedding-models/mistral-ai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/embedding-models/mistral-ai/</guid>
      <description>&lt;h1 id=&#34;mistral-ai-嵌入&#34;&gt;&#xA;  Mistral AI 嵌入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mistral-ai-%e5%b5%8c%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 Mistral AI 的文本嵌入模型。嵌入是文本的矢量表示形式，它通过段落在高维向量空间中的位置来捕获段落的语义含义。Mistral AI Embeddings API 为文本提供尖端、最先进的嵌入，可用于许多 NLP 任务。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 MistralAI 创建一个 API 才能访问 MistralAI 嵌入模型。&#xA;在 [&#xA;  &lt;a href=&#34;https://auth.mistral.ai/ui/registration&#34;&gt;MistralAI 注册页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://auth.mistral.ai/ui/registration&#34;&gt;https://auth.mistral.ai/ui/registration&lt;/a&gt;)创建一个帐户，并在 [&#xA;  &lt;a href=&#34;https://console.mistral.ai/api-keys/&#34;&gt;API 密钥页面上&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://console.mistral.ai/api-keys/&#34;&gt;https://console.mistral.ai/api-keys/&lt;/a&gt;)生成令牌。&#xA;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.mistralai.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 console.mistral.ai 获取的 &lt;code&gt;API 密钥&lt;/code&gt;的值。&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.mistralai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-mistralai-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 （SpEL） 来引用环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;mistralai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${MISTRALAI_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export MISTRALAI_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-mistralai-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;</description>
    </item>
    <item>
      <title>稳定性 AI 图像生成</title>
      <link>https://studyllm.github.io/docs/models/image-models/stability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/image-models/stability/</guid>
      <description>&lt;h1 id=&#34;稳定性-ai-图像生成&#34;&gt;&#xA;  稳定性 AI 图像生成&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%a8%b3%e5%ae%9a%e6%80%a7-ai-%e5%9b%be%e5%83%8f%e7%94%9f%e6%88%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 Stability AI 的文本[&#xA;  &lt;a href=&#34;https://platform.stability.ai/docs/api-reference#tag/v1generation&#34;&gt;到图像生成模型&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://platform.stability.ai/docs/api-reference#tag/v1generation&#34;&gt;https://platform.stability.ai/docs/api-reference#tag/v1generation&lt;/a&gt;) 。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 Stability AI 创建 API 密钥才能访问他们的 AI 模型。按照他们的[&#xA;  &lt;a href=&#34;https://platform.stability.ai/docs/getting-started/authentication&#34;&gt;入门文档&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://platform.stability.ai/docs/getting-started/authentication&#34;&gt;https://platform.stability.ai/docs/getting-started/authentication&lt;/a&gt;)获取您的 API 密钥。&#xA;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.stabilityai.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 Stability AI 获取的 &lt;code&gt;API 密钥&lt;/code&gt;的值。&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.stabilityai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-stabilityai-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 （SpEL） 来引用自定义环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;stabilityai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${STABILITYAI_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export STABILITYAI_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-stabilityai-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve API key from a secure source or environment variable&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String apiKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;STABILITYAI_API_KEY&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Stability AI Image Generation Client 提供 Spring Boot 自动配置。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure OpenAI 聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/azure-openai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/azure-openai/</guid>
      <description>&lt;h1 id=&#34;azure-openai-聊天&#34;&gt;&#xA;  Azure OpenAI 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#azure-openai-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Azure 的 OpenAI 产品由 ChatGPT 提供支持，超越了传统的 OpenAI 功能，提供具有增强功能的 AI 驱动的文本生成[&#xA;  &lt;a href=&#34;https://techcommunity.microsoft.com/t5/ai-azure-ai-services-blog/announcing-new-ai-safety-amp-responsible-ai-features-in-azure/ba-p/3983686&#34;&gt;。&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://techcommunity.microsoft.com/t5/ai-azure-ai-services-blog/announcing-new-ai-safety-amp-responsible-ai-features-in-azure/ba-p/3983686%29Azure&#34;&gt;https://techcommunity.microsoft.com/t5/ai-azure-ai-services-blog/announcing-new-ai-safety-amp-responsible-ai-features-in-azure/ba-p/3983686)Azure&lt;/a&gt; 提供额外的 AI 安全和负责任的 AI 功能，如其最近的更新中所述 [&#xA;  &lt;a href=&#34;https://techcommunity.microsoft.com/t5/ai-azure-ai-services-blog/announcing-new-ai-safety-amp-responsible-ai-features-in-azure/ba-p/3983686&#34;&gt;。&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://techcommunity.microsoft.com/t5/ai-azure-ai-services-blog/announcing-new-ai-safety-amp-responsible-ai-features-in-azure/ba-p/3983686&#34;&gt;https://techcommunity.microsoft.com/t5/ai-azure-ai-services-blog/announcing-new-ai-safety-amp-responsible-ai-features-in-azure/ba-p/3983686&lt;/a&gt;)&#xA;Azure 为 Java 开发人员提供了利用 AI 的全部潜力的机会，方法是将 AI 与一系列 Azure 服务集成，其中包括 AI 相关资源，例如 Azure 上的 Vector Stores。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Azure OpenAI 客户端提供三个连接选项：使用 Azure API 密钥或使用 OpenAI API 密钥，或使用 Microsoft Entra ID。&lt;/p&gt;&#xA;&lt;h2 id=&#34;azure-api-密钥和端点&#34;&gt;&#xA;  Azure API 密钥和端点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#azure-api-%e5%af%86%e9%92%a5%e5%92%8c%e7%ab%af%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;要使用 API 密钥访问模型，请从 Azure 门户上的 Azure OpenAI 服务部分获取 Azure OpenAI  &lt;code&gt;终端节点&lt;/code&gt;和 &lt;code&gt;api-key&lt;/code&gt;。&#xA;Spring AI 定义了两个配置属性：&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 或 &lt;code&gt;application.yml&lt;/code&gt; 文件中设置这些配置属性：&lt;/p&gt;</description>
    </item>
    <item>
      <title>MiniMax 聊天</title>
      <link>https://studyllm.github.io/docs/models/embedding-models/minimax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/embedding-models/minimax/</guid>
      <description>&lt;h1 id=&#34;minimax-聊天&#34;&gt;&#xA;  MiniMax 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#minimax-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 MiniMax 的各种 AI 语言模型。您可以与 MiniMax 语言模型交互，并基于 MiniMax 模型创建多语言对话助手。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 MiniMax 创建 API 才能访问 MiniMax 语言模型。&#xA;在 [&#xA;  &lt;a href=&#34;https://www.minimaxi.com/login&#34;&gt;MiniMax 注册页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.minimaxi.com/login&#34;&gt;https://www.minimaxi.com/login&lt;/a&gt;)创建一个帐户，并在 [&#xA;  &lt;a href=&#34;https://www.minimaxi.com/user-center/basic-information/interface-key&#34;&gt;API 密钥页面上&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.minimaxi.com/user-center/basic-information/interface-key&#34;&gt;https://www.minimaxi.com/user-center/basic-information/interface-key&lt;/a&gt;)生成令牌。&#xA;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.minimax.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从“&lt;code&gt;API 密钥&lt;/code&gt;”页面获取的 &lt;code&gt;API 密钥&lt;/code&gt;的值。&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.minimax.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-minimax-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 （SpEL） 来引用环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;minimax&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${MINIMAX_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export MINIMAX_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-minimax-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve API key from a secure source or environment variable&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String apiKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MINIMAX_API_KEY&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 工件发布在 Maven Central 和 Spring Snapshot 存储库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;Artifact Repositories&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些存储库添加到您的构建系统中。&#xA;为了帮助进行[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)，Spring AI 提供了一个 BOM（物料清单），以确保在整个项目中使用一致的 Spring AI 版本。请参阅[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)部分，将 Spring AI BOM 添加到您的构建系统中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>智普 AI 图像生成</title>
      <link>https://studyllm.github.io/docs/models/image-models/zhipuai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/image-models/zhipuai/</guid>
      <description>&lt;h1 id=&#34;智普-ai-图像生成&#34;&gt;&#xA;  智普 AI 图像生成&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%99%ba%e6%99%ae-ai-%e5%9b%be%e5%83%8f%e7%94%9f%e6%88%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 CogView，这是 ZhiPuAI 的图像生成模型。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 ZhiPuAI 创建 API 才能访问 ZhiPu AI 语言模型。&#xA;在  [&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/login&#34;&gt;智普 AI 注册页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/login&#34;&gt;https://open.bigmodel.cn/login&lt;/a&gt;)创建账号，并在 [&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/usercenter/apikeys&#34;&gt;API Keys 页面生成 Token&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/usercenter/apikeys&#34;&gt;https://open.bigmodel.cn/usercenter/apikeys&lt;/a&gt;)。&#xA;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.zhipuai.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 &lt;code&gt;API 密钥&lt;/code&gt;页面获取的 &lt;code&gt;API 密钥&lt;/code&gt;的值。&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.zhipuai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-zhipuai-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 （SpEL） 来引用自定义环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;zhipuai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${ZHIPUAI_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export ZHIPUAI_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-zhipuai-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve API key from a secure source or environment variable&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String apiKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ZHIPUAI_API_KEY&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 工件发布在 Maven Central 和 Spring Snapshot 存储库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;Artifact Repositories&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些存储库添加到您的构建系统中。&#xA;为了帮助进行[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)，Spring AI 提供了一个 BOM（物料清单），以确保在整个项目中使用一致的 Spring AI 版本。请参阅[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)部分，将 Spring AI BOM 添加到您的构建系统中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>色度</title>
      <link>https://studyllm.github.io/docs/vector-databases/chroma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/vector-databases/chroma/</guid>
      <description>&lt;h1 id=&#34;色度&#34;&gt;&#xA;  色度&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%89%b2%e5%ba%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将引导您设置 Chroma VectorStore 以存储文档嵌入并执行相似性搜索。&#xA;[&#xA;  &lt;a href=&#34;https://docs.trychroma.com/&#34;&gt;Chroma&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.trychroma.com/&#34;&gt;https://docs.trychroma.com/&lt;/a&gt;) 是开源嵌入数据库。它为您提供了存储文档嵌入、内容和元数据以及搜索这些嵌入（包括元数据筛选）的工具。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;启动时，&lt;code&gt;ChromaVectorStore&lt;/code&gt; 会创建所需的集合（如果尚未预置）。&lt;/p&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Chroma Vector Store 提供了 Spring Boot 自动配置。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-vector-store-chroma&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或您的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-vector-store-chroma&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;矢量存储实现可以为您初始化必要的架构，但您必须通过在相应的构造函数中指定 &lt;code&gt;initializeSchema&lt;/code&gt; 布尔值或设置 &lt;code&gt;...initialize-schema=true&lt;/code&gt; 在 &lt;code&gt;application.properties&lt;/code&gt; 文件中。&#xA;此外，您将需要一个已配置的 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; bean。请参阅 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; 部分以了解更多信息。&#xA;以下是所需 bean 的示例：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; EmbeddingModel &lt;span style=&#34;color:#a6e22e&#34;&gt;embeddingModel&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Can be any other EmbeddingModel implementation.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OpenAiEmbeddingModel(OpenAiApi.&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;apiKey&lt;/span&gt;(System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OPENAI_API_KEY&amp;#34;&lt;/span&gt;)).&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要连接到 Chroma，您需要提供实例的访问详细信息。可以通过 Spring Boot 的 application.properties 提供简单的配置，&lt;/p&gt;</description>
    </item>
    <item>
      <title>DeepSeek 聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/deepseek/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/deepseek/</guid>
      <description>&lt;h1 id=&#34;deepseek-聊天&#34;&gt;&#xA;  DeepSeek 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#deepseek-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 DeepSeek 中的各种 AI 语言模型。您可以与 DeepSeek 语言模型交互，并基于 DeepSeek 模型创建多语言对话助手。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 DeepSeek 创建一个 API 密钥才能访问 DeepSeek 语言模型。&#xA;在 [&#xA;  &lt;a href=&#34;https://platform.deepseek.com/sign_up&#34;&gt;DeepSeek 注册页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://platform.deepseek.com/sign_up&#34;&gt;https://platform.deepseek.com/sign_up&lt;/a&gt;)创建一个帐户，并在 [&#xA;  &lt;a href=&#34;https://platform.deepseek.com/api_keys&#34;&gt;API 密钥页面上&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://platform.deepseek.com/api_keys&#34;&gt;https://platform.deepseek.com/api_keys&lt;/a&gt;)生成令牌。&#xA;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.deepseek.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 &lt;code&gt;API 密钥&lt;/code&gt;页面获取的 &lt;code&gt;API 密钥&lt;/code&gt;的值。&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.deepseek.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-deepseek-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 （SpEL） 来引用自定义环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;deepseek&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${DEEPSEEK_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export DEEPSEEK_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-deepseek-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve API key from a secure source or environment variable&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String apiKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DEEPSEEK_API_KEY&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 工件发布在 Spring Milestone 和 Snapshot 存储库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;Artifact Repositories&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些存储库添加到您的构建系统中。&#xA;为了帮助进行[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)，Spring AI 提供了一个 BOM（物料清单），以确保在整个项目中使用一致的 Spring AI 版本。请参阅[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)部分，将 Spring AI BOM 添加到您的构建系统中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Oracle Cloud Infrastructure （OCI） GenAI 嵌入</title>
      <link>https://studyllm.github.io/docs/models/embedding-models/oci-genai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/embedding-models/oci-genai/</guid>
      <description>&lt;h1 id=&#34;oracle-cloud-infrastructure-oci-genai-嵌入&#34;&gt;&#xA;  Oracle Cloud Infrastructure （OCI） GenAI 嵌入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#oracle-cloud-infrastructure-oci-genai-%e5%b5%8c%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://www.oracle.com/artificial-intelligence/generative-ai/generative-ai-service/&#34;&gt;OCI GenAI 服务&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.oracle.com/artificial-intelligence/generative-ai/generative-ai-service/&#34;&gt;https://www.oracle.com/artificial-intelligence/generative-ai/generative-ai-service/&lt;/a&gt;)提供带有按需模型或专用 AI 集群的文本嵌入。&#xA;[&#xA;  &lt;a href=&#34;https://docs.oracle.com/en-us/iaas/Content/generative-ai/embed-models.htm&#34;&gt;OCI 嵌入模型页&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.oracle.com/en-us/iaas/Content/generative-ai/embed-models.htm&#34;&gt;https://docs.oracle.com/en-us/iaas/Content/generative-ai/embed-models.htm&lt;/a&gt;)和 [&#xA;  &lt;a href=&#34;https://docs.oracle.com/en-us/iaas/Content/generative-ai/use-playground-embed.htm&#34;&gt;OCI 文本嵌入页&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.oracle.com/en-us/iaas/Content/generative-ai/use-playground-embed.htm&#34;&gt;https://docs.oracle.com/en-us/iaas/Content/generative-ai/use-playground-embed.htm&lt;/a&gt;)提供了有关在 OCI 上使用和托管嵌入模型的详细信息。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 工件发布在 Maven Central 和 Spring Snapshot 存储库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;Artifact Repositories&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些存储库添加到您的构建系统中。&#xA;为了帮助进行[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)，Spring AI 提供了一个 BOM（物料清单），以确保在整个项目中使用一致的 Spring AI 版本。请参阅[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)部分，将 Spring AI BOM 添加到您的构建系统中。&lt;/p&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 OCI GenAI 嵌入客户端提供 Spring Boot 自动配置。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-model-oci-genai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或您的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;</description>
    </item>
    <item>
      <title>千帆镜像</title>
      <link>https://studyllm.github.io/docs/models/image-models/qianfan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/image-models/qianfan/</guid>
      <description>&lt;h1 id=&#34;千帆镜像&#34;&gt;&#xA;  千帆镜像&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8d%83%e5%b8%86%e9%95%9c%e5%83%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;此功能已移至 Spring AI Community 存储库。&#xA;请访问 [&#xA;  &lt;a href=&#34;https://github.com/spring-ai-community/qianfan&#34;&gt;github.com/spring-ai-community/qianfan&lt;/a&gt;](https://&#xA;  &lt;a href=&#34;https://github.com/spring-ai-community/qianfan&#34;&gt;github.com/spring-ai-community/qianfan&lt;/a&gt;) 获取最新版本。&lt;/p&gt;</description>
    </item>
    <item>
      <title>提示</title>
      <link>https://studyllm.github.io/docs/prompts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/prompts/</guid>
      <description>&lt;h1 id=&#34;提示&#34;&gt;&#xA;  提示&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8f%90%e7%a4%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;提示是指导 AI 模型生成特定输出的输入。这些提示的设计和措辞会显著影响模型的响应。&#xA;在 Spring AI 中与 AI 模型交互的最低级别上，在 Spring AI 中处理提示有点类似于在 Spring MVC 中管理“视图”。这涉及使用动态内容的占位符创建大量文本。然后，根据用户请求或应用程序中的其他代码替换这些占位符。另一个类比是包含某些表达式的占位符的 SQL 语句。&#xA;随着 Spring AI 的发展，它将引入更高级别的抽象来与 AI 模型交互。本节中描述的基础类在角色和功能方面可以比作 JDBC。例如，&lt;code&gt;ChatModel&lt;/code&gt; 类类似于 JDK 中的核心 JDBC 库。&lt;code&gt;ChatClient&lt;/code&gt; 类可以比作 &lt;code&gt;JdbcClient&lt;/code&gt;，它构建在 &lt;code&gt;ChatModel&lt;/code&gt; 之上，并通过 &lt;code&gt;Advisor&lt;/code&gt; 提供更高级的构造&#xA;要考虑过去与模型的交互，请使用额外的上下文文档来增强提示，并引入代理行为。&#xA;随着时间的推移，提示的结构在 AI 领域内不断发展。最初，提示是简单的字符串。随着时间的推移，它们逐渐包括特定输入的占位符，例如 AI 模型可以识别的“USER：”。OpenAI 通过在 AI 模型处理之前将多个消息字符串分类为不同的角色，为提示引入了更多结构。&lt;/p&gt;&#xA;&lt;h2 id=&#34;api-概述&#34;&gt;&#xA;  API 概述&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#api-%e6%a6%82%e8%bf%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;提示-1&#34;&gt;&#xA;  提示&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8f%90%e7%a4%ba-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;通常使用 &lt;code&gt;ChatModel&lt;/code&gt; 的 &lt;code&gt;call（）&lt;/code&gt; 方法，该方法采用 &lt;code&gt;Prompt&lt;/code&gt; 实例并返回 &lt;code&gt;ChatResponse&lt;/code&gt;。&#xA;&lt;code&gt;Prompt&lt;/code&gt; 类充当一系列有组织的 &lt;code&gt;Message&lt;/code&gt; 对象和请求 &lt;code&gt;ChatOptions&lt;/code&gt; 的容器。每条 &lt;code&gt;Message&lt;/code&gt; 在提示中都包含一个独特的角色，其内容和意图不同。这些角色可以包含各种元素，从用户查询到 AI 生成的对相关背景信息的响应。这种安排支持与 AI 模型进行复杂而详细的交互，因为提示是由多条消息构建的，每条消息都分配了在对话中扮演的特定角色。&#xA;下面是 Prompt 类的截断版本，为简洁起见，省略了构造函数和实用程序方法：&lt;/p&gt;</description>
    </item>
    <item>
      <title>沙发基地</title>
      <link>https://studyllm.github.io/docs/vector-databases/couchbase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/vector-databases/couchbase/</guid>
      <description>&lt;h1 id=&#34;沙发基地&#34;&gt;&#xA;  沙发基地&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b2%99%e5%8f%91%e5%9f%ba%e5%9c%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将引导您设置 &lt;code&gt;CouchbaseSearchVectorStore&lt;/code&gt; 以存储文档嵌入并使用 Couchbase 执行相似性搜索。&#xA;[&#xA;  &lt;a href=&#34;https://docs.couchbase.com/server/current/vector-search/vector-search.html&#34;&gt;Couchbase&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.couchbase.com/server/current/vector-search/vector-search.html&#34;&gt;https://docs.couchbase.com/server/current/vector-search/vector-search.html&lt;/a&gt;) 是一个分布式 JSON 文档数据库，具有关系 DBMS 所需的所有功能。除其他功能外，它还允许用户使用基于向量的存储和检索来查询信息。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;一个正在运行的 Couchbase 实例。以下选项可用：Couchbase * [&#xA;  &lt;a href=&#34;https://hub.docker.com/_/couchbase/&#34;&gt;Docker&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://hub.docker.com/_/couchbase/&#34;&gt;https://hub.docker.com/_/couchbase/&lt;/a&gt;)&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;[&#xA;  &lt;a href=&#34;https://cloud.couchbase.com/&#34;&gt;Capella - Couchbase 即服务&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://cloud.couchbase.com/&#34;&gt;https://cloud.couchbase.com/&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;li&gt;[&#xA;  &lt;a href=&#34;https://www.couchbase.com/downloads/?family=couchbase-server&#34;&gt;在本地安装 Couchbase&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.couchbase.com/downloads/?family=couchbase-server&#34;&gt;https://www.couchbase.com/downloads/?family=couchbase-server&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;li&gt;[&#xA;  &lt;a href=&#34;https://www.couchbase.com/downloads/?family=open-source-kubernetes&#34;&gt;Couchbase Kubernetes 作员&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.couchbase.com/downloads/?family=open-source-kubernetes&#34;&gt;https://www.couchbase.com/downloads/?family=open-source-kubernetes&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Couchbase Vector Store 提供了 Spring Boot 自动配置。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-vector-store-couchbase&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或您的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-couchbase-store-spring-boot-starter&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;矢量存储实现可以使用默认选项为您初始化配置的存储桶、范围、集合和搜索索引，但您必须通过在相应的构造函数中指定 &lt;code&gt;initializeSchema&lt;/code&gt; 布尔值来选择加入。&#xA;请查看 vector store 的[&#xA;  &lt;a href=&#34;./#couchbasevector-properties&#34;&gt;配置参数&lt;/a&gt;](#couchbasevector-properties)列表，了解默认值和配置选项。&#xA;此外，您将需要一个已配置的 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; bean。请参阅 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; 部分以了解更多信息。&#xA;现在，您可以将 &lt;code&gt;CouchbaseSearchVectorStore&lt;/code&gt; 自动连接为应用程序中的矢量存储。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker Model Runner 聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/docker-model-runner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/docker-model-runner/</guid>
      <description>&lt;h1 id=&#34;docker-model-runner-聊天&#34;&gt;&#xA;  Docker Model Runner 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#docker-model-runner-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://docs.docker.com/desktop/features/model-runner/&#34;&gt;Docker Model Runner&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.docker.com/desktop/features/model-runner/&#34;&gt;https://docs.docker.com/desktop/features/model-runner/&lt;/a&gt;) 是一个 AI 推理引擎，提供来自[&#xA;  &lt;a href=&#34;https://hub.docker.com/u/ai&#34;&gt;各种提供商&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://hub.docker.com/u/ai&#34;&gt;https://hub.docker.com/u/ai&lt;/a&gt;)的各种模型。&#xA;Spring AI 通过重用现有的 [&#xA;  &lt;a href=&#34;openai-chat.html&#34;&gt;OpenAI&lt;/a&gt;](openai-chat.html) 支持的 &lt;code&gt;ChatClient&lt;/code&gt; 与 Docker Model Runner 集成。为此，请将基本 URL 设置为 &lt;code&gt;[[localhost：12434/engines](http://localhost:12434/engines)](http://localhost:12434/engines)&lt;/code&gt; 并选择提供的 [&#xA;  &lt;a href=&#34;https://hub.docker.com/u/ai&#34;&gt;LLM 模型&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://hub.docker.com/u/ai&#34;&gt;https://hub.docker.com/u/ai&lt;/a&gt;)之一。&#xA;查看 [&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/DockerModelRunnerWithOpenAiChatModelIT.java&#34;&gt;DockerModelRunnerWithOpenAiChatModelIT.java&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/[DockerModelRunnerWithOpenAiChatModelIT.java]%28https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/DockerModelRunnerWithOpenAiChatModelIT.java%29&#34;&gt;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/[DockerModelRunnerWithOpenAiChatModelIT.java](https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/DockerModelRunnerWithOpenAiChatModelIT.java)&lt;/a&gt;) 测试，了解如何将 Docker Model Runner 与 Spring AI 结合使用的示例。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;下载适用于 Mac 的 Docker Desktop 4.40.0。&#xA;选择以下选项之一以启用 Model Runner：&#xA;选项 1：&lt;/li&gt;&#xA;&lt;li&gt;启用 Model Runner docker desktop enable model-runner &amp;ndash;tcp 12434 。&lt;/li&gt;&#xA;&lt;li&gt;将 base-url 设置为 localhost：12434/engines&#xA;选项 2：&lt;/li&gt;&#xA;&lt;li&gt;启用 Model Runner docker desktop enable model-runner 。&lt;/li&gt;&#xA;&lt;li&gt;使用 Testcontainers 并设置 base-url，如下所示：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Container&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; SocatContainer socat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SocatContainer().&lt;span style=&#34;color:#a6e22e&#34;&gt;withTarget&lt;/span&gt;(80, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;model-runner.docker.internal&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; OpenAiApi &lt;span style=&#34;color:#a6e22e&#34;&gt;chatCompletionApi&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; baseUrl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://%s:%d/engines&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;formatted&lt;/span&gt;(socat.&lt;span style=&#34;color:#a6e22e&#34;&gt;getHost&lt;/span&gt;(), socat.&lt;span style=&#34;color:#a6e22e&#34;&gt;getMappedPort&lt;/span&gt;(80));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; OpenAiApi.&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;baseUrl&lt;/span&gt;(baseUrl).&lt;span style=&#34;color:#a6e22e&#34;&gt;apiKey&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您可以通过阅读[&#xA;  &lt;a href=&#34;https://www.docker.com/blog/run-llms-locally/&#34;&gt;使用 Docker 在本地运行 LLM&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.docker.com/blog/run-llms-locally/&#34;&gt;https://www.docker.com/blog/run-llms-locally/&lt;/a&gt;) 博客文章了解有关 Docker Model Runner 的更多信息。&lt;/p&gt;</description>
    </item>
    <item>
      <title>None</title>
      <link>https://studyllm.github.io/docs/vector-databases/elasticsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/vector-databases/elasticsearch/</guid>
      <description>&lt;h1 id=&#34;none&#34;&gt;&#xA;  None&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#none&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将指导您设置 Elasticsearch &lt;code&gt;VectorStore&lt;/code&gt; 以存储文档嵌入并执行相似性搜索。&#xA;[&#xA;  &lt;a href=&#34;https://www.elastic.co/elasticsearch&#34;&gt;Elasticsearch&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.elastic.co/elasticsearch&#34;&gt;https://www.elastic.co/elasticsearch&lt;/a&gt;) 是基于 Apache Lucene 库的开源搜索和分析引擎。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;正在运行的 Elasticsearch 实例。以下选项可用：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;码头工人&lt;/li&gt;&#xA;&lt;li&gt;自我管理的 Elasticsearch&lt;/li&gt;&#xA;&lt;li&gt;弹性云&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Elasticsearch Vector Store 提供 Spring Boot 自动配置。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 或 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件中：&#xA;矢量存储实现可以为您初始化必要的架构，但您必须通过在相应的构造函数中指定 &lt;code&gt;initializeSchema&lt;/code&gt; 布尔值或设置 &lt;code&gt;...initialize-schema=true&lt;/code&gt; 在 &lt;code&gt;application.properties&lt;/code&gt; 文件中。或者，您也可以选择退出初始化并使用 Elasticsearch 客户端手动创建索引，如果索引需要高级映射或其他配置，这可能非常有用。&#xA;请查看 vector store 的[&#xA;  &lt;a href=&#34;./#elasticsearchvector-properties&#34;&gt;配置参数&lt;/a&gt;](#elasticsearchvector-properties)列表，了解默认值和配置选项。还可以通过配置 &lt;code&gt;ElasticsearchVectorStoreOptions&lt;/code&gt; Bean 来设置这些属性。&#xA;此外，您将需要一个已配置的 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; bean。请参阅 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; 部分以了解更多信息。&#xA;现在，您可以将 &lt;code&gt;ElasticsearchVectorStore&lt;/code&gt; 自动连接为应用程序中的矢量存储。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Autowired&lt;/span&gt; VectorStore vectorStore;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;List &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Document&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; documents &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; List.&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Document(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Spring AI rocks!! Spring AI rocks!! Spring AI rocks!! Spring AI rocks!! Spring AI rocks!!&amp;#34;&lt;/span&gt;, Map.&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;meta1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;meta1&amp;#34;&lt;/span&gt;)),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Document(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The World is Big and Salvation Lurks Around the Corner&amp;#34;&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Document(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You walk forward facing the past and you turn back toward the future.&amp;#34;&lt;/span&gt;, Map.&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;meta2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;meta2&amp;#34;&lt;/span&gt;)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Add the documents to Elasticsearch&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vectorStore.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(documents);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve documents similar to a query&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Document&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;vectorStore&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;similaritySearch&lt;/span&gt;(SearchRequest.&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Spring&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;topK&lt;/span&gt;(5).&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;配置属性&#34;&gt;&#xA;  配置属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%85%8d%e7%bd%ae%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;要连接到 Elasticsearch 并使用 &lt;code&gt;ElasticsearchVectorStore&lt;/code&gt;，您需要提供实例的访问详细信息。可以通过 Spring Boot 的 &lt;code&gt;application.yml&lt;/code&gt; 提供简单的配置，&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ollama 嵌入</title>
      <link>https://studyllm.github.io/docs/models/embedding-models/ollama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/embedding-models/ollama/</guid>
      <description>&lt;h1 id=&#34;ollama-嵌入&#34;&gt;&#xA;  Ollama 嵌入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ollama-%e5%b5%8c%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;使用 [&#xA;  &lt;a href=&#34;https://ollama.ai/&#34;&gt;Ollama&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://ollama.ai/&#34;&gt;https://ollama.ai/&lt;/a&gt;)，您可以在本地运行各种 [&#xA;  &lt;a href=&#34;https://ollama.com/search?c=embedding&#34;&gt;AI 模型&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://ollama.com/search?c=embedding&#34;&gt;https://ollama.com/search?c=embedding&lt;/a&gt;)并从中生成嵌入。嵌入是浮点数的向量（列表）。两个向量之间的距离衡量它们的相关性。小距离表示高相关性，大距离表示低相关性。&#xA;&lt;code&gt;OllamaEmbeddingModel&lt;/code&gt; 实现利用 Ollama [&#xA;  &lt;a href=&#34;https://github.com/ollama/ollama/blob/main/docs/api.md#generate-embeddings&#34;&gt;Embeddings API&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://github.com/ollama/ollama/blob/main/docs/api.md#generate-embeddings&#34;&gt;https://github.com/ollama/ollama/blob/main/docs/api.md#generate-embeddings&lt;/a&gt;) 端点。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您首先需要访问 Ollama 实例。有几个选项，包括：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在本地计算机上下载并安装 Ollama。&lt;/li&gt;&#xA;&lt;li&gt;通过 Testcontainers 配置和运行 Ollama。&lt;/li&gt;&#xA;&lt;li&gt;通过 Kubernetes 服务绑定绑定到 Ollama 实例。&#xA;您可以从 [&#xA;  &lt;a href=&#34;https://ollama.com/search?c=embedding&#34;&gt;Ollama 模型库&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://ollama.com/search?c=embedding&#34;&gt;https://ollama.com/search?c=embedding&lt;/a&gt;)中提取要在应用程序中使用的模型：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-shellscript&#34; data-lang=&#34;shellscript&#34;&gt;ollama pull &amp;lt;model-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;您还可以提取数千个免费的 [&#xA;  &lt;a href=&#34;https://huggingface.co/models?library=gguf&amp;amp;sort=trending&#34;&gt;GGUF 紧贴脸模型&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://huggingface.co/models?library=gguf&amp;amp;sort=trending&#34;&gt;https://huggingface.co/models?library=gguf&amp;sort=trending&lt;/a&gt;)中的任何一个：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-shellscript&#34; data-lang=&#34;shellscript&#34;&gt;ollama pull hf.co/&amp;lt;username&amp;gt;/&amp;lt;model-repository&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者，您可以启用选项以自动下载任何需要的模型：[&#xA;  &lt;a href=&#34;./#auto-pulling-models&#34;&gt;Auto-pull Models （自动拉取模型&lt;/a&gt;](#auto-pulling-models) ）。&lt;/p&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Azure Ollama 嵌入模型提供 Spring Boot 自动配置。要启用它，请将以下依赖项添加到您的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 或 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件中：&lt;/p&gt;&#xA;&lt;h2 id=&#34;基本属性&#34;&gt;&#xA;  基本属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9f%ba%e6%9c%ac%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;前缀 &lt;code&gt;spring.ai.ollama&lt;/code&gt; 是配置与 Ollama 的连接的属性前缀&#xA;以下是用于初始化 Ollama 集成和[&#xA;  &lt;a href=&#34;./#auto-pulling-models&#34;&gt;自动拉取模型&lt;/a&gt;](#auto-pulling-models)的属性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>结构化输出转换器</title>
      <link>https://studyllm.github.io/docs/structured-output/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/structured-output/</guid>
      <description>&lt;h1 id=&#34;结构化输出转换器&#34;&gt;&#xA;  结构化输出转换器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bb%93%e6%9e%84%e5%8c%96%e8%be%93%e5%87%ba%e8%bd%ac%e6%8d%a2%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;LLM 生成结构化输出的能力对于依赖可靠解析输出值的下游应用程序非常重要。开发人员希望将 AI 模型的结果快速转换为数据类型，例如 JSON、XML 或 Java 类，这些数据类型可以传递给其他应用程序函数和方法。&#xA;Spring &lt;code&gt;AI 结构化输出转换器&lt;/code&gt;有助于将 LLM 输出转换为结构化格式。如下图所示，此方法围绕 LLM 文本完成端点运行：&#xA;使用通用完成 API 从大型语言模型 （LLM） 生成结构化输出需要仔细处理输入和输出。结构化输出转换器在 LLM 调用之前和之后起着至关重要的作用，确保实现所需的输出结构。&#xA;在 LLM 调用之前，转换器会将格式说明附加到提示符中，为模型生成所需的输出结构提供明确的指导。这些指令充当蓝图，调整模型的响应以符合指定的格式。&#xA;在 LLM 调用之后，转换器获取模型的输出文本并将其转换为结构化类型的实例。此转换过程包括解析原始文本输出并将其映射到相应的结构化数据表示形式，例如 JSON、XML 或特定于域的数据结构。&lt;/p&gt;&#xA;&lt;h2 id=&#34;结构化输出-api&#34;&gt;&#xA;  结构化输出 API&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bb%93%e6%9e%84%e5%8c%96%e8%be%93%e5%87%ba-api&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;StructuredOutputConverter&lt;/code&gt; 接口允许您获取结构化输出，例如将输出映射到基于文本的 AI 模型输出中的 Java 类或值数组。接口定义为：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StructuredOutputConverter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Converter&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String, T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, FormatProvider {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它结合了 Spring [&#xA;  &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/convert/converter/Converter.html&#34;&gt;Converter&amp;lt;String、T&amp;gt;&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/convert/converter/Converter.html&#34;&gt;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/convert/converter/Converter.html&lt;/a&gt;) 接口和 &lt;code&gt;FormatProvider&lt;/code&gt; 接口&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FormatProvider&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;String &lt;span style=&#34;color:#a6e22e&#34;&gt;getFormat&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下图显示了使用结构化输出 API 时的数据流。&#xA;&#xA;  &lt;img src=&#34;./images/structured-output-api.jpg&#34; alt=&#34;&#34; /&gt;&#xA;&lt;code&gt;FormatProvider&lt;/code&gt; 为 AI 模型提供特定的格式设置准则，使其能够生成文本输出，这些输出可以使用 &lt;code&gt;Converter&lt;/code&gt; 转换为指定的目标类型 &lt;code&gt;T&lt;/code&gt;。以下是此类格式设置说明的示例：&#xA;格式说明通常使用 [&#xA;  &lt;a href=&#34;prompt.html#_prompttemplate&#34;&gt;PromptTemplate&lt;/a&gt;](prompt.html#_prompttemplate) 附加到用户输入的末尾，如下所示：&lt;/p&gt;</description>
    </item>
    <item>
      <title>GemFire 矢量商店</title>
      <link>https://studyllm.github.io/docs/vector-databases/gemfire/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/vector-databases/gemfire/</guid>
      <description>&lt;h1 id=&#34;gemfire-矢量商店&#34;&gt;&#xA;  GemFire 矢量商店&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#gemfire-%e7%9f%a2%e9%87%8f%e5%95%86%e5%ba%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将指导您设置 &lt;code&gt;GemFireVectorStore&lt;/code&gt; 以存储文档嵌入并执行相似性搜索。&#xA;[&#xA;  &lt;a href=&#34;https://tanzu.vmware.com/gemfire&#34;&gt;GemFire&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://tanzu.vmware.com/gemfire&#34;&gt;https://tanzu.vmware.com/gemfire&lt;/a&gt;) 是一种分布式内存中的键值存储，以极快的速度执行读写作。它提供高度可用的并行消息队列、持续可用性和事件驱动型架构，您可以在不停机的情况下动态扩展。随着您的数据大小要求增加以支持高性能、实时应用程序，[&#xA;  &lt;a href=&#34;https://tanzu.vmware.com/gemfire&#34;&gt;GemFire&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://tanzu.vmware.com/gemfire&#34;&gt;https://tanzu.vmware.com/gemfire&lt;/a&gt;) 可以轻松地线性扩展。&#xA;[&#xA;  &lt;a href=&#34;https://docs.vmware.com/en/VMware-GemFire-VectorDB/1.0/gemfire-vectordb/overview.html&#34;&gt;GemFire VectorDB&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.vmware.com/en/VMware-GemFire-VectorDB/1.0/gemfire-vectordb/overview.html&#34;&gt;https://docs.vmware.com/en/VMware-GemFire-VectorDB/1.0/gemfire-vectordb/overview.html&lt;/a&gt;) 扩展了 GemFire 的功能，作为一个多功能的矢量数据库，可以有效地存储、检索和执行矢量相似性搜索。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;将 GemFire VectorStore Spring Boot 启动器添加到项目的 Maven 构建文件 &lt;code&gt;pom.xml&lt;/code&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-vector-store-gemfire&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或复制到 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 文件&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &amp;#39;org.springframework.ai:spring-ai-starter-vector-store-gemfire&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;配置属性&#34;&gt;&#xA;  配置属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%85%8d%e7%bd%ae%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;你可以在 Spring Boot 配置中使用以下属性来进一步配置 &lt;code&gt;GemFireVectorStore&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;手动配置&#34;&gt;&#xA;  手动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%89%8b%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;要仅使用 &lt;code&gt;GemFireVectorStore&lt;/code&gt;，请在没有 Spring Boot 的自动配置的情况下，将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-gemfire-store&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于 Gradle 用户，请将以下内容添加到 dependencies 块下的 &lt;code&gt;build.gradle&lt;/code&gt; 文件中，以仅使用 &lt;code&gt;GemFireVectorStore&lt;/code&gt;：&lt;/p&gt;</description>
    </item>
    <item>
      <title>变压器 （ONNX） 嵌入</title>
      <link>https://studyllm.github.io/docs/models/embedding-models/onnx-transformers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/embedding-models/onnx-transformers/</guid>
      <description>&lt;h1 id=&#34;变压器-onnx-嵌入&#34;&gt;&#xA;  变压器 （ONNX） 嵌入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%98%e5%8e%8b%e5%99%a8-onnx-%e5%b5%8c%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;`Transformers&lt;code&gt;EmbeddingModel``` 是一个 &lt;/code&gt;EmbeddingModel`` 实现，它使用选定的[&#xA;  &lt;a href=&#34;https://www.sbert.net/&#34;&gt;句子转换器&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.sbert.net/&#34;&gt;https://www.sbert.net/&lt;/a&gt;)在本地计算[&#xA;  &lt;a href=&#34;https://www.sbert.net/examples/applications/computing-embeddings/README.html#sentence-embeddings-with-transformers&#34;&gt;句子嵌入&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.sbert.net/examples/applications/computing-embeddings/README.html#sentence-embeddings-with-transformers&#34;&gt;https://www.sbert.net/examples/applications/computing-embeddings/README.html#sentence-embeddings-with-transformers&lt;/a&gt;) 。&#xA;您可以使用任何 [&#xA;  &lt;a href=&#34;https://huggingface.co/spaces/mteb/leaderboard&#34;&gt;HuggingFace Embedding 模型&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://huggingface.co/spaces/mteb/leaderboard&#34;&gt;https://huggingface.co/spaces/mteb/leaderboard&lt;/a&gt;) 。&#xA;它使用[&#xA;  &lt;a href=&#34;https://www.sbert.net/docs/pretrained_models.html&#34;&gt;预先训练的&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.sbert.net/docs/pretrained_models.html&#34;&gt;https://www.sbert.net/docs/pretrained_models.html&lt;/a&gt;)  transformer 模型，序列化为 [&#xA;  &lt;a href=&#34;https://onnx.ai/&#34;&gt;Open Neural Network Exchange （ONNX）&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://onnx.ai/&#34;&gt;https://onnx.ai/&lt;/a&gt;) 格式。&#xA;[&#xA;  &lt;a href=&#34;https://djl.ai/&#34;&gt;Deep Java 库&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://djl.ai/&#34;&gt;https://djl.ai/&lt;/a&gt;)和 Microsoft [&#xA;  &lt;a href=&#34;https://onnxruntime.ai/docs/get-started/with-java.html&#34;&gt;ONNX Java 运行时&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://onnxruntime.ai/docs/get-started/with-java.html&#34;&gt;https://onnxruntime.ai/docs/get-started/with-java.html&lt;/a&gt;)库用于运行 ONNX 模型并计算 Java 中的嵌入。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;要在 Java 中运行，我们需要将 Tokenizer 和 Transformer 模型序列化为 &lt;code&gt;ONNX&lt;/code&gt; 格式。&#xA;使用 &lt;code&gt;[[optimum-cli](https://huggingface.co/docs/optimum/exporters/onnx/usage_guides/export_a_model#exporting-a-model-to-onnx-using-the-cli)](https://huggingface.co/docs/optimum/exporters/onnx/usage_guides/export_a_model#exporting-a-model-to-onnx-using-the-cli)&lt;/code&gt; 进行序列化 - 实现此目的的一种快速方法是使用 &lt;code&gt;[[optimum-cli](https://huggingface.co/docs/optimum/exporters/onnx/usage_guides/export_a_model#exporting-a-model-to-onnx-using-the-cli)](https://huggingface.co/docs/optimum/exporters/onnx/usage_guides/export_a_model#exporting-a-model-to-onnx-using-the-cli)&lt;/code&gt; 命令行工具。以下代码段准备了一个 python 虚拟环境，安装所需的包并使用 &lt;code&gt;[[optimum-cli](https://huggingface.co/docs/optimum/exporters/onnx/usage_guides/export_a_model#exporting-a-model-to-onnx-using-the-cli)](https://huggingface.co/docs/optimum/exporters/onnx/usage_guides/export_a_model#exporting-a-model-to-onnx-using-the-cli)&lt;/code&gt; 序列化（例如导出）指定的模型：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 -m venv venv&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source ./venv/bin/activate&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;venv&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; pip install --upgrade pip&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;venv&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; pip install optimum onnx onnxruntime sentence-transformers&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;venv&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; optimum-cli export onnx --model sentence-transformers/all-MiniLM-L6-v2 onnx-output-folder&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该代码段将 [&#xA;  &lt;a href=&#34;https://huggingface.co/sentence-transformers/all-MiniLM-L6-v2&#34;&gt;sentence-transformers/all-MiniLM-L6-v2&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://huggingface.co/[sentence-transformers/all-MiniLM-L6-v2]%28https://huggingface.co/sentence-transformers/all-MiniLM-L6-v2%29&#34;&gt;https://huggingface.co/[sentence-transformers/all-MiniLM-L6-v2](https://huggingface.co/sentence-transformers/all-MiniLM-L6-v2)&lt;/a&gt;) 转换器导出到 &lt;code&gt;onnx-output-folder&lt;/code&gt; 文件夹中。后者包括嵌入模型使用的 &lt;code&gt;tokenizer.json&lt;/code&gt; 和 &lt;code&gt;model.onnx&lt;/code&gt; 文件。&#xA;您可以选择任何 huggingface 转换器标识符或提供直接文件路径，而不是全 MiniLM-L6-v2。&lt;/p&gt;</description>
    </item>
    <item>
      <title>多模态 API</title>
      <link>https://studyllm.github.io/docs/multimodality/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/multimodality/</guid>
      <description>&lt;h1 id=&#34;多模态-api&#34;&gt;&#xA;  多模态 API&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a4%9a%e6%a8%a1%e6%80%81-api&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;人类跨多种数据输入模式同时处理知识。我们的学习方式、我们的体验都是多模式的。我们不仅有视觉，只有音频和文本。&#xA;与这些原则相反，机器学习通常专注于为处理单一模态而量身定制的专用模型。例如，我们为文本转语音或语音转文本等任务开发了音频模型，并为对象检测和分类等任务开发了计算机视觉模型。&#xA;然而，新一波多模态大型语言模型开始出现。示例包括 OpenAI 的 GPT-4o、Google 的 Vertex AI Gemini 1.5、Anthropic 的 Claude3 以及开源产品 Llama3.2、LLaVA 和 BakLLaVA 能够接受多个输入，包括文本图像、音频和视频，并通过集成这些输入来生成文本响应。&lt;/p&gt;&#xA;&lt;h2 id=&#34;spring-ai-多模态&#34;&gt;&#xA;  Spring AI 多模态&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-ai-%e5%a4%9a%e6%a8%a1%e6%80%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;多模态是指模型同时理解和处理来自各种来源的信息（包括文本、图像、音频和其他数据格式）的能力。&#xA;Spring AI 消息 API 提供了支持多模态 LLM 的所有必要抽象。&#xA;&#xA;  &lt;img src=&#34;./images/spring-ai-message-api.jpg&#34; alt=&#34;&#34; /&gt;&#xA;&lt;code&gt;U&lt;/code&gt;s&lt;code&gt;e&lt;/code&gt;r&lt;code&gt;M&lt;/code&gt;e&lt;code&gt;s&lt;/code&gt;s&lt;code&gt;a&lt;/code&gt;g&lt;code&gt;e&lt;/code&gt; &lt;code&gt; &lt;/code&gt;的&lt;code&gt; `````c&lt;/code&gt;o&lt;code&gt;n&lt;/code&gt;t&lt;code&gt;e&lt;/code&gt;n&lt;code&gt;t````` &lt;/code&gt;字&lt;code&gt;段&lt;/code&gt;主&lt;code&gt;要&lt;/code&gt;用&lt;code&gt;于&lt;/code&gt;文&lt;code&gt;本&lt;/code&gt;输&lt;code&gt;入&lt;/code&gt;，&lt;code&gt;而&lt;/code&gt;可&lt;code&gt;选&lt;/code&gt;的&lt;code&gt; ````````m&lt;/code&gt;e&lt;code&gt;d&lt;/code&gt;i&lt;code&gt;a```````` &lt;/code&gt;字&lt;code&gt;段&lt;/code&gt;允&lt;code&gt;许&lt;/code&gt;添&lt;code&gt;加&lt;/code&gt;一&lt;code&gt;个&lt;/code&gt;或&lt;code&gt;多&lt;/code&gt;个&lt;code&gt;不&lt;/code&gt;同&lt;code&gt;形&lt;/code&gt;式&lt;code&gt;的&lt;/code&gt;其&lt;code&gt;他&lt;/code&gt;内&lt;code&gt;容&lt;/code&gt;，&lt;code&gt;例&lt;/code&gt;如&lt;code&gt;图&lt;/code&gt;像&lt;code&gt;、&lt;/code&gt;音&lt;code&gt;频&lt;/code&gt;和&lt;code&gt;视&lt;/code&gt;频&lt;code&gt;。````````M&lt;/code&gt;i&lt;code&gt;m&lt;/code&gt;e&lt;code&gt;T&lt;/code&gt;y&lt;code&gt;p&lt;/code&gt;e```````` &lt;code&gt;指&lt;/code&gt;定&lt;code&gt;模&lt;/code&gt;态&lt;code&gt;类&lt;/code&gt;型&lt;code&gt;。&lt;/code&gt;根&lt;code&gt;据&lt;/code&gt;使&lt;code&gt;用&lt;/code&gt;的&lt;code&gt; &lt;/code&gt;L&lt;code&gt;L&lt;/code&gt;M&lt;code&gt;，`````M&lt;/code&gt;e&lt;code&gt;d&lt;/code&gt;i&lt;code&gt;a````` &lt;/code&gt;d&lt;code&gt;a&lt;/code&gt;t&lt;code&gt;a&lt;/code&gt; &lt;code&gt;字&lt;/code&gt;段&lt;code&gt;可&lt;/code&gt;以&lt;code&gt;是&lt;/code&gt;作&lt;code&gt;为&lt;/code&gt; &lt;code&gt;R``e``s``o``u``r``c``e&lt;/code&gt; &lt;code&gt;对&lt;/code&gt;象&lt;code&gt;的&lt;/code&gt;原&lt;code&gt;始&lt;/code&gt;媒&lt;code&gt;体&lt;/code&gt;内&lt;code&gt;容&lt;/code&gt;，&lt;code&gt;也&lt;/code&gt;可&lt;code&gt;以&lt;/code&gt;是&lt;code&gt;内&lt;/code&gt;容&lt;code&gt;的&lt;/code&gt; &lt;code&gt;U``R``I&lt;/code&gt;。&lt;code&gt; 例如，我们可以将下面的图片 （&lt;/code&gt;multimodal.test.png``） 作为输入，并要求 LLM 解释它所看到的内容。&#xA;&#xA;  &lt;img src=&#34;./images/multimodal.test.png&#34; alt=&#34;&#34; /&gt;&#xA;对于大多数多模态 LLM，Spring AI 代码将如下所示：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; imageResource &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ClassPathResource(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/multimodal.test.png&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; userMessage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; UserMessage(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Explain what do you see in this picture?&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// content&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Media(MimeTypeUtils.&lt;span style=&#34;color:#a6e22e&#34;&gt;IMAGE_PNG&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;imageResource&lt;/span&gt;)); &lt;span style=&#34;color:#75715e&#34;&gt;// media&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ChatResponse response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chatModel.&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Prompt(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;userMessage&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或使用 Fluent [&#xA;  &lt;a href=&#34;chatclient.html&#34;&gt;ChatClient&lt;/a&gt;](chatclient.html) API：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Groq 聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/groq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/groq/</guid>
      <description>&lt;h1 id=&#34;groq-聊天&#34;&gt;&#xA;  Groq 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#groq-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://groq.com/&#34;&gt;Groq&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://groq.com/&#34;&gt;https://groq.com/&lt;/a&gt;) 是一种非常快速、基于 LPU™ 的 AI 推理引擎，支持各种 [&#xA;  &lt;a href=&#34;https://console.groq.com/docs/models&#34;&gt;AI 模型&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://console.groq.com/docs/models&#34;&gt;https://console.groq.com/docs/models&lt;/a&gt;) ，支持&lt;code&gt;工具/函数调用&lt;/code&gt; ，并公开与 &lt;code&gt;OpenAI API&lt;/code&gt; 兼容的端点。&#xA;Spring AI 通过重用现有的 [&#xA;  &lt;a href=&#34;openai-chat.html&#34;&gt;OpenAI&lt;/a&gt;](openai-chat.html) 客户端与 [&#xA;  &lt;a href=&#34;https://groq.com/&#34;&gt;Groq&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://groq.com/&#34;&gt;https://groq.com/&lt;/a&gt;) 集成。为此，您需要获取 [&#xA;  &lt;a href=&#34;https://groq.com/&#34;&gt;Groq&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://groq.com/&#34;&gt;https://groq.com/&lt;/a&gt;) Api 密钥 ，将 base-url 设置为 [&#xA;  &lt;a href=&#34;https://api.groq.com/openai&#34;&gt;api.groq.com/openai&lt;/a&gt;](https://&#xA;  &lt;a href=&#34;https://api.groq.com/openai&#34;&gt;api.groq.com/openai&lt;/a&gt;) 并选择提供的 [&#xA;  &lt;a href=&#34;https://groq.com/&#34;&gt;Groq&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://groq.com/&#34;&gt;https://groq.com/&lt;/a&gt;) 模型之一。&#xA;查看 [&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/GroqWithOpenAiChatModelIT.java&#34;&gt;GroqWithOpenAiChatModelIT.java&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/[GroqWithOpenAiChatModelIT.java]%28https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/GroqWithOpenAiChatModelIT.java%29&#34;&gt;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/[GroqWithOpenAiChatModelIT.java](https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/GroqWithOpenAiChatModelIT.java)&lt;/a&gt;) 测试，了解将 Groq 与 Spring AI 结合使用的示例。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;创建 API 密钥 ：访问此处创建 API 密钥。Spring AI 项目定义了一个名为 spring.ai.openai.api-key 的配置属性，您应该将其设置为从 groq.com 获取的 API 密钥的值。&lt;/li&gt;&#xA;&lt;li&gt;设置 Groq URL：您必须将 spring.ai.openai.base-url 属性设置为 api.groq.com/openai。&lt;/li&gt;&#xA;&lt;li&gt;Select a Groq Model：使用属性 spring.ai.openai.chat.model=&lt;model name&gt; 从可用的 Groq 模型中进行选择。&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置这些配置属性：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.openai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-groq-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.openai.base-url&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;https://api.groq.com/openai&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.openai.chat.model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;llama3-70b-8192&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 （SpEL） 来引用自定义环境变量：&lt;/p&gt;</description>
    </item>
    <item>
      <title>MariaDB 矢量存储</title>
      <link>https://studyllm.github.io/docs/vector-databases/mariadb-vector-store/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/vector-databases/mariadb-vector-store/</guid>
      <description>&lt;h1 id=&#34;mariadb-矢量存储&#34;&gt;&#xA;  MariaDB 矢量存储&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mariadb-%e7%9f%a2%e9%87%8f%e5%ad%98%e5%82%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将引导您设置 &lt;code&gt;MariaDBVectorStore&lt;/code&gt; 以存储文档嵌入并执行相似性搜索。&#xA;[&#xA;  &lt;a href=&#34;https://mariadb.org/projects/mariadb-vector/&#34;&gt;MariaDB Vector&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://mariadb.org/projects/mariadb-vector/&#34;&gt;https://mariadb.org/projects/mariadb-vector/&lt;/a&gt;) 是 MariaDB 11.7 的一部分，支持存储和搜索机器学习生成的嵌入。它使用向量索引提供高效的向量相似性搜索功能，同时支持余弦相似度和欧几里得距离度量。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一个正在运行的 MariaDB （11.7+） 实例。以下选项可用：&lt;/li&gt;&#xA;&lt;li&gt;Docker 镜像&lt;/li&gt;&#xA;&lt;li&gt;MariaDB 服务器&lt;/li&gt;&#xA;&lt;li&gt;如果需要，EmbeddingModel 的 API 密钥，用于生成 MariaDBVectorStore 存储的嵌入。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 MariaDB Vector Store 提供 Spring Boot 自动配置。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-vector-store-mariadb&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或您的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-vector-store-mariadb&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;矢量存储实现可以为您初始化所需的架构，但您必须通过在相应的构造函数中指定 &lt;code&gt;initializeSchema&lt;/code&gt; 布尔值或设置 &lt;code&gt;...initialize-schema=true&lt;/code&gt; 在 &lt;code&gt;application.properties&lt;/code&gt; 文件中。&#xA;此外，您将需要一个已配置的 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; bean。请参阅 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; 部分以了解更多信息。&#xA;例如，要使用 [&#xA;  &lt;a href=&#34;../embeddings/openai-embeddings.html&#34;&gt;OpenAI EmbeddingModel&lt;/a&gt;](../embeddings/openai-embeddings.html)，请添加以下依赖项：&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenAI 嵌入</title>
      <link>https://studyllm.github.io/docs/models/embedding-models/openai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/embedding-models/openai/</guid>
      <description>&lt;h1 id=&#34;openai-嵌入&#34;&gt;&#xA;  OpenAI 嵌入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#openai-%e5%b5%8c%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 OpenAI 的文本嵌入模型。OpenAI 的文本嵌入测量文本字符串的相关性。嵌入是浮点数的向量（列表）。两个向量之间的距离衡量它们的相关性。小距离表示高相关性，大距离表示低相关性。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 OpenAI 创建 API 才能访问 OpenAI 嵌入模型。&#xA;在 [&#xA;  &lt;a href=&#34;https://platform.openai.com/signup&#34;&gt;OpenAI 注册页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://platform.openai.com/signup&#34;&gt;https://platform.openai.com/signup&lt;/a&gt;)创建一个帐户，并在 [&#xA;  &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;API 密钥页面上&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;https://platform.openai.com/account/api-keys&lt;/a&gt;)生成令牌。&#xA;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.openai.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 openai.com 获取的 &lt;code&gt;API 密钥&lt;/code&gt;的值。&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.openai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-openai-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 （SpEL） 来引用环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;openai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${OPENAI_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export OPENAI_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-openai-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve API key from a secure source or environment variable&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String apiKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OPENAI_API_KEY&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 工件发布在 Maven Central 和 Spring Snapshot 存储库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;Artifact Repositories&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些存储库添加到您的构建系统中。&#xA;为了帮助进行[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)，Spring AI 提供了一个 BOM（物料清单），以确保在整个项目中使用一致的 Spring AI 版本。请参阅[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)部分，将 Spring AI BOM 添加到您的构建系统中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PostgresML 嵌入</title>
      <link>https://studyllm.github.io/docs/models/embedding-models/postgresml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/embedding-models/postgresml/</guid>
      <description>&lt;h1 id=&#34;postgresml-嵌入&#34;&gt;&#xA;  PostgresML 嵌入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#postgresml-%e5%b5%8c%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 PostgresML 文本嵌入模型。&#xA;嵌入是文本的数字表示形式。它们用于将单词和句子表示为向量，即数字数组。嵌入可以通过使用距离度量比较数值向量的相似性来查找相似的文本片段，也可以用作其他机器学习模型的输入特征，因为大多数算法不能直接使用文本。&#xA;许多预先训练的 LLM 可用于从 PostgresML 中的文本生成嵌入。您可以浏览所有可用的[&#xA;  &lt;a href=&#34;https://huggingface.co/models?library=sentence-transformers&#34;&gt;模型&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://huggingface.co/models?library=sentence-transformers&#34;&gt;https://huggingface.co/models?library=sentence-transformers&lt;/a&gt;)以在 Hugging Face 上找到最佳解决方案。&lt;/p&gt;&#xA;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 工件发布在 Maven Central 和 Spring Snapshot 存储库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;Artifact Repositories&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些存储库添加到您的构建系统中。&#xA;为了帮助进行[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)，Spring AI 提供了一个 BOM（物料清单），以确保在整个项目中使用一致的 Spring AI 版本。请参阅[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)部分，将 Spring AI BOM 添加到您的构建系统中。&lt;/p&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Azure PostgresML 嵌入模型提供 Spring Boot 自动配置。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-model-postgresml-embedding&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或您的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-model-postgresml-embedding&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 &lt;code&gt;spring.ai.postgresml.embedding.options.*&lt;/code&gt; 属性配置 &lt;code&gt;PostgresMlEmbeddingModel&lt;/code&gt;。链接&lt;/p&gt;</description>
    </item>
    <item>
      <title>拥抱脸聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/hugging-face/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/hugging-face/</guid>
      <description>&lt;h1 id=&#34;拥抱脸聊天&#34;&gt;&#xA;  拥抱脸聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8b%a5%e6%8a%b1%e8%84%b8%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Hugging Face Text Generation Inference （TGI） 是一种专门的部署解决方案，用于在云中为大型语言模型 （LLM） 提供服务，使其可通过 API 访问。TGI 通过连续批处理、令牌流式处理和高效内存管理等功能为文本生成任务提供优化的性能。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要在 Hugging Face 上创建一个推理终端节点，并创建一个 API 令牌来访问该终端节点。更多详情可[&#xA;  &lt;a href=&#34;https://huggingface.co/docs/inference-endpoints/index&#34;&gt;在此处&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://huggingface.co/docs/inference-endpoints/index&#34;&gt;https://huggingface.co/docs/inference-endpoints/index&lt;/a&gt;)找到。&#xA;Spring AI 项目定义了两个配置属性：&#xA;您可以[&#xA;  &lt;a href=&#34;https://ui.endpoints.huggingface.co/&#34;&gt;在此处&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://ui.endpoints.huggingface.co/&#34;&gt;https://ui.endpoints.huggingface.co/&lt;/a&gt;)的推理终端节点的 UI 上找到您的推理终端节点 URL。&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置这些配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.huggingface.chat.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-huggingface-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.huggingface.chat.url&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-inference-endpoint-url&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 （SpEL） 来引用自定义环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;huggingface&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;chat&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${HUGGINGFACE_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;url&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${HUGGINGFACE_ENDPOINT_URL}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export HUGGINGFACE_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-huggingface-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export HUGGINGFACE_ENDPOINT_URL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-inference-endpoint-url&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置这些配置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve API key and endpoint URL from secure sources or environment variables&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String apiKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HUGGINGFACE_API_KEY&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String endpointUrl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HUGGINGFACE_ENDPOINT_URL&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 工件发布在 Maven Central 和 Spring Snapshot 存储库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;Artifact Repositories&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些存储库添加到您的构建系统中。&#xA;为了帮助进行[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)，Spring AI 提供了一个 BOM（物料清单），以确保在整个项目中使用一致的 Spring AI 版本。请参阅[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)部分，将 Spring AI BOM 添加到您的构建系统中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>米尔沃斯</title>
      <link>https://studyllm.github.io/docs/vector-databases/milvus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/vector-databases/milvus/</guid>
      <description>&lt;h1 id=&#34;米尔沃斯&#34;&gt;&#xA;  米尔沃斯&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%b1%b3%e5%b0%94%e6%b2%83%e6%96%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://milvus.io/&#34;&gt;Milvus&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://milvus.io/&#34;&gt;https://milvus.io/&lt;/a&gt;) 是一个开源向量数据库，在数据科学和机器学习领域引起了广泛关注。它的突出特点之一在于它对向量索引和查询的强大支持。[&#xA;  &lt;a href=&#34;https://milvus.io/&#34;&gt;Milvus&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://milvus.io/&#34;&gt;https://milvus.io/&lt;/a&gt;) 采用最先进的尖端算法来加速搜索过程，使其在检索相似向量时非常高效，即使在处理大量数据集时也是如此。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一个正在运行的 Milvus 实例。以下选项可用：&lt;/li&gt;&#xA;&lt;li&gt;Milvus 独立版：Docker、Operator、helm、DEB/RPM、Docker Compose。&lt;/li&gt;&#xA;&lt;li&gt;Milvus Cluster：Operator、Helm。&lt;/li&gt;&#xA;&lt;li&gt;如果需要，EmbeddingModel 的 API 密钥，用于生成 MilvusVectorStore 存储的嵌入。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;依赖&#34;&gt;&#xA;  依赖&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%be%9d%e8%b5%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;然后将 Milvus VectorStore 启动启动依赖项添加到你的项目中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-vector-store-milvus&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或您的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-vector-store-milvus&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;矢量存储实现可以为您初始化必要的架构，但您必须通过在相应的构造函数中指定 &lt;code&gt;initializeSchema&lt;/code&gt; 布尔值或设置 &lt;code&gt;...initialize-schema=true&lt;/code&gt; 在 &lt;code&gt;application.properties&lt;/code&gt; 文件中。&#xA;Vector Store 还需要一个 &lt;code&gt;EmbeddingModel&lt;/code&gt; 实例来计算文档的嵌入。您可以选择一个可用的 &lt;code&gt;EmbeddingModel&lt;/code&gt; Implementations。&#xA;要连接和配置 &lt;code&gt;MilvusVectorStore&lt;/code&gt;，您需要提供实例的访问详细信息。可以通过 Spring Boot 的 &lt;code&gt;application.yml&lt;/code&gt; 提供简单的配置&#xA;现在，你可以在应用程序中自动连接 Milvus Vector Store 并使用它&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Autowired&lt;/span&gt; VectorStore vectorStore;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;List &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Document&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; documents &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; List.&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Document(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Spring AI rocks!! Spring AI rocks!! Spring AI rocks!! Spring AI rocks!! Spring AI rocks!!&amp;#34;&lt;/span&gt;, Map.&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;meta1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;meta1&amp;#34;&lt;/span&gt;)),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Document(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The World is Big and Salvation Lurks Around the Corner&amp;#34;&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Document(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You walk forward facing the past and you turn back toward the future.&amp;#34;&lt;/span&gt;, Map.&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;meta2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;meta2&amp;#34;&lt;/span&gt;)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Add the documents to Milvus Vector Store&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vectorStore.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(documents);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve documents similar to a query&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Document&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;vectorStore&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;similaritySearch&lt;/span&gt;(SearchRequest.&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Spring&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;topK&lt;/span&gt;(5).&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;手动配置&#34;&gt;&#xA;  手动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%89%8b%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;除了使用 Spring Boot 自动配置之外，你可以手动配置 &lt;code&gt;MilvusVectorStore&lt;/code&gt;。要将以下依赖项添加到您的项目中：&lt;/p&gt;</description>
    </item>
    <item>
      <title>聊天记忆</title>
      <link>https://studyllm.github.io/docs/chat-memory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/chat-memory/</guid>
      <description>&lt;h1 id=&#34;聊天记忆&#34;&gt;&#xA;  聊天记忆&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%81%8a%e5%a4%a9%e8%ae%b0%e5%bf%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;大型语言模型 （LLM） 是无状态的，这意味着它们不会保留有关以前交互的信息。当您希望在多个交互中维护上下文或状态时，这可能是一个限制。为了解决这个问题，Spring AI 提供了聊天内存功能，允许您在与 LLM 的多次交互中存储和检索信息。&#xA;&lt;code&gt;ChatMemory&lt;/code&gt; 抽象允许您实现各种类型的内存以支持不同的使用案例。消息的底层存储由 &lt;code&gt;ChatMemory&lt;/code&gt;Repository 处理，其唯一职责是存储和检索消息。由 &lt;code&gt;ChatMemory&lt;/code&gt; 实现决定要保留哪些消息以及何时删除它们。策略示例可能包括保留最后 N 条消息、将消息保留一段时间或将消息保持在某个令牌限制内。&#xA;在选择内存类型之前，必须了解聊天内存和聊天记录之间的区别。&#xA;&lt;code&gt;ChatMemory&lt;/code&gt; 抽象旨在管理聊天内存 。它允许您存储和检索与当前对话上下文相关的消息。但是，它并不是存储聊天记录的最佳选择。如果您需要维护所有交换消息的完整记录，您应该考虑使用不同的方法，例如依靠 Spring Data 来有效存储和检索完整的聊天历史记录。&lt;/p&gt;&#xA;&lt;h2 id=&#34;快速开始&#34;&gt;&#xA;  快速开始&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bf%ab%e9%80%9f%e5%bc%80%e5%a7%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 会自动配置一个 &lt;code&gt;ChatMemory&lt;/code&gt; bean，您可以直接在应用程序中使用。默认情况下，它使用内存存储库来存储消息 （InMemory&lt;code&gt;ChatMemory&lt;/code&gt;Repository），并使用 MessageWindow&lt;code&gt;ChatMemory&lt;/code&gt; 实现来管理对话历史记录。如果已经配置了不同的存储库（例如，Cassandra、JDBC 或 Neo4j），Spring AI 将改用该存储库。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Autowired&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ChatMemory chatMemory;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下部分将进一步描述 Spring AI 中可用的不同内存类型和存储库。&lt;/p&gt;&#xA;&lt;h2 id=&#34;内存类型&#34;&gt;&#xA;  内存类型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%86%85%e5%ad%98%e7%b1%bb%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;ChatMemory&lt;/code&gt; 抽象允许您实现各种类型的内存以适应不同的用例。内存类型的选择会显著影响应用程序的性能和行为。本节介绍了 Spring AI 提供的内置内存类型及其特性。&lt;/p&gt;&#xA;&lt;h2 id=&#34;消息窗口聊天内存&#34;&gt;&#xA;  消息窗口聊天内存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b6%88%e6%81%af%e7%aa%97%e5%8f%a3%e8%81%8a%e5%a4%a9%e5%86%85%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;MessageWindowChatMemory&lt;/code&gt; 将消息窗口维护到指定的最大大小。当消息数超过最大值时，将删除较旧的消息，同时保留系统消息。默认窗口大小为 20 封邮件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MessageWindowChatMemory memory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MessageWindowChatMemory.&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;maxMessages&lt;/span&gt;(10)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是 Spring AI 用于自动配置 &lt;code&gt;ChatMemory&lt;/code&gt; bean 的默认消息类型。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mistral AI 聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/mistral-ai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/mistral-ai/</guid>
      <description>&lt;h1 id=&#34;mistral-ai-聊天&#34;&gt;&#xA;  Mistral AI 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mistral-ai-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持来自 Mistral AI 的各种 AI 语言模型。您可以与 Mistral AI 语言模型交互，并基于 Mistral 模型创建多语言对话助手。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 Mistral AI 创建 API 才能访问 Mistral AI 语言模型。&#xA;在 [&#xA;  &lt;a href=&#34;https://auth.mistral.ai/ui/registration&#34;&gt;Mistral AI 注册页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://auth.mistral.ai/ui/registration&#34;&gt;https://auth.mistral.ai/ui/registration&lt;/a&gt;)创建账户，并在 [&#xA;  &lt;a href=&#34;https://console.mistral.ai/api-keys/&#34;&gt;API 密钥页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://console.mistral.ai/api-keys/&#34;&gt;https://console.mistral.ai/api-keys/&lt;/a&gt;)生成令牌。&#xA;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.mistralai.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 console.mistral.ai 获取的 &lt;code&gt;API 密钥&lt;/code&gt;的值。&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.mistralai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-mistralai-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 （SpEL） 来引用自定义环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;mistralai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${MISTRALAI_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export MISTRALAI_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-mistralai-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;</description>
    </item>
    <item>
      <title>None</title>
      <link>https://studyllm.github.io/docs/vector-databases/mongodb-atlas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/vector-databases/mongodb-atlas/</guid>
      <description>&lt;h1 id=&#34;none&#34;&gt;&#xA;  None&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#none&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将引导您将 MongoDB Atlas 设置为矢量存储以用于 Spring AI。&lt;/p&gt;&#xA;&lt;h2 id=&#34;什么是-mongodb-atlas&#34;&gt;&#xA;  什么是 MongoDB Atlas？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af-mongodb-atlas&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://www.mongodb.com/products/platform/atlas-database&#34;&gt;MongoDB Atlas&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.mongodb.com/products/platform/atlas-database&#34;&gt;https://www.mongodb.com/products/platform/atlas-database&lt;/a&gt;) 是 MongoDB 提供的完全托管式云数据库，可在 AWS、Azure 和 GCP 中使用。Atlas 支持对 MongoDB 文档数据进行原生矢量搜索和全文搜索。&#xA;[&#xA;  &lt;a href=&#34;https://www.mongodb.com/products/platform/atlas-vector-search&#34;&gt;MongoDB Atlas Vector Search&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.mongodb.com/products/platform/atlas-vector-search&#34;&gt;https://www.mongodb.com/products/platform/atlas-vector-search&lt;/a&gt;) 允许您将嵌入存储在 MongoDB 文档中，创建向量搜索索引，并使用近似最近邻算法（分层可导航小世界）执行 KNN 搜索。您可以在 MongoDB 聚合阶段中使用 &lt;code&gt;$vectorSearch&lt;/code&gt; 聚合运算符对向量嵌入执行搜索。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;运行 MongoDB 版本 6.0.11、7.0.2 或更高版本的 Atlas 集群。要开始使用 MongoDB Atlas，您可以按照此处的说明进行作。确保您的 IP 地址包含在 Atlas 项目的访问列表中 。&lt;/li&gt;&#xA;&lt;li&gt;启用了 Vector Search 的正在运行的 MongoDB Atlas 实例&lt;/li&gt;&#xA;&lt;li&gt;配置了向量搜索索引的集合&lt;/li&gt;&#xA;&lt;li&gt;具有 id （string）、content （string）、元数据 （document） 和嵌入 （vector） 字段的集合架构&lt;/li&gt;&#xA;&lt;li&gt;索引和集合作的适当访问权限&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 MongoDB Atlas Vector Store 提供 Spring Boot 自动配置。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;</description>
    </item>
    <item>
      <title>QianFan 嵌入</title>
      <link>https://studyllm.github.io/docs/models/embedding-models/qianfan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/embedding-models/qianfan/</guid>
      <description>&lt;h1 id=&#34;qianfan-嵌入&#34;&gt;&#xA;  QianFan 嵌入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#qianfan-%e5%b5%8c%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;此功能已移至 Spring AI Community 存储库。&#xA;请访问 [&#xA;  &lt;a href=&#34;https://github.com/spring-ai-community/qianfan&#34;&gt;github.com/spring-ai-community/qianfan&lt;/a&gt;](https://&#xA;  &lt;a href=&#34;https://github.com/spring-ai-community/qianfan&#34;&gt;github.com/spring-ai-community/qianfan&lt;/a&gt;) 获取最新版本。&lt;/p&gt;</description>
    </item>
    <item>
      <title>工具调用</title>
      <link>https://studyllm.github.io/docs/tool-calling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/tool-calling/</guid>
      <description>&lt;h1 id=&#34;工具调用&#34;&gt;&#xA;  工具调用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b7%a5%e5%85%b7%e8%b0%83%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;工具调用 （也称为函数调用 ）是 AI 应用程序中的一种常见模式，允许模型与一组 API 或工具进行交互，从而增强其功能。&#xA;工具主要用于：&#xA;尽管我们通常将工具调用称为模型功能，但实际上由客户端应用程序提供工具调用逻辑。模型只能请求工具调用并提供输入参数，而应用程序负责从输入参数执行工具调用并返回结果。该模型永远无法访问作为工具提供的任何 API，这是一个关键的安全考虑因素。&#xA;Spring AI 提供了方便的 API 来定义工具、解决来自模型的工具调用请求以及执行工具调用。以下部分概述了 Spring AI 中的工具调用功能。&lt;/p&gt;&#xA;&lt;h2 id=&#34;快速开始&#34;&gt;&#xA;  快速开始&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bf%ab%e9%80%9f%e5%bc%80%e5%a7%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;让我们看看如何在 Spring AI 中开始使用工具调用。我们将实现两个简单的工具：一个用于信息检索，一个用于采取行动。信息检索工具将用于获取用户所在时区的当前日期和时间。作工具将用于设置指定时间的闹钟。&lt;/p&gt;&#xA;&lt;h2 id=&#34;信息检索&#34;&gt;&#xA;  信息检索&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bf%a1%e6%81%af%e6%a3%80%e7%b4%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;AI 模型无法访问实时信息。模型无法回答任何假设了解信息（如当前日期或天气预报）的问题。但是，我们可以提供一个可以检索此信息的工具，并让模型在需要访问实时信息时调用此工具。&#xA;让我们在 &lt;code&gt;DateTimeTools&lt;/code&gt; 类中实现一个工具来获取用户时区的当前日期和时间。该工具将不接受任何参数。Spring Framework 的 &lt;code&gt;LocaleContextHolder&lt;/code&gt; 可以提供用户的时区。该工具将被定义为带有 &lt;code&gt;@Tool&lt;/code&gt; 注释的方法。为了帮助模型了解是否以及何时调用此工具，我们将提供这些工具的作用的详细说明。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.time.LocalDateTime;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.ai.tool.annotation.Tool;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.context.i18n.LocaleContextHolder;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DateTimeTools&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Tool&lt;/span&gt;(description &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Get the current date and time in the user&amp;#39;s timezone&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    String &lt;span style=&#34;color:#a6e22e&#34;&gt;getCurrentDateTime&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; LocalDateTime.&lt;span style=&#34;color:#a6e22e&#34;&gt;now&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;atZone&lt;/span&gt;(LocaleContextHolder.&lt;span style=&#34;color:#a6e22e&#34;&gt;getTimeZone&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;toZoneId&lt;/span&gt;()).&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，让我们使该工具可用于模型。在此示例中，我们将使用 &lt;code&gt;ChatClient&lt;/code&gt; 与模型交互。我们将通过 &lt;code&gt;tools（）&lt;/code&gt; 方法传递 &lt;code&gt;DateTimeTools&lt;/code&gt; 的实例，从而为模型提供该工具。当模型需要知道当前日期和时间时，它将请求调用该工具。在内部，&lt;code&gt;ChatClient&lt;/code&gt; 将调用该工具并将结果返回给模型，然后模型将使用工具调用结果生成对原始问题的最终响应。&lt;/p&gt;</description>
    </item>
    <item>
      <title>MiniMax 聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/minimax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/minimax/</guid>
      <description>&lt;h1 id=&#34;minimax-聊天&#34;&gt;&#xA;  MiniMax 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#minimax-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 MiniMax 的各种 AI 语言模型。您可以与 MiniMax 语言模型交互，并基于 MiniMax 模型创建多语言对话助手。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 MiniMax 创建 API 才能访问 MiniMax 语言模型。&#xA;在 [&#xA;  &lt;a href=&#34;https://www.minimaxi.com/login&#34;&gt;MiniMax 注册页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.minimaxi.com/login&#34;&gt;https://www.minimaxi.com/login&lt;/a&gt;)创建一个帐户，并在 [&#xA;  &lt;a href=&#34;https://www.minimaxi.com/user-center/basic-information/interface-key&#34;&gt;API 密钥页面上&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.minimaxi.com/user-center/basic-information/interface-key&#34;&gt;https://www.minimaxi.com/user-center/basic-information/interface-key&lt;/a&gt;)生成令牌。&#xA;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.minimax.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从“&lt;code&gt;API 密钥&lt;/code&gt;”页面获取的 &lt;code&gt;API 密钥&lt;/code&gt;的值。&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.minimax.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-minimax-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 （SpEL） 来引用环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;minimax&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${MINIMAX_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export MINIMAX_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-minimax-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve API key from a secure source or environment variable&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String apiKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MINIMAX_API_KEY&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 工件发布在 Maven Central 和 Spring Snapshot 存储库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;Artifact Repositories&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些存储库添加到您的构建系统中。&#xA;为了帮助进行[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)，Spring AI 提供了一个 BOM（物料清单），以确保在整个项目中使用一致的 Spring AI 版本。请参阅[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)部分，将 Spring AI BOM 添加到您的构建系统中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ZhiPuAI 嵌入</title>
      <link>https://studyllm.github.io/docs/models/embedding-models/zhipu-ai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/embedding-models/zhipu-ai/</guid>
      <description>&lt;h1 id=&#34;zhipuai-嵌入&#34;&gt;&#xA;  ZhiPuAI 嵌入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#zhipuai-%e5%b5%8c%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 ZhiPuAI 的文本嵌入模型。智普 AI 的文本嵌入向量可以测量文本字符串的相关性。嵌入是浮点数的向量（列表）。两个向量之间的距离衡量它们的相关性。小距离表示高相关性，大距离表示低相关性。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 ZhiPuAI 创建 API 才能访问 ZhiPu AI 语言模型。&#xA;在  [&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/login&#34;&gt;智普 AI 注册页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/login&#34;&gt;https://open.bigmodel.cn/login&lt;/a&gt;)创建账号，并在 [&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/usercenter/apikeys&#34;&gt;API Keys 页面生成 Token&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/usercenter/apikeys&#34;&gt;https://open.bigmodel.cn/usercenter/apikeys&lt;/a&gt;)。&#xA;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.zhipu.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 &lt;code&gt;API 密钥&lt;/code&gt;页面获取的 &lt;code&gt;API 密钥&lt;/code&gt;的值。&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.zhipu.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-zhipu-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 （SpEL） 来引用环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;zhipu&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${ZHIPU_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export ZHIPU_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-zhipu-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve API key from a secure source or environment variable&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String apiKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ZHIPU_API_KEY&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 工件发布在 Maven Central 和 Spring Snapshot 存储库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;Artifact Repositories&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些存储库添加到您的构建系统中。&#xA;为了帮助进行[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)，Spring AI 提供了一个 BOM（物料清单），以确保在整个项目中使用一致的 Spring AI 版本。请参阅[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)部分，将 Spring AI BOM 添加到您的构建系统中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>新 4j</title>
      <link>https://studyllm.github.io/docs/vector-databases/neo4j/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/vector-databases/neo4j/</guid>
      <description>&lt;h1 id=&#34;新-4j&#34;&gt;&#xA;  新 4j&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%96%b0-4j&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将引导您完成设置 &lt;code&gt;Neo4jVectorStore&lt;/code&gt; 以存储文档嵌入并执行相似性搜索。&#xA;[&#xA;  &lt;a href=&#34;https://neo4j.com&#34;&gt;Neo4j&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://neo4j.com&#34;&gt;https://neo4j.com&lt;/a&gt;) 是一个开源的 NoSQL 图形数据库。它是一个完全事务性的数据库 （ACID），将数据存储为由节点组成的图形，通过关系连接。受现实世界结构的启发，它允许对复杂数据进行高查询性能，同时为开发人员保持直观和简单。&#xA;[&#xA;  &lt;a href=&#34;https://neo4j.com/docs/cypher-manual/current/indexes-for-vector-search/&#34;&gt;Neo4j 的 Vector Search&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://neo4j.com/docs/cypher-manual/current/indexes-for-vector-search/&#34;&gt;https://neo4j.com/docs/cypher-manual/current/indexes-for-vector-search/&lt;/a&gt;) 允许用户从大型数据集中查询向量嵌入。嵌入是数据对象（如文本、图像、音频或文档）的数字表示形式。嵌入可以存储在 Node 属性上，并且可以使用 &lt;code&gt;db.index.vector.queryNodes（）&lt;/code&gt; 函数进行查询。这些索引由 Lucene 提供支持，使用分层可导航小世界图 （HNSW） 对向量字段执行 k 个近似最近邻 （k-ANN） 查询。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一个正在运行的 Neo4j （5.15+） 实例。以下选项可用：&lt;/li&gt;&#xA;&lt;li&gt;Docker 镜像&lt;/li&gt;&#xA;&lt;li&gt;Neo4j 桌面&lt;/li&gt;&#xA;&lt;li&gt;Neo4j 光环&lt;/li&gt;&#xA;&lt;li&gt;Neo4j 服务器实例&lt;/li&gt;&#xA;&lt;li&gt;如果需要，EmbeddingModel 的 API 密钥，用于生成 Neo4jVectorStore 存储的嵌入。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Neo4j Vector Store 提供 Spring Boot 自动配置。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-vector-store-neo4j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或您的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Moonshot AI 聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/moonshot-ai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/moonshot-ai/</guid>
      <description>&lt;h1 id=&#34;moonshot-ai-聊天&#34;&gt;&#xA;  Moonshot AI 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#moonshot-ai-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;此功能已移至 Spring AI Community 存储库。&#xA;请访问 [&#xA;  &lt;a href=&#34;https://github.com/spring-ai-community/moonshot&#34;&gt;github.com/spring-ai-community/moonshot&lt;/a&gt;](https://&#xA;  &lt;a href=&#34;https://github.com/spring-ai-community/moonshot&#34;&gt;github.com/spring-ai-community/moonshot&lt;/a&gt;) 获取最新版本。&lt;/p&gt;</description>
    </item>
    <item>
      <title>开放搜索</title>
      <link>https://studyllm.github.io/docs/vector-databases/opensearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/vector-databases/opensearch/</guid>
      <description>&lt;h1 id=&#34;开放搜索&#34;&gt;&#xA;  开放搜索&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%80%e6%94%be%e6%90%9c%e7%b4%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将指导您设置 &lt;code&gt;OpenSearchVectorStore&lt;/code&gt; 以存储文档嵌入并执行相似性搜索。&#xA;[&#xA;  &lt;a href=&#34;https://opensearch.org&#34;&gt;OpenSearch&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://opensearch.org&#34;&gt;https://opensearch.org&lt;/a&gt;) 是一个开源搜索和分析引擎，最初是从 Elasticsearch 分叉而来的，在 Apache License 2.0 下分发。它通过简化 AI 生成资产的集成和管理来增强 AI 应用程序开发。[&#xA;  &lt;a href=&#34;https://opensearch.org&#34;&gt;OpenSearch&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://opensearch.org&#34;&gt;https://opensearch.org&lt;/a&gt;) 支持向量、词法和混合搜索功能，利用高级向量数据库功能来促进低延迟查询和相似性搜索，如[&#xA;  &lt;a href=&#34;https://opensearch.org/platform/search/vector-database.html&#34;&gt;向量数据库页面上&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://opensearch.org/platform/search/vector-database.html&#34;&gt;https://opensearch.org/platform/search/vector-database.html&lt;/a&gt;)详述的那样。&#xA;[&#xA;  &lt;a href=&#34;https://opensearch.org/docs/latest/search-plugins/knn/index/&#34;&gt;OpenSearch k-NN&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://opensearch.org/docs/latest/search-plugins/knn/index/&#34;&gt;https://opensearch.org/docs/latest/search-plugins/knn/index/&lt;/a&gt;) 功能允许用户从大型数据集中查询向量嵌入。嵌入是数据对象（如文本、图像、音频或文档）的数字表示形式。嵌入可以存储在索引中，并使用各种相似性函数进行查询。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;正在运行的 OpenSearch 实例。以下选项可用：&lt;/li&gt;&#xA;&lt;li&gt;自我管理的 OpenSearch&lt;/li&gt;&#xA;&lt;li&gt;Amazon OpenSearch 服务&lt;/li&gt;&#xA;&lt;li&gt;如果需要，EmbeddingModel 的 API 密钥，用于生成由 OpenSearchVectorStore 存储的嵌入。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 OpenSearch Vector Store 提供 Spring Boot 自动配置。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-vector-store-opensearch&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或复制到您的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-vector-store-opensearch&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于 Amazon OpenSearch Service，请改用以下依赖项：&lt;/p&gt;</description>
    </item>
    <item>
      <title>NVIDIA 聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/nvidia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/nvidia/</guid>
      <description>&lt;h1 id=&#34;nvidia-聊天&#34;&gt;&#xA;  NVIDIA 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#nvidia-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://docs.api.nvidia.com/nim/reference/llm-apis&#34;&gt;NVIDIA LLM API&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.api.nvidia.com/nim/reference/llm-apis&#34;&gt;https://docs.api.nvidia.com/nim/reference/llm-apis&lt;/a&gt;) 是一个代理 AI 推理引擎，提供来自[&#xA;  &lt;a href=&#34;https://docs.api.nvidia.com/nim/reference/llm-apis#models&#34;&gt;各种提供商&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.api.nvidia.com/nim/reference/llm-apis#models&#34;&gt;https://docs.api.nvidia.com/nim/reference/llm-apis#models&lt;/a&gt;)的各种模型。&#xA;Spring AI 通过重用现有的 [&#xA;  &lt;a href=&#34;openai-chat.html&#34;&gt;OpenAI&lt;/a&gt;](openai-chat.html) 客户端与 NVIDIA LLM API 集成。为此，您需要将 base-url 设置为 &lt;code&gt;[[integrate.api.nvidia.com](https://integrate.api.nvidia.com)](https://[integrate.api.nvidia.com](https://integrate.api.nvidia.com))&lt;/code&gt;，选择一个提供的 [&#xA;  &lt;a href=&#34;https://docs.api.nvidia.com/nim/reference/llm-apis#model&#34;&gt;LLM 模型&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.api.nvidia.com/nim/reference/llm-apis#model&#34;&gt;https://docs.api.nvidia.com/nim/reference/llm-apis#model&lt;/a&gt;)并为其获取 &lt;code&gt;api-key&lt;/code&gt;。&#xA;查看 [&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/NvidiaWithOpenAiChatModelIT.java&#34;&gt;NvidiaWithOpenAiChatModelIT.java&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/[NvidiaWithOpenAiChatModelIT.java]%28https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/NvidiaWithOpenAiChatModelIT.java%29&#34;&gt;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/[NvidiaWithOpenAiChatModelIT.java](https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/NvidiaWithOpenAiChatModelIT.java)&lt;/a&gt;) 测试，了解将 NVIDIA LLM API 与 Spring AI 结合使用的示例。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;创建具有足够积分的 NVIDIA 帐户。&lt;/li&gt;&#xA;&lt;li&gt;选择要使用的 LLM 模型。例如下面屏幕截图中的 meta/llama-3.1-70b-instruct。&lt;/li&gt;&#xA;&lt;li&gt;从所选模型的页面中，您可以获取用于访问此模型的 api-key。&#xA;&#xA;  &lt;img src=&#34;./images/spring-ai-nvidia-registration.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 OpenAI Chat 客户端提供 Spring Boot 自动配置。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-model-openai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或您的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Oracle Database 23ai — AI 向量搜索</title>
      <link>https://studyllm.github.io/docs/vector-databases/oracle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/vector-databases/oracle/</guid>
      <description>&lt;h1 id=&#34;oracle-database-23ai--ai-向量搜索&#34;&gt;&#xA;  Oracle Database 23ai — AI 向量搜索&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#oracle-database-23ai--ai-%e5%90%91%e9%87%8f%e6%90%9c%e7%b4%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Oracle Database 23ai （23.4+） 的 [&#xA;  &lt;a href=&#34;https://docs.oracle.com/en/database/oracle/oracle-database/23/vecse/overview-ai-vector-search.html&#34;&gt;AI Vector Search&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.oracle.com/en/database/oracle/oracle-database/23/vecse/overview-ai-vector-search.html&#34;&gt;https://docs.oracle.com/en/database/oracle/oracle-database/23/vecse/overview-ai-vector-search.html&lt;/a&gt;) 功能以 Spring AI &lt;code&gt;VectorStore&lt;/code&gt; 的形式提供，可帮助您存储文档嵌入并执行相似性搜索。当然，所有其他功能也都可用。&lt;/p&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;首先，将 Oracle Vector Store 引导启动程序依赖项添加到您的项目中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-vector-store-oracle&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或您的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-vector-store-oracle&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果需要此向量存储来初始化架构，则需要在相应的构造函数中为 &lt;code&gt;initializeSchema&lt;/code&gt; 布尔参数传递 true，或者通过设置 &lt;code&gt;...initialize-schema=true&lt;/code&gt; 在 &lt;code&gt;application.properties&lt;/code&gt; 文件中。&#xA;Vector Store 还需要一个 &lt;code&gt;EmbeddingModel&lt;/code&gt; 实例来计算文档的嵌入。您可以选择一个可用的 &lt;code&gt;EmbeddingModel&lt;/code&gt; Implementations。&#xA;例如，要使用 [&#xA;  &lt;a href=&#34;../embeddings/openai-embeddings.html&#34;&gt;OpenAI EmbeddingModel&lt;/a&gt;](../embeddings/openai-embeddings.html)，请将以下依赖项添加到您的项目中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-model-openai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或您的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-model-openai&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要连接并配置 &lt;code&gt;OracleVectorStore&lt;/code&gt;，您需要提供数据库的访问详细信息。可以通过 Spring Boot 的 &lt;code&gt;application.yml&lt;/code&gt; 提供简单的配置&#xA;现在，您可以在应用程序中自动连接 &lt;code&gt;OracleVectorStore&lt;/code&gt; 并使用它：&lt;/p&gt;</description>
    </item>
    <item>
      <title>评估测试</title>
      <link>https://studyllm.github.io/docs/model-evaluation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/model-evaluation/</guid>
      <description>&lt;h1 id=&#34;评估测试&#34;&gt;&#xA;  评估测试&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%af%84%e4%bc%b0%e6%b5%8b%e8%af%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;测试 AI 应用程序需要评估生成的内容，以确保 AI 模型没有产生幻觉响应。&#xA;评估响应的一种方法是使用 AI 模型本身进行评估。选择最佳 AI 模型进行评估，该模型可能与用于生成响应的模型不同。&#xA;用于评估响应的 Spring AI 接口是 &lt;code&gt;Evaluator&lt;/code&gt;，定义为：&#xA;评估的输入是 &lt;code&gt;EvaluationRequest&lt;/code&gt;，定义为&lt;/p&gt;&#xA;&lt;h2 id=&#34;相关性评估器&#34;&gt;&#xA;  相关性评估器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%9b%b8%e5%85%b3%e6%80%a7%e8%af%84%e4%bc%b0%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;`Relevancy&lt;code&gt;Evaluator``` 是 &lt;/code&gt;Evaluator&lt;code&gt;接口的一种实现，旨在评估 AI 生成的响应与提供的上下文的相关性。此评估器通过确定 AI 模型的响应是否与用户对检索到的上下文的输入相关，帮助评估 RAG 流的质量。 评估基于用户输入、AI 模型的响应和上下文信息。它使用提示模板询问 AI 模型响应是否与用户输入和上下文相关。 这是&lt;/code&gt;RelevancyEvaluator`` 使用的默认提示模板：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Your task is to evaluate if the response for the query&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is in line with the context information provided.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;You have two options to answer. Either YES or NO.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Answer YES, if the response for the query&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is in line with context information otherwise NO.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Query:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{query}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Response:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{response}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Context:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{context}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Answer:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;集成测试中的使用&#34;&gt;&#xA;  集成测试中的使用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9b%86%e6%88%90%e6%b5%8b%e8%af%95%e4%b8%ad%e7%9a%84%e4%bd%bf%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;以下是在集成测试中使用 &lt;code&gt;RelevancyEvaluator&lt;/code&gt; 的示例，使用 &lt;code&gt;RetrievalAugmentationAdvisor&lt;/code&gt; 验证 RAG 流的结果：&lt;/p&gt;</description>
    </item>
    <item>
      <title>None</title>
      <link>https://studyllm.github.io/docs/vector-databases/pgvector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/vector-databases/pgvector/</guid>
      <description>&lt;h1 id=&#34;none&#34;&gt;&#xA;  None&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#none&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将指导您设置 PGvector &lt;code&gt;VectorStore&lt;/code&gt; 以存储文档嵌入并执行相似性搜索。&#xA;[&#xA;  &lt;a href=&#34;https://github.com/pgvector/pgvector&#34;&gt;PGvector&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://github.com/pgvector/pgvector&#34;&gt;https://github.com/pgvector/pgvector&lt;/a&gt;) 是 PostgreSQL 的开源扩展，支持存储和搜索机器学习生成的嵌入。它提供了不同的功能，使用户能够识别精确和近似的最近邻。它旨在与其他 PostgreSQL 功能无缝协作，包括索引和查询。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;首先，您需要访问启用了 &lt;code&gt;vector&lt;/code&gt;、&lt;code&gt;hstore&lt;/code&gt; 和 &lt;code&gt;uuid-ossp&lt;/code&gt; 扩展的 PostgreSQL 实例。&#xA;启动时，&lt;code&gt;PgVectorStore&lt;/code&gt; 将尝试安装所需的数据库扩展，并创建所需的 &lt;code&gt;vector_store&lt;/code&gt; 表（如果不存在）。&#xA;或者，您可以手动执行此作，如下所示：&#xA;接下来，如果需要，请提供 [&#xA;  &lt;a href=&#34;../embeddings.html#available-implementations&#34;&gt;EmbeddingModel&lt;/a&gt;](../embeddings.html#available-implementations) 的 API 密钥，以生成 &lt;code&gt;PgVectorStore&lt;/code&gt; 存储的嵌入。&lt;/p&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;然后将 PgVectorStore 启动启动器依赖项添加到您的项目中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-vector-store-pgvector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或您的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-vector-store-pgvector&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;矢量存储实现可以为您初始化所需的架构，但您必须通过在相应的构造函数中指定 &lt;code&gt;initializeSchema&lt;/code&gt; 布尔值或设置 &lt;code&gt;...initialize-schema=true&lt;/code&gt; 在 &lt;code&gt;application.properties&lt;/code&gt; 文件中。&#xA;Vector Store 还需要一个 &lt;code&gt;EmbeddingModel&lt;/code&gt; 实例来计算文档的嵌入。您可以选择一个可用的 &lt;code&gt;EmbeddingModel&lt;/code&gt; Implementations。&#xA;例如，要使用 [&#xA;  &lt;a href=&#34;../embeddings/openai-embeddings.html&#34;&gt;OpenAI EmbeddingModel&lt;/a&gt;](../embeddings/openai-embeddings.html)，请将以下依赖项添加到您的项目中：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ollama 聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/ollama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/ollama/</guid>
      <description>&lt;h1 id=&#34;ollama-聊天&#34;&gt;&#xA;  Ollama 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ollama-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;使用 [&#xA;  &lt;a href=&#34;https://ollama.ai/&#34;&gt;Ollama&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://ollama.ai/&#34;&gt;https://ollama.ai/&lt;/a&gt;)，您可以在本地运行各种大型语言模型 （LLM） 并从中生成文本。Spring AI 通过 &lt;code&gt;[[Ollama](https://ollama.ai/)](https://ollama.ai/)ChatModel&lt;/code&gt; API 支持 [&#xA;  &lt;a href=&#34;https://ollama.ai/&#34;&gt;Ollama&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://ollama.ai/&#34;&gt;https://ollama.ai/&lt;/a&gt;) 聊天完成功能。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您首先需要访问 Ollama 实例。有几个选项，包括：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在本地计算机上下载并安装 Ollama。&lt;/li&gt;&#xA;&lt;li&gt;通过 Testcontainers 配置和运行 Ollama。&lt;/li&gt;&#xA;&lt;li&gt;通过 Kubernetes 服务绑定绑定到 Ollama 实例。&#xA;您可以从 [&#xA;  &lt;a href=&#34;https://ollama.com/library&#34;&gt;Ollama 模型库&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://ollama.com/library&#34;&gt;https://ollama.com/library&lt;/a&gt;)中提取要在应用程序中使用的模型：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-shellscript&#34; data-lang=&#34;shellscript&#34;&gt;ollama pull &amp;lt;model-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;您还可以提取数千个免费的 [&#xA;  &lt;a href=&#34;https://huggingface.co/models?library=gguf&amp;amp;sort=trending&#34;&gt;GGUF 紧贴脸模型&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://huggingface.co/models?library=gguf&amp;amp;sort=trending&#34;&gt;https://huggingface.co/models?library=gguf&amp;sort=trending&lt;/a&gt;)中的任何一个：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-shellscript&#34; data-lang=&#34;shellscript&#34;&gt;ollama pull hf.co/&amp;lt;username&amp;gt;/&amp;lt;model-repository&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者，您可以启用选项以自动下载任何需要的模型：[&#xA;  &lt;a href=&#34;./#auto-pulling-models&#34;&gt;Auto-pull Models （自动拉取模型&lt;/a&gt;](#auto-pulling-models) ）。&lt;/p&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Ollama 聊天集成提供了 Spring Boot 自动配置。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 或 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件中：&lt;/p&gt;&#xA;&lt;h2 id=&#34;基本属性&#34;&gt;&#xA;  基本属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9f%ba%e6%9c%ac%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;前缀 &lt;code&gt;spring.ai.ollama&lt;/code&gt; 是配置与 Ollama 的连接的属性前缀。&#xA;以下是用于初始化 Ollama 集成和[&#xA;  &lt;a href=&#34;./#auto-pulling-models&#34;&gt;自动拉取模型&lt;/a&gt;](#auto-pulling-models)的属性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>可观察性</title>
      <link>https://studyllm.github.io/docs/observability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/observability/</guid>
      <description>&lt;h1 id=&#34;可观察性&#34;&gt;&#xA;  可观察性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%af%e8%a7%82%e5%af%9f%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 基于 Spring 生态系统中的可观察性功能构建，以提供对 AI 相关作的见解。Spring AI 为其核心组件提供指标和跟踪功能：&lt;code&gt;ChatClient&lt;/code&gt;（包括 &lt;code&gt;Advisor&lt;/code&gt;）、&#xA;&lt;code&gt;ChatModel&lt;/code&gt;、&lt;code&gt;EmbeddingModel&lt;/code&gt;、&lt;code&gt;ImageModel&lt;/code&gt; 和 &lt;code&gt;VectorStore&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;聊天客户端&#34;&gt;&#xA;  聊天客户端&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%81%8a%e5%a4%a9%e5%ae%a2%e6%88%b7%e7%ab%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;spring.ai.chat.client&lt;/code&gt; 在调用 ChatClient &lt;code&gt;调用（）&lt;/code&gt; 或 &lt;code&gt;stream（）&lt;/code&gt; 作时记录观察结果。它们测量执行调用所花费的时间并传播相关的跟踪信息。&lt;/p&gt;&#xA;&lt;h2 id=&#34;提示内容&#34;&gt;&#xA;  提示内容&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8f%90%e7%a4%ba%e5%86%85%e5%ae%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;ChatClient&lt;/code&gt; 提示内容通常很大，并且可能包含敏感信息。由于这些原因，默认情况下不会导出它。&#xA;Spring AI 支持记录提示内容以帮助进行调试和故障排除。&lt;/p&gt;&#xA;&lt;h2 id=&#34;输入数据-已弃用&#34;&gt;&#xA;  输入数据 （已弃用）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%be%93%e5%85%a5%e6%95%b0%e6%8d%ae-%e5%b7%b2%e5%bc%83%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;ChatClient&lt;/code&gt; 输入数据通常很大，并且可能包含敏感信息。由于这些原因，默认情况下不会导出它。&#xA;Spring AI 支持记录 Importing 数据以帮助进行调试和故障排除。&lt;/p&gt;&#xA;&lt;h2 id=&#34;聊天客户顾问&#34;&gt;&#xA;  聊天客户顾问&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%81%8a%e5%a4%a9%e5%ae%a2%e6%88%b7%e9%a1%be%e9%97%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;spring.ai.advisor&lt;/code&gt; 观察值在执行 advisor 时记录。它们测量在 advisor 中花费的时间（包括在内部 advisor 上花费的时间）并传播相关的跟踪信息。&lt;/p&gt;&#xA;&lt;h2 id=&#34;聊天模型&#34;&gt;&#xA;  聊天模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%81%8a%e5%a4%a9%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;gen_ai.client.operation&lt;/code&gt; 的观察结果是在调用 ChatModel &lt;code&gt;call&lt;/code&gt; 或 &lt;code&gt;stream&lt;/code&gt; 方法时记录的。它们测量方法完成所花费的时间并传播相关的跟踪信息。&lt;/p&gt;&#xA;&lt;h2 id=&#34;聊天提示和完成数据&#34;&gt;&#xA;  聊天提示和完成数据&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%81%8a%e5%a4%a9%e6%8f%90%e7%a4%ba%e5%92%8c%e5%ae%8c%e6%88%90%e6%95%b0%e6%8d%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;聊天提示和完成数据通常很大，并且可能包含敏感信息。由于这些原因，默认情况下不会导出它。&#xA;Spring AI 支持记录聊天提示和完成数据，这对于故障排除场景非常有用。当跟踪可用时，日志将包含跟踪信息，以便更好地关联。&lt;/p&gt;</description>
    </item>
    <item>
      <title>困惑聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/perplexity-ai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/perplexity-ai/</guid>
      <description>&lt;h1 id=&#34;困惑聊天&#34;&gt;&#xA;  困惑聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%b0%e6%83%91%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://perplexity.ai/&#34;&gt;Perplexity AI&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://perplexity.ai/&#34;&gt;https://perplexity.ai/&lt;/a&gt;) 提供独特的 AI 服务，将其语言模型与实时搜索功能集成在一起。它提供了多种模型，并支持对话式 AI 的流式响应。&#xA;Spring AI 通过重用现有的 [&#xA;  &lt;a href=&#34;openai-chat.html&#34;&gt;OpenAI&lt;/a&gt;](openai-chat.html) 客户端与 Perplexity AI 集成。要开始使用，您需要获取 [&#xA;  &lt;a href=&#34;https://docs.perplexity.ai/guides/getting-started&#34;&gt;Perplexity API 密钥&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.perplexity.ai/guides/getting-started&#34;&gt;https://docs.perplexity.ai/guides/getting-started&lt;/a&gt;) ，配置基本 URL，然后选择一个受支持的[&#xA;  &lt;a href=&#34;https://docs.perplexity.ai/guides/model-cards&#34;&gt;模型&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.perplexity.ai/guides/model-cards&#34;&gt;https://docs.perplexity.ai/guides/model-cards&lt;/a&gt;) 。&#xA;查看 [&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/PerplexityWithOpenAiChatModelIT.java&#34;&gt;PerplexityWithOpenAiChatModelIT.java&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/[PerplexityWithOpenAiChatModelIT.java]%28https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/PerplexityWithOpenAiChatModelIT.java%29&#34;&gt;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/[PerplexityWithOpenAiChatModelIT.java](https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/PerplexityWithOpenAiChatModelIT.java)&lt;/a&gt;) 测试，了解将 Perplexity 与 Spring AI 结合使用的示例。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;创建 API 密钥 ：访问此处创建 API 密钥。使用 Spring AI 项目中的 spring.ai.openai.api-key 属性对其进行配置。&lt;/li&gt;&#xA;&lt;li&gt;设置 Perplexity Base URL：将 spring.ai.openai.base-url 属性设置为 api.perplexity.ai。&lt;/li&gt;&#xA;&lt;li&gt;Select a Perplexity Model（选择困惑度模型 ）：使用属性 spring.ai.openai.chat.model=&lt;model name&gt; 指定模型。有关可用选项，请参阅支持的型号 。&lt;/li&gt;&#xA;&lt;li&gt;设置聊天完成路径 ：设置为 spring.ai.openai.chat.completions-path /chat/completions。有关更多详细信息，请参阅  聊天完成 API。&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置这些配置属性：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.openai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-perplexity-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.openai.base-url&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;https://api.perplexity.ai&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.openai.chat.model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;llama-3.1-sonar-small-128k-online&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.openai.chat.completions-path&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/chat/completions&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 （SpEL） 来引用自定义环境变量：&lt;/p&gt;</description>
    </item>
    <item>
      <title>松果</title>
      <link>https://studyllm.github.io/docs/vector-databases/pinecone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/vector-databases/pinecone/</guid>
      <description>&lt;h1 id=&#34;松果&#34;&gt;&#xA;  松果&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9d%be%e6%9e%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将引导您设置 Pinecone &lt;code&gt;VectorStore&lt;/code&gt; 以存储文档嵌入并执行相似性搜索。&#xA;[&#xA;  &lt;a href=&#34;https://www.pinecone.io/&#34;&gt;Pinecone&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.pinecone.io/&#34;&gt;https://www.pinecone.io/&lt;/a&gt;) 是一种流行的基于云的矢量数据库，可让您有效地存储和搜索矢量。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;要设置 &lt;code&gt;PineconeVectorStore&lt;/code&gt;，请从您的 Pinecone 账户收集以下详细信息：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;松果 API 密钥&lt;/li&gt;&#xA;&lt;li&gt;松果指数名称&lt;/li&gt;&#xA;&lt;li&gt;Pinecone 命名空间&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Pinecone Vector Store 提供 Spring Boot 自动配置。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-vector-store-pinecone&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或您的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-vector-store-pinecone&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此外，您将需要一个已配置的 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; bean。请参阅 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; 部分以了解更多信息。&#xA;以下是所需 bean 的示例：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; EmbeddingModel &lt;span style=&#34;color:#a6e22e&#34;&gt;embeddingModel&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Can be any other EmbeddingModel implementation.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OpenAiEmbeddingModel(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OpenAiApi(System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OPENAI_API_KEY&amp;#34;&lt;/span&gt;)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要连接到 Pinecone，您需要提供实例的访问详细信息。可以通过 Spring Boot 的 application.properties 提供简单的配置，&lt;/p&gt;</description>
    </item>
    <item>
      <title>None</title>
      <link>https://studyllm.github.io/docs/development-time-services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/development-time-services/</guid>
      <description>&lt;h1 id=&#34;none&#34;&gt;&#xA;  None&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#none&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 提供了 Spring Boot 自动配置，用于建立与通过 Docker Compose 运行的模型服务或矢量存储的连接。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&#xA;或您的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;h2 id=&#34;服务连接&#34;&gt;&#xA;  服务连接&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%8d%e5%8a%a1%e8%bf%9e%e6%8e%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;该 &lt;code&gt;spring-ai-spring-boot-docker-compose&lt;/code&gt; 模块中提供了以下服务连接工厂：&lt;/p&gt;</description>
    </item>
    <item>
      <title>None</title>
      <link>https://studyllm.github.io/docs/vector-databases/qdrant/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/vector-databases/qdrant/</guid>
      <description>&lt;h1 id=&#34;none&#34;&gt;&#xA;  None&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#none&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将指导您设置 Qdrant &lt;code&gt;VectorStore&lt;/code&gt; 以存储文档嵌入并执行相似性搜索。&#xA;[&#xA;  &lt;a href=&#34;https://www.qdrant.tech/&#34;&gt;Qdrant&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.qdrant.tech/&#34;&gt;https://www.qdrant.tech/&lt;/a&gt;) 是一个开源、高性能的矢量搜索引擎/数据库。它使用 HNSW （Hierarchical Navigable Small World） 算法进行高效的 k-NN 搜索作，并为基于元数据的查询提供高级过滤功能。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Qdrant 实例：按照 Qdrant 文档中的安装说明设置 Qdrant 实例。&lt;/li&gt;&#xA;&lt;li&gt;如果需要，EmbeddingModel 的 API 密钥，用于生成 QdrantVectorStore 存储的嵌入。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Qdrant Vector Store 提供 Spring Boot 自动配置。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-vector-store-qdrant&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或您的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-vector-store-qdrant&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请查看 vector store 的[&#xA;  &lt;a href=&#34;./#qdrant-vectorstore-properties&#34;&gt;配置参数&lt;/a&gt;](#qdrant-vectorstore-properties)列表，了解默认值和配置选项。&#xA;矢量存储实现可以为您初始化必要的架构，但您必须通过在生成器中指定 &lt;code&gt;initializeSchema&lt;/code&gt; 布尔值或设置 &lt;code&gt;...initialize-schema=true&lt;/code&gt; 在 &lt;code&gt;application.properties&lt;/code&gt; 文件中。&#xA;此外，您将需要一个已配置的 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; bean。请参阅 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; 部分以了解更多信息。&#xA;现在，您可以将 &lt;code&gt;QdrantVectorStore&lt;/code&gt; 作为应用程序中的矢量存储进行自动连接。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenAI 聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/openai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/openai/</guid>
      <description>&lt;h1 id=&#34;openai-聊天&#34;&gt;&#xA;  OpenAI 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#openai-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持来自 OpenAI 的各种 AI 语言模型，OpenAI 是 ChatGPT 背后的公司，由于其创建了行业领先的文本生成模型和嵌入，该公司在激发人们对 AI 驱动的文本生成的兴趣方面发挥了重要作用。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 OpenAI 创建一个 API 才能访问 ChatGPT 模型。&#xA;在 [&#xA;  &lt;a href=&#34;https://platform.openai.com/signup&#34;&gt;OpenAI 注册页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://platform.openai.com/signup&#34;&gt;https://platform.openai.com/signup&lt;/a&gt;)创建一个帐户，并在 [&#xA;  &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;API 密钥页面上&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;https://platform.openai.com/account/api-keys&lt;/a&gt;)生成令牌。&#xA;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.openai.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 openai.com 获取的 &lt;code&gt;API 密钥&lt;/code&gt;的值。&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.openai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-openai-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 （SpEL） 来引用自定义环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;openai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${OPENAI_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export OPENAI_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-openai-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve API key from a secure source or environment variable&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String apiKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OPENAI_API_KEY&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 工件发布在 Maven Central 和 Spring Snapshot 存储库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;Artifact Repositories&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些存储库添加到您的构建系统中。&#xA;为了帮助进行[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)，Spring AI 提供了一个 BOM（物料清单），以确保在整个项目中使用一致的 Spring AI 版本。请参阅[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)部分，将 Spring AI BOM 添加到您的构建系统中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>千帆聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/qianfan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/qianfan/</guid>
      <description>&lt;h1 id=&#34;千帆聊天&#34;&gt;&#xA;  千帆聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8d%83%e5%b8%86%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;此功能已移至 Spring AI Community 存储库。&#xA;请访问 [&#xA;  &lt;a href=&#34;https://github.com/spring-ai-community/qianfan&#34;&gt;github.com/spring-ai-community/qianfan&lt;/a&gt;](https://&#xA;  &lt;a href=&#34;https://github.com/spring-ai-community/qianfan&#34;&gt;github.com/spring-ai-community/qianfan&lt;/a&gt;) 获取最新版本。&lt;/p&gt;</description>
    </item>
    <item>
      <title>雷迪斯</title>
      <link>https://studyllm.github.io/docs/vector-databases/redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/vector-databases/redis/</guid>
      <description>&lt;h1 id=&#34;雷迪斯&#34;&gt;&#xA;  雷迪斯&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9b%b7%e8%bf%aa%e6%96%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将指导您设置 &lt;code&gt;RedisVectorStore&lt;/code&gt; 以存储文档嵌入并执行相似性搜索。&#xA;[&#xA;  &lt;a href=&#34;https://redis.io&#34;&gt;Redis&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://redis.io&#34;&gt;https://redis.io&lt;/a&gt;) 是一种开源（BSD 许可）内存中数据结构存储，用作数据库、缓存、消息代理和流式处理引擎。[&#xA;  &lt;a href=&#34;https://redis.io&#34;&gt;Redis&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://redis.io&#34;&gt;https://redis.io&lt;/a&gt;) 提供数据结构，例如字符串、哈希、列表、集、带有范围查询的排序集、位图、hyperloglog、地理空间索引和流。&#xA;[&#xA;  &lt;a href=&#34;https://redis.io/docs/interact/search-and-query/&#34;&gt;Redis Search and Query&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://redis.io/docs/interact/search-and-query/&#34;&gt;https://redis.io/docs/interact/search-and-query/&lt;/a&gt;) 扩展了 Redis OSS 的核心功能，允许您将 Redis 作为矢量数据库使用：&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Redis Vector Store 提供 Spring Boot 自动配置。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-vector-store-redis&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或您的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-vector-store-redis&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;矢量存储实现可以为您初始化必要的架构，但您必须通过在相应的构造函数中指定 &lt;code&gt;initializeSchema&lt;/code&gt; 布尔值或设置 &lt;code&gt;...initialize-schema=true&lt;/code&gt; 在 &lt;code&gt;application.properties&lt;/code&gt; 文件中。&#xA;请查看 vector store 的[&#xA;  &lt;a href=&#34;./#redisvector-properties&#34;&gt;配置参数&lt;/a&gt;](#redisvector-properties)列表，了解默认值和配置选项。&#xA;此外，您将需要一个已配置的 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; bean。请参阅 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; 部分以了解更多信息。&#xA;现在，您可以将 &lt;code&gt;RedisVectorStore&lt;/code&gt; 自动连接为应用程序中的矢量存储。&lt;/p&gt;</description>
    </item>
    <item>
      <title>None</title>
      <link>https://studyllm.github.io/docs/vector-databases/sap-hana/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/vector-databases/sap-hana/</guid>
      <description>&lt;h1 id=&#34;none&#34;&gt;&#xA;  None&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#none&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;您需要一个 SAP HANA Cloud 矢量引擎账户 - 请参阅 SAP HANA Cloud 矢量引擎 - 配置试用账户指南以创建试用账户。&lt;/li&gt;&#xA;&lt;li&gt;如果需要，EmbeddingModel 的 API 密钥，用于生成向量存储存储的嵌入。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 没有为 SAP Hana 向量存储提供专用模块。用户应使用 Spring AI 中 SAP Hana 矢量存储的标准矢量存储模块 - &lt;code&gt;spring-ai-hanadb-store&lt;/code&gt; 在应用程序中提供自己的配置。&#xA;请查看向量存储的 [&#xA;  &lt;a href=&#34;./#hanacloudvectorstore-properties&#34;&gt;HanaCloudVectorStore 属性&lt;/a&gt;](#hanacloudvectorstore-properties)列表，了解默认值和配置选项。&#xA;此外，您将需要一个已配置的 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; bean。请参阅 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; 部分以了解更多信息。&lt;/p&gt;&#xA;&lt;h2 id=&#34;hanacloudvectorstore-属性&#34;&gt;&#xA;  HanaCloudVectorStore 属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hanacloudvectorstore-%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您可以在 Spring Boot 配置中使用以下属性来自定义 SAP Hana 矢量存储。它使用 &lt;code&gt;spring.datasource。&lt;/code&gt; properties 来配置 Hana 数据源和 &lt;code&gt;spring.ai.vectorstore.hanadb。&lt;/code&gt; 属性来配置 Hana 矢量存储。&lt;/p&gt;&#xA;&lt;h2 id=&#34;构建示例-rag-应用程序&#34;&gt;&#xA;  构建示例 RAG 应用程序&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9e%84%e5%bb%ba%e7%a4%ba%e4%be%8b-rag-%e5%ba%94%e7%94%a8%e7%a8%8b%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;演示如何设置使用 SAP Hana Cloud 作为矢量数据库的项目，并利用 OpenAI 实现 RAG 模式&lt;/p&gt;</description>
    </item>
    <item>
      <title>提示工程模式</title>
      <link>https://studyllm.github.io/docs/prompt-engineering-patterns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/prompt-engineering-patterns/</guid>
      <description>&lt;h1 id=&#34;提示工程模式&#34;&gt;&#xA;  提示工程模式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8f%90%e7%a4%ba%e5%b7%a5%e7%a8%8b%e6%a8%a1%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;基于全面的 [&#xA;  &lt;a href=&#34;https://www.kaggle.com/whitepaper-prompt-engineering&#34;&gt;Prompt Engineering Guide&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.kaggle.com/whitepaper-prompt-engineering&#34;&gt;https://www.kaggle.com/whitepaper-prompt-engineering&lt;/a&gt;) 的 Prompt Engineering 技术的实际实施。该指南涵盖了有效提示工程的理论、原则和模式，而在这里，我们演示了如何使用 Spring AI 的 Fluent [&#xA;  &lt;a href=&#34;../chatclient.html&#34;&gt;ChatClient API&lt;/a&gt;](../chatclient.html) 将这些概念转换为有效的 Java 代码。本文中使用的演示源代码可在以下网址获得：[&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai-examples/tree/main/prompt-engineering/prompt-engineering-patterns&#34;&gt;Prompt Engineering Patterns Examples&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai-examples/tree/main/prompt-engineering/prompt-engineering-patterns&#34;&gt;https://github.com/spring-projects/spring-ai-examples/tree/main/prompt-engineering/prompt-engineering-patterns&lt;/a&gt;)。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-配置&#34;&gt;&#xA;  1. 配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;配置部分概述了如何使用 Spring AI 设置和调整大型语言模型 （LLM）。它涵盖了为您的使用案例选择合适的 LLM 提供程序，以及配置控制模型输出的质量、样式和格式的重要生成参数。&lt;/p&gt;&#xA;&lt;h2 id=&#34;llm-提供商选择&#34;&gt;&#xA;  LLM 提供商选择&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#llm-%e6%8f%90%e4%be%9b%e5%95%86%e9%80%89%e6%8b%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;对于快速工程，您将首先选择一个模型。Spring AI 支持[&#xA;  &lt;a href=&#34;comparison.html&#34;&gt;多个 LLM 提供程序&lt;/a&gt;](comparison.html) （例如 OpenAI、Anthropic、Google Vertex AI、AWS Bedrock、Ollama 等），让您无需更改应用程序代码即可切换提供程序 - 只需更新配置即可。只需添加选定的 starter dependency &lt;code&gt;spring-ai-starter-model-&amp;lt;MODEL-PROVIDER-NAME&amp;gt;&lt;/code&gt; .例如，以下是启用 Anthropic Claude API 的方法：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-model-anthropic&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您可以指定 LLM 模型名称，如下所示：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;options&lt;/span&gt;(ChatOptions.&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .&lt;span style=&#34;color:#a6e22e&#34;&gt;model&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;claude-3-7-sonnet-latest&amp;#34;&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// Use Anthropic&amp;#39;s Claude model&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在[&#xA;  &lt;a href=&#34;../chatmodel.html&#34;&gt;参考文档中&lt;/a&gt;](../chatmodel.html)查找有关启用每个模型的详细信息。&lt;/p&gt;</description>
    </item>
    <item>
      <title>智普 AI 聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/zhipu-ai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/zhipu-ai/</guid>
      <description>&lt;h1 id=&#34;智普-ai-聊天&#34;&gt;&#xA;  智普 AI 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%99%ba%e6%99%ae-ai-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 ZhiPu AI 的各种 AI 语言模型。您可以与 ZhiPu AI 语言模型交互，并基于 ZhiPuAI 模型创建多语言对话助手。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 ZhiPuAI 创建 API 才能访问 ZhiPu AI 语言模型。&#xA;在  [&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/login&#34;&gt;智普 AI 注册页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/login&#34;&gt;https://open.bigmodel.cn/login&lt;/a&gt;)创建账号，并在 [&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/usercenter/apikeys&#34;&gt;API Keys 页面生成 Token&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/usercenter/apikeys&#34;&gt;https://open.bigmodel.cn/usercenter/apikeys&lt;/a&gt;)。&#xA;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.zhipuai.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 &lt;code&gt;API 密钥&lt;/code&gt;页面获取的 &lt;code&gt;API 密钥&lt;/code&gt;的值。&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.zhipuai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-zhipuai-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 （SpEL） 来引用自定义环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;zhipuai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${ZHIPUAI_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export ZHIPUAI_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-zhipuai-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://studyllm.github.io/docs/building-effective-agents/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/building-effective-agents/</guid>
      <description>&lt;h1 id=&#34;&#34;&gt;&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;代理系统&#34;&gt;&#xA;  代理系统&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%a3%e7%90%86%e7%b3%bb%e7%bb%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;该研究出版物对两种类型的代理系统进行了重要的架构区分：&#xA;关键的见解是，虽然完全自主的代理看起来很有吸引力，但工作流通常为定义明确的任务提供更好的可预测性和一致性。这与可靠性和可维护性至关重要的企业要求完全一致。&#xA;让我们看看 Spring AI 如何通过五种基本模式来实现这些概念，每种模式都服务于特定的用例：&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-chain-工作流程&#34;&gt;&#xA;  1. Chain 工作流程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-chain-%e5%b7%a5%e4%bd%9c%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Chain Workflow 模式体现了将复杂任务分解为更简单、更易于管理的步骤的原则。&#xA;&#xA;  &lt;img src=&#34;https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F7418719e3dab222dccb379b8879e1dc08ad34c78-2401x1000.png&amp;amp;w=3840&amp;amp;q=75&#34; alt=&#34;&#34; /&gt;&#xA;何时使用：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;具有明确顺序步骤的任务&lt;/li&gt;&#xA;&lt;li&gt;当您想用延迟换取更高的准确性时&lt;/li&gt;&#xA;&lt;li&gt;当每个步骤都基于上一步的输出时&#xA;以下是 Spring AI 实现中的一个实际示例：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ChainWorkflow&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; ChatClient chatClient;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; systemPrompts;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;chain&lt;/span&gt;(String userInput) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        String response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; userInput;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (String prompt : systemPrompts) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            String input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String.&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{%s}\n {%s}&amp;#34;&lt;/span&gt;, prompt, response);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chatClient.&lt;span style=&#34;color:#a6e22e&#34;&gt;prompt&lt;/span&gt;(input).&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; response;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此实现演示了几个关键原则：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每个步骤都有重点&lt;/li&gt;&#xA;&lt;li&gt;一个步骤的输出成为下一个步骤的输入&lt;/li&gt;&#xA;&lt;li&gt;该链易于扩展和维护&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2--并行化工作流程&#34;&gt;&#xA;  2.  并行化工作流程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2--%e5%b9%b6%e8%a1%8c%e5%8c%96%e5%b7%a5%e4%bd%9c%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;LLM 可以同时处理任务，并以编程方式聚合其输出。&#xA;&#xA;  &lt;img src=&#34;https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F406bb032ca007fd1624f261af717d70e6ca86286-2401x1000.png&amp;amp;w=3840&amp;amp;q=75&#34; alt=&#34;&#34; /&gt;&#xA;何时使用：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Typesense 字体</title>
      <link>https://studyllm.github.io/docs/vector-databases/typesense/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/vector-databases/typesense/</guid>
      <description>&lt;h1 id=&#34;typesense-字体&#34;&gt;&#xA;  Typesense 字体&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#typesense-%e5%ad%97%e4%bd%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将引导您设置 &lt;code&gt;TypesenseVectorStore&lt;/code&gt; 以存储文档嵌入并执行相似性搜索。&#xA;[&#xA;  &lt;a href=&#34;https://typesense.org&#34;&gt;Typesense&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://typesense.org&#34;&gt;https://typesense.org&lt;/a&gt;) 是一个开源的错别字容忍搜索引擎，它针对低于 50 毫秒的即时搜索进行了优化，同时提供直观的开发人员体验。它提供向量搜索功能，允许您将高维向量与常规搜索数据一起存储和查询。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一个正在运行的 Typesense 实例。以下选项可用：&lt;/li&gt;&#xA;&lt;li&gt;Typesense Cloud（推荐）&lt;/li&gt;&#xA;&lt;li&gt;Docker 镜像 typesense/typesense：latest&lt;/li&gt;&#xA;&lt;li&gt;如果需要，EmbeddingModel 的 API 密钥，用于生成 TypesenseVectorStore 存储的嵌入。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Typesense Vector Store 提供了 Spring Boot 自动配置。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-vector-store-typesense&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或您的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-starter-vector-store-typesense&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请查看 vector store 的[&#xA;  &lt;a href=&#34;./#_configuration_properties&#34;&gt;配置参数&lt;/a&gt;](#_configuration_properties)列表，了解默认值和配置选项。&#xA;矢量存储实现可以为您初始化必要的架构，但您必须通过设置 &lt;code&gt;...initialize-schema=true&lt;/code&gt; 在 &lt;code&gt;application.properties&lt;/code&gt; 文件中。&#xA;此外，您将需要一个配置的 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; bean。请参阅 &lt;code&gt;[[EmbeddingModel](../embeddings.html#available-implementations)](../embeddings.html#available-implementations)&lt;/code&gt; 部分以了解更多信息。&#xA;现在，您可以在应用程序中将 &lt;code&gt;TypesenseVectorStore&lt;/code&gt; 自动连接为矢量存储：&lt;/p&gt;</description>
    </item>
    <item>
      <title>云绑定</title>
      <link>https://studyllm.github.io/docs/deploying-to-the-cloud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/deploying-to-the-cloud/</guid>
      <description>&lt;h1 id=&#34;云绑定&#34;&gt;&#xA;  云绑定&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%91%e7%bb%91%e5%ae%9a&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 基于 [&#xA;  &lt;a href=&#34;https://github.com/spring-cloud/spring-cloud-bindings&#34;&gt;spring-cloud-bindings&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://github.com/spring-cloud/[spring-cloud-bindings]%28https://github.com/spring-cloud/spring-cloud-bindings%29&#34;&gt;https://github.com/spring-cloud/[spring-cloud-bindings](https://github.com/spring-cloud/spring-cloud-bindings)&lt;/a&gt;) 中的基础提供对云绑定的支持。这允许应用程序为提供程序指定绑定类型，然后使用泛型格式表示属性。spring-ai 云绑定将处理这些属性并将它们绑定到 spring-ai 本机属性。&#xA;例如，使用 &lt;code&gt;OpenAi&lt;/code&gt; 时，绑定类型为 &lt;code&gt;openai&lt;/code&gt;。使用属性 spring.ai.cloud.bindings.&lt;code&gt;openai&lt;/code&gt;.enabled ，可以启用或禁用绑定处理器。默认情况下，在指定绑定类型时，将启用此属性。可以指定 &lt;code&gt;api-key&lt;/code&gt;、&lt;code&gt;uri&lt;/code&gt;、 &lt;code&gt;用户名&lt;/code&gt; 、 &lt;code&gt;密码&lt;/code&gt;等的配置，spring-ai 会将它们映射到受支持系统中的相应属性。&#xA;要启用云绑定支持，请在应用程序中包括以下依赖项。&#xA;或您的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;h2 id=&#34;可用的-cloud-bindings&#34;&gt;&#xA;  可用的 Cloud Bindings&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%af%e7%94%a8%e7%9a%84-cloud-bindings&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;以下是 &lt;code&gt;spring-ai-spring-clou-bindings&lt;/code&gt; 模块中当前提供云绑定支持的组件：&lt;/p&gt;</description>
    </item>
    <item>
      <title>维维亚特</title>
      <link>https://studyllm.github.io/docs/vector-databases/weaviate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/vector-databases/weaviate/</guid>
      <description>&lt;h1 id=&#34;维维亚特&#34;&gt;&#xA;  维维亚特&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bb%b4%e7%bb%b4%e4%ba%9a%e7%89%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;本节将引导您设置 Weaviate VectorStore 以存储文档嵌入并执行相似性搜索。&#xA;[&#xA;  &lt;a href=&#34;https://weaviate.io/&#34;&gt;Weaviate&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://weaviate.io/&#34;&gt;https://weaviate.io/&lt;/a&gt;) 是一个开源矢量数据库，允许您存储来自您最喜欢的 ML 模型的数据对象和矢量嵌入，并无缝扩展到数十亿个数据对象。它提供了用于存储文档嵌入、内容和元数据以及搜索这些嵌入（包括元数据筛选）的工具。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一个正在运行的 Weaviate 实例。以下选项可用：&lt;/li&gt;&#xA;&lt;li&gt;Weaviate Cloud Service（需要创建帐户和 API 密钥）&lt;/li&gt;&#xA;&lt;li&gt;Docker 容器&lt;/li&gt;&#xA;&lt;li&gt;如果需要，EmbeddingModel 的 API 密钥，用于生成由 WeaviateVectorStore 存储的嵌入。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;依赖&#34;&gt;&#xA;  依赖&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%be%9d%e8%b5%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;将 Weaviate Vector Store 依赖项添加到您的项目中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-weaviate-store&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或您的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-weaviate-store&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;配置&#34;&gt;&#xA;  配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;要连接到 Weaviate 并使用 &lt;code&gt;WeaviateVectorStore&lt;/code&gt;，您需要提供实例的访问详细信息。可以通过 Spring Boot 的 application.properties 提供配置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.vectorstore.weaviate.host&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;host_of_your_weaviate_instance&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.vectorstore.weaviate.scheme&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;http_or_https&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.vectorstore.weaviate.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your_api_key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# API key if needed, e.g. OpenAI&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.openai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果您更喜欢对 API 密钥等敏感信息使用环境变量，则有多种选择：&lt;/p&gt;</description>
    </item>
    <item>
      <title>测试容器</title>
      <link>https://studyllm.github.io/docs/testcontainers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/testcontainers/</guid>
      <description>&lt;h1 id=&#34;测试容器&#34;&gt;&#xA;  测试容器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b5%8b%e8%af%95%e5%ae%b9%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 提供了 Spring Boot 自动配置，用于建立与通过 Testcontainers 运行的模型服务或矢量存储的连接。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&#xA;或您的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;h2 id=&#34;服务连接&#34;&gt;&#xA;  服务连接&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%8d%e5%8a%a1%e8%bf%9e%e6%8e%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;该 &lt;code&gt;spring-ai-spring-boot-testcontainers&lt;/code&gt; 模块中提供了以下服务连接工厂：&lt;/p&gt;</description>
    </item>
    <item>
      <title>OCI GenAI Cohere 聊天</title>
      <link>https://studyllm.github.io/docs/cohere/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/cohere/</guid>
      <description>&lt;h1 id=&#34;oci-genai-cohere-聊天&#34;&gt;&#xA;  OCI GenAI Cohere 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#oci-genai-cohere-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://www.oracle.com/artificial-intelligence/generative-ai/generative-ai-service/&#34;&gt;OCI GenAI 服务&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.oracle.com/artificial-intelligence/generative-ai/generative-ai-service/&#34;&gt;https://www.oracle.com/artificial-intelligence/generative-ai/generative-ai-service/&lt;/a&gt;)提供与按需模型或专用 AI 集群的生成式 AI 聊天。&#xA;[&#xA;  &lt;a href=&#34;https://docs.oracle.com/en-us/iaas/Content/generative-ai/chat-models.htm&#34;&gt;OCI 聊天模型页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.oracle.com/en-us/iaas/Content/generative-ai/chat-models.htm&#34;&gt;https://docs.oracle.com/en-us/iaas/Content/generative-ai/chat-models.htm&lt;/a&gt;)和 [&#xA;  &lt;a href=&#34;https://docs.oracle.com/en-us/iaas/Content/generative-ai/use-playground-embed.htm&#34;&gt;OCI 生成式 AI 游乐场&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.oracle.com/en-us/iaas/Content/generative-ai/use-playground-embed.htm&#34;&gt;https://docs.oracle.com/en-us/iaas/Content/generative-ai/use-playground-embed.htm&lt;/a&gt;)提供了有关在 OCI 上使用和托管聊天模型的详细信息。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要一个有效的 [&#xA;  &lt;a href=&#34;https://signup.oraclecloud.com/&#34;&gt;Oracle Cloud Infrastructure （OCI）&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://signup.oraclecloud.com/&#34;&gt;https://signup.oraclecloud.com/&lt;/a&gt;) 账户才能使用 OCI GenAI Cohere Chat 客户端。客户端提供四种不同的连接方式，包括使用用户和私钥进行简单验证、工作负载身份、实例主体或 OCI 配置文件验证。&lt;/p&gt;&#xA;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 工件发布在 Maven Central 和 Spring Snapshot 存储库中。请参阅 [&#xA;  &lt;a href=&#34;../../../getting-started.html#artifact-repositories&#34;&gt;Artifact Repositories&lt;/a&gt;](../../../getting-started.html#artifact-repositories) 部分，将这些存储库添加到您的构建系统中。&#xA;为了帮助进行[&#xA;  &lt;a href=&#34;../../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../../getting-started.html#dependency-management)，Spring AI 提供了一个 BOM（物料清单），以确保在整个项目中使用一致的 Spring AI 版本。请参阅[&#xA;  &lt;a href=&#34;../../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../../getting-started.html#dependency-management)部分，将 Spring AI BOM 添加到您的构建系统中。&lt;/p&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 OCI GenAI Cohere 聊天客户端提供 Spring Boot 自动配置。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Google VertexAI 文本嵌入</title>
      <link>https://studyllm.github.io/docs/text-embedding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/text-embedding/</guid>
      <description>&lt;h1 id=&#34;google-vertexai-文本嵌入&#34;&gt;&#xA;  Google VertexAI 文本嵌入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#google-vertexai-%e6%96%87%e6%9c%ac%e5%b5%8c%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Vertex AI 支持两种类型的嵌入：文本模型和多模态。本文档介绍如何使用 Vertex AI  [&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/text-embeddings-api&#34;&gt;文本嵌入 API&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/text-embeddings-api&#34;&gt;https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/text-embeddings-api&lt;/a&gt;) 创建文本嵌入。&#xA;Vertex AI 文本嵌入 API 使用密集的矢量表示形式。与倾向于直接将单词映射到数字的稀疏向量不同，密集向量旨在更好地表示一段文本的含义。在生成式 AI 中使用密集向量嵌入的好处是，您可以更好地搜索与查询含义一致的段落，而不是直接搜索单词或语法匹配，即使这些段落没有使用相同的语言。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;安装适合您作系统的 gcloud CLI。&lt;/li&gt;&#xA;&lt;li&gt;通过运行以下命令进行身份验证。将 PROJECT_ID 替换为您的 Google Cloud 项目 ID，将 ACCOUNT 替换为您的 Google Cloud 用户名。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcloud config set project &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PROJECT_ID&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcloud auth application&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; login &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ACCOUNT&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 工件发布在 Maven Central 和 Spring Snapshot 存储库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;Artifact Repositories&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些存储库添加到您的构建系统中。&#xA;为了帮助进行[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)，Spring AI 提供了一个 BOM（物料清单），以确保在整个项目中使用一致的 Spring AI 版本。请参阅[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)部分，将 Spring AI BOM 添加到您的构建系统中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Google VertexAI 多模态嵌入</title>
      <link>https://studyllm.github.io/docs/multimodal-embedding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/multimodal-embedding/</guid>
      <description>&lt;h1 id=&#34;google-vertexai-多模态嵌入&#34;&gt;&#xA;  Google VertexAI 多模态嵌入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#google-vertexai-%e5%a4%9a%e6%a8%a1%e6%80%81%e5%b5%8c%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Vertex AI 支持两种类型的嵌入：文本模型和多模态。本文档介绍如何使用 Vertex AI  [&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/generative-ai/docs/embeddings/get-multimodal-embeddings&#34;&gt;多模态嵌入 API&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://cloud.google.com/vertex-ai/generative-ai/docs/embeddings/get-multimodal-embeddings&#34;&gt;https://cloud.google.com/vertex-ai/generative-ai/docs/embeddings/get-multimodal-embeddings&lt;/a&gt;) 创建多模态嵌入。&#xA;多模态嵌入模型根据您提供的输入生成 1408 维向量，其中可以包括图像、文本和视频数据的组合。然后，嵌入向量可用于后续任务，如图像分类或视频内容审核。&#xA;图像嵌入向量和文本嵌入向量位于同一语义空间内，具有相同的维度。因此，这些向量可以互换用于逐个文本搜索或逐个搜索视频等使用案例。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;安装适合您作系统的 gcloud CLI。&lt;/li&gt;&#xA;&lt;li&gt;通过运行以下命令进行身份验证。将 PROJECT_ID 替换为您的 Google Cloud 项目 ID，将 ACCOUNT 替换为您的 Google Cloud 用户名。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcloud config set project &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PROJECT_ID&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcloud auth application&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; login &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ACCOUNT&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 工件发布在 Maven Central 和 Spring Snapshot 存储库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;Artifact Repositories&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些存储库添加到您的构建系统中。&#xA;为了帮助进行[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)，Spring AI 提供了一个 BOM（物料清单），以确保在整个项目中使用一致的 Spring AI 版本。请参阅[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)部分，将 Spring AI BOM 添加到您的构建系统中。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
