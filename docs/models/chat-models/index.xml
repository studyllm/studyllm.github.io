<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>聊天模型 API on Spring AI 1.0.0</title>
    <link>https://studyllm.github.io/docs/models/chat-models/</link>
    <description>Recent content in 聊天模型 API on Spring AI 1.0.0</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <atom:link href="https://studyllm.github.io/docs/models/chat-models/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>聊天模型比较</title>
      <link>https://studyllm.github.io/docs/models/chat-models/chat-models-comparison/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/chat-models-comparison/</guid>
      <description>&lt;h1 id=&#34;聊天模型比较&#34;&gt;&#xA;  聊天模型比较&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%81%8a%e5%a4%a9%e6%a8%a1%e5%9e%8b%e6%af%94%e8%be%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;下表比较了 Spring AI 支持的各种聊天模型，详细介绍了它们的功能：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;多模态 ：模型可以处理的输入类型（例如，文本、图像、音频、视频）。&lt;/li&gt;&#xA;&lt;li&gt;Tools/Function Calling：模型是否支持函数调用或工具使用。&lt;/li&gt;&#xA;&lt;li&gt;Streaming：如果模型提供 Streaming 响应。&lt;/li&gt;&#xA;&lt;li&gt;Retry：支持重试机制。&lt;/li&gt;&#xA;&lt;li&gt;可观测性 ：用于监视和调试的功能。&lt;/li&gt;&#xA;&lt;li&gt;内置 JSON： 对 JSON 输出的原生支持。&lt;/li&gt;&#xA;&lt;li&gt;本地部署：模型是否可以在本地运行。&lt;/li&gt;&#xA;&lt;li&gt;OpenAI API 兼容性：如果模型与 OpenAI 的 API 兼容。&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>基岩版 Converse API</title>
      <link>https://studyllm.github.io/docs/models/chat-models/amazon-bedrock-converse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/amazon-bedrock-converse/</guid>
      <description>&lt;h1 id=&#34;基岩版-converse-api&#34;&gt;&#xA;  基岩版 Converse API&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9f%ba%e5%b2%a9%e7%89%88-converse-api&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://docs.aws.amazon.com/bedrock/latest/userguide/conversation-inference.html&#34;&gt;Amazon Bedrock Converse API&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.aws.amazon.com/bedrock/latest/userguide/conversation-inference.html&#34;&gt;https://docs.aws.amazon.com/bedrock/latest/userguide/conversation-inference.html&lt;/a&gt;) 为对话式 AI 模型提供了一个统一的接口，具有增强功能，包括函数/工具调用、多模态输入和流式响应。&#xA;Bedrock Converse API 具有以下高级功能：&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;请参阅 [&#xA;  &lt;a href=&#34;https://docs.aws.amazon.com/bedrock/latest/userguide/getting-started.html&#34;&gt;Amazon Bedrock 入门&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.aws.amazon.com/bedrock/latest/userguide/getting-started.html&#34;&gt;https://docs.aws.amazon.com/bedrock/latest/userguide/getting-started.html&lt;/a&gt;)以设置 API 访问&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;获取 AWS 凭证：如果您还没有配置 AWS 账户和 AWS CLI，此视频指南可以帮助您配置它：AWS CLI 和 SDK 设置在不到 4 分钟的时间内，只需不到 4 分钟）。 您应该能够获取您的访问密钥和安全密钥。&lt;/li&gt;&#xA;&lt;li&gt;启用要使用的模型：转到 Amazon Bedrock，然后从左侧的 Model Access（模型访问 ）菜单中，配置对要使用的模型的访问。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;将 &lt;code&gt;spring-ai-starter-model-bedrock-converse&lt;/code&gt; 依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 或 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件中：&lt;/p&gt;&#xA;&lt;h2 id=&#34;聊天属性&#34;&gt;&#xA;  聊天属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%81%8a%e5%a4%a9%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;前缀 &lt;code&gt;spring.ai.bedrock.aws&lt;/code&gt; 是用于配置与 AWS Bedrock 的连接的属性前缀。&#xA;prefix &lt;code&gt;spring.ai.bedrock.converse.chat&lt;/code&gt; 是为 Converse API 配置聊天模型实现的属性 prefix。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Anthropic 3 聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/anthropic-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/anthropic-3/</guid>
      <description>&lt;h1 id=&#34;anthropic-3-聊天&#34;&gt;&#xA;  Anthropic 3 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#anthropic-3-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://www.anthropic.com/&#34;&gt;Anthropic Claude&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.anthropic.com/&#34;&gt;https://www.anthropic.com/&lt;/a&gt;) 是一系列基础 AI 模型，可用于各种应用程序。对于开发人员和企业，您可以利用 API 访问并直接在 [&#xA;  &lt;a href=&#34;https://www.anthropic.com/api&#34;&gt;Anthropic 的 AI 基础设施&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.anthropic.com/api&#34;&gt;https://www.anthropic.com/api&lt;/a&gt;)之上进行构建。&#xA;Spring AI 支持 Anthropic [&#xA;  &lt;a href=&#34;https://docs.anthropic.com/claude/reference/messages_post&#34;&gt;Messaging API&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.anthropic.com/claude/reference/messages_post&#34;&gt;https://docs.anthropic.com/claude/reference/messages_post&lt;/a&gt;) 进行同步和流式文本生成。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要在 Anthropic 门户上创建一个 API 密钥。&#xA;在 [&#xA;  &lt;a href=&#34;https://console.anthropic.com/dashboard&#34;&gt;Anthropic API 控制面板&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://console.anthropic.com/dashboard&#34;&gt;https://console.anthropic.com/dashboard&lt;/a&gt;)上创建一个账户，并在 [&#xA;  &lt;a href=&#34;https://console.anthropic.com/settings/keys&#34;&gt;Get API Keys&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://console.anthropic.com/settings/keys&#34;&gt;https://console.anthropic.com/settings/keys&lt;/a&gt;) 页面上生成 API 密钥。&#xA;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.anthropic.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 anthropic.com 获取的 &lt;code&gt;API 密钥&lt;/code&gt;的值。&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.anthropic.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-anthropic-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 （SpEL） 来引用自定义环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;anthropic&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${ANTHROPIC_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export ANTHROPIC_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-anthropic-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure OpenAI 聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/azure-openai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/azure-openai/</guid>
      <description>&lt;h1 id=&#34;azure-openai-聊天&#34;&gt;&#xA;  Azure OpenAI 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#azure-openai-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Azure 的 OpenAI 产品由 ChatGPT 提供支持，超越了传统的 OpenAI 功能，提供具有增强功能的 AI 驱动的文本生成[&#xA;  &lt;a href=&#34;https://techcommunity.microsoft.com/t5/ai-azure-ai-services-blog/announcing-new-ai-safety-amp-responsible-ai-features-in-azure/ba-p/3983686&#34;&gt;。&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://techcommunity.microsoft.com/t5/ai-azure-ai-services-blog/announcing-new-ai-safety-amp-responsible-ai-features-in-azure/ba-p/3983686%29Azure&#34;&gt;https://techcommunity.microsoft.com/t5/ai-azure-ai-services-blog/announcing-new-ai-safety-amp-responsible-ai-features-in-azure/ba-p/3983686)Azure&lt;/a&gt; 提供额外的 AI 安全和负责任的 AI 功能，如其最近的更新中所述 [&#xA;  &lt;a href=&#34;https://techcommunity.microsoft.com/t5/ai-azure-ai-services-blog/announcing-new-ai-safety-amp-responsible-ai-features-in-azure/ba-p/3983686&#34;&gt;。&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://techcommunity.microsoft.com/t5/ai-azure-ai-services-blog/announcing-new-ai-safety-amp-responsible-ai-features-in-azure/ba-p/3983686&#34;&gt;https://techcommunity.microsoft.com/t5/ai-azure-ai-services-blog/announcing-new-ai-safety-amp-responsible-ai-features-in-azure/ba-p/3983686&lt;/a&gt;)&#xA;Azure 为 Java 开发人员提供了利用 AI 的全部潜力的机会，方法是将 AI 与一系列 Azure 服务集成，其中包括 AI 相关资源，例如 Azure 上的 Vector Stores。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Azure OpenAI 客户端提供三个连接选项：使用 Azure API 密钥或使用 OpenAI API 密钥，或使用 Microsoft Entra ID。&lt;/p&gt;&#xA;&lt;h2 id=&#34;azure-api-密钥和端点&#34;&gt;&#xA;  Azure API 密钥和端点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#azure-api-%e5%af%86%e9%92%a5%e5%92%8c%e7%ab%af%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;要使用 API 密钥访问模型，请从 Azure 门户上的 Azure OpenAI 服务部分获取 Azure OpenAI  &lt;code&gt;终端节点&lt;/code&gt;和 &lt;code&gt;api-key&lt;/code&gt;。&#xA;Spring AI 定义了两个配置属性：&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 或 &lt;code&gt;application.yml&lt;/code&gt; 文件中设置这些配置属性：&lt;/p&gt;</description>
    </item>
    <item>
      <title>DeepSeek 聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/deepseek/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/deepseek/</guid>
      <description>&lt;h1 id=&#34;deepseek-聊天&#34;&gt;&#xA;  DeepSeek 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#deepseek-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 DeepSeek 中的各种 AI 语言模型。您可以与 DeepSeek 语言模型交互，并基于 DeepSeek 模型创建多语言对话助手。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 DeepSeek 创建一个 API 密钥才能访问 DeepSeek 语言模型。&#xA;在 [&#xA;  &lt;a href=&#34;https://platform.deepseek.com/sign_up&#34;&gt;DeepSeek 注册页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://platform.deepseek.com/sign_up&#34;&gt;https://platform.deepseek.com/sign_up&lt;/a&gt;)创建一个帐户，并在 [&#xA;  &lt;a href=&#34;https://platform.deepseek.com/api_keys&#34;&gt;API 密钥页面上&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://platform.deepseek.com/api_keys&#34;&gt;https://platform.deepseek.com/api_keys&lt;/a&gt;)生成令牌。&#xA;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.deepseek.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 &lt;code&gt;API 密钥&lt;/code&gt;页面获取的 &lt;code&gt;API 密钥&lt;/code&gt;的值。&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.deepseek.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-deepseek-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 （SpEL） 来引用自定义环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;deepseek&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${DEEPSEEK_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export DEEPSEEK_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-deepseek-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve API key from a secure source or environment variable&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String apiKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DEEPSEEK_API_KEY&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 工件发布在 Spring Milestone 和 Snapshot 存储库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;Artifact Repositories&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些存储库添加到您的构建系统中。&#xA;为了帮助进行[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)，Spring AI 提供了一个 BOM（物料清单），以确保在整个项目中使用一致的 Spring AI 版本。请参阅[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)部分，将 Spring AI BOM 添加到您的构建系统中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker Model Runner 聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/docker-model-runner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/docker-model-runner/</guid>
      <description>&lt;h1 id=&#34;docker-model-runner-聊天&#34;&gt;&#xA;  Docker Model Runner 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#docker-model-runner-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://docs.docker.com/desktop/features/model-runner/&#34;&gt;Docker Model Runner&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.docker.com/desktop/features/model-runner/&#34;&gt;https://docs.docker.com/desktop/features/model-runner/&lt;/a&gt;) 是一个 AI 推理引擎，提供来自[&#xA;  &lt;a href=&#34;https://hub.docker.com/u/ai&#34;&gt;各种提供商&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://hub.docker.com/u/ai&#34;&gt;https://hub.docker.com/u/ai&lt;/a&gt;)的各种模型。&#xA;Spring AI 通过重用现有的 [&#xA;  &lt;a href=&#34;openai-chat.html&#34;&gt;OpenAI&lt;/a&gt;](openai-chat.html) 支持的 &lt;code&gt;ChatClient&lt;/code&gt; 与 Docker Model Runner 集成。为此，请将基本 URL 设置为 &lt;code&gt;[[localhost：12434/engines](http://localhost:12434/engines)](http://localhost:12434/engines)&lt;/code&gt; 并选择提供的 [&#xA;  &lt;a href=&#34;https://hub.docker.com/u/ai&#34;&gt;LLM 模型&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://hub.docker.com/u/ai&#34;&gt;https://hub.docker.com/u/ai&lt;/a&gt;)之一。&#xA;查看 [&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/DockerModelRunnerWithOpenAiChatModelIT.java&#34;&gt;DockerModelRunnerWithOpenAiChatModelIT.java&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/[DockerModelRunnerWithOpenAiChatModelIT.java]%28https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/DockerModelRunnerWithOpenAiChatModelIT.java%29&#34;&gt;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/[DockerModelRunnerWithOpenAiChatModelIT.java](https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/DockerModelRunnerWithOpenAiChatModelIT.java)&lt;/a&gt;) 测试，了解如何将 Docker Model Runner 与 Spring AI 结合使用的示例。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;下载适用于 Mac 的 Docker Desktop 4.40.0。&#xA;选择以下选项之一以启用 Model Runner：&#xA;选项 1：&lt;/li&gt;&#xA;&lt;li&gt;启用 Model Runner docker desktop enable model-runner &amp;ndash;tcp 12434 。&lt;/li&gt;&#xA;&lt;li&gt;将 base-url 设置为 localhost：12434/engines&#xA;选项 2：&lt;/li&gt;&#xA;&lt;li&gt;启用 Model Runner docker desktop enable model-runner 。&lt;/li&gt;&#xA;&lt;li&gt;使用 Testcontainers 并设置 base-url，如下所示：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Container&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; SocatContainer socat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SocatContainer().&lt;span style=&#34;color:#a6e22e&#34;&gt;withTarget&lt;/span&gt;(80, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;model-runner.docker.internal&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; OpenAiApi &lt;span style=&#34;color:#a6e22e&#34;&gt;chatCompletionApi&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; baseUrl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://%s:%d/engines&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;formatted&lt;/span&gt;(socat.&lt;span style=&#34;color:#a6e22e&#34;&gt;getHost&lt;/span&gt;(), socat.&lt;span style=&#34;color:#a6e22e&#34;&gt;getMappedPort&lt;/span&gt;(80));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; OpenAiApi.&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;baseUrl&lt;/span&gt;(baseUrl).&lt;span style=&#34;color:#a6e22e&#34;&gt;apiKey&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您可以通过阅读[&#xA;  &lt;a href=&#34;https://www.docker.com/blog/run-llms-locally/&#34;&gt;使用 Docker 在本地运行 LLM&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.docker.com/blog/run-llms-locally/&#34;&gt;https://www.docker.com/blog/run-llms-locally/&lt;/a&gt;) 博客文章了解有关 Docker Model Runner 的更多信息。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Groq 聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/groq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/groq/</guid>
      <description>&lt;h1 id=&#34;groq-聊天&#34;&gt;&#xA;  Groq 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#groq-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://groq.com/&#34;&gt;Groq&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://groq.com/&#34;&gt;https://groq.com/&lt;/a&gt;) 是一种非常快速、基于 LPU™ 的 AI 推理引擎，支持各种 [&#xA;  &lt;a href=&#34;https://console.groq.com/docs/models&#34;&gt;AI 模型&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://console.groq.com/docs/models&#34;&gt;https://console.groq.com/docs/models&lt;/a&gt;) ，支持&lt;code&gt;工具/函数调用&lt;/code&gt; ，并公开与 &lt;code&gt;OpenAI API&lt;/code&gt; 兼容的端点。&#xA;Spring AI 通过重用现有的 [&#xA;  &lt;a href=&#34;openai-chat.html&#34;&gt;OpenAI&lt;/a&gt;](openai-chat.html) 客户端与 [&#xA;  &lt;a href=&#34;https://groq.com/&#34;&gt;Groq&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://groq.com/&#34;&gt;https://groq.com/&lt;/a&gt;) 集成。为此，您需要获取 [&#xA;  &lt;a href=&#34;https://groq.com/&#34;&gt;Groq&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://groq.com/&#34;&gt;https://groq.com/&lt;/a&gt;) Api 密钥 ，将 base-url 设置为 [&#xA;  &lt;a href=&#34;https://api.groq.com/openai&#34;&gt;api.groq.com/openai&lt;/a&gt;](https://&#xA;  &lt;a href=&#34;https://api.groq.com/openai&#34;&gt;api.groq.com/openai&lt;/a&gt;) 并选择提供的 [&#xA;  &lt;a href=&#34;https://groq.com/&#34;&gt;Groq&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://groq.com/&#34;&gt;https://groq.com/&lt;/a&gt;) 模型之一。&#xA;查看 [&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/GroqWithOpenAiChatModelIT.java&#34;&gt;GroqWithOpenAiChatModelIT.java&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/[GroqWithOpenAiChatModelIT.java]%28https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/GroqWithOpenAiChatModelIT.java%29&#34;&gt;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/[GroqWithOpenAiChatModelIT.java](https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/GroqWithOpenAiChatModelIT.java)&lt;/a&gt;) 测试，了解将 Groq 与 Spring AI 结合使用的示例。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;创建 API 密钥 ：访问此处创建 API 密钥。Spring AI 项目定义了一个名为 spring.ai.openai.api-key 的配置属性，您应该将其设置为从 groq.com 获取的 API 密钥的值。&lt;/li&gt;&#xA;&lt;li&gt;设置 Groq URL：您必须将 spring.ai.openai.base-url 属性设置为 api.groq.com/openai。&lt;/li&gt;&#xA;&lt;li&gt;Select a Groq Model：使用属性 spring.ai.openai.chat.model=&lt;model name&gt; 从可用的 Groq 模型中进行选择。&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置这些配置属性：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.openai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-groq-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.openai.base-url&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;https://api.groq.com/openai&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.openai.chat.model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;llama3-70b-8192&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 （SpEL） 来引用自定义环境变量：&lt;/p&gt;</description>
    </item>
    <item>
      <title>拥抱脸聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/hugging-face/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/hugging-face/</guid>
      <description>&lt;h1 id=&#34;拥抱脸聊天&#34;&gt;&#xA;  拥抱脸聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8b%a5%e6%8a%b1%e8%84%b8%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Hugging Face Text Generation Inference （TGI） 是一种专门的部署解决方案，用于在云中为大型语言模型 （LLM） 提供服务，使其可通过 API 访问。TGI 通过连续批处理、令牌流式处理和高效内存管理等功能为文本生成任务提供优化的性能。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要在 Hugging Face 上创建一个推理终端节点，并创建一个 API 令牌来访问该终端节点。更多详情可[&#xA;  &lt;a href=&#34;https://huggingface.co/docs/inference-endpoints/index&#34;&gt;在此处&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://huggingface.co/docs/inference-endpoints/index&#34;&gt;https://huggingface.co/docs/inference-endpoints/index&lt;/a&gt;)找到。&#xA;Spring AI 项目定义了两个配置属性：&#xA;您可以[&#xA;  &lt;a href=&#34;https://ui.endpoints.huggingface.co/&#34;&gt;在此处&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://ui.endpoints.huggingface.co/&#34;&gt;https://ui.endpoints.huggingface.co/&lt;/a&gt;)的推理终端节点的 UI 上找到您的推理终端节点 URL。&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置这些配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.huggingface.chat.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-huggingface-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.huggingface.chat.url&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-inference-endpoint-url&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 （SpEL） 来引用自定义环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;huggingface&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;chat&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${HUGGINGFACE_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;url&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${HUGGINGFACE_ENDPOINT_URL}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export HUGGINGFACE_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-huggingface-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export HUGGINGFACE_ENDPOINT_URL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-inference-endpoint-url&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置这些配置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve API key and endpoint URL from secure sources or environment variables&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String apiKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HUGGINGFACE_API_KEY&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String endpointUrl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HUGGINGFACE_ENDPOINT_URL&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 工件发布在 Maven Central 和 Spring Snapshot 存储库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;Artifact Repositories&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些存储库添加到您的构建系统中。&#xA;为了帮助进行[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)，Spring AI 提供了一个 BOM（物料清单），以确保在整个项目中使用一致的 Spring AI 版本。请参阅[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)部分，将 Spring AI BOM 添加到您的构建系统中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mistral AI 聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/mistral-ai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/mistral-ai/</guid>
      <description>&lt;h1 id=&#34;mistral-ai-聊天&#34;&gt;&#xA;  Mistral AI 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mistral-ai-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持来自 Mistral AI 的各种 AI 语言模型。您可以与 Mistral AI 语言模型交互，并基于 Mistral 模型创建多语言对话助手。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 Mistral AI 创建 API 才能访问 Mistral AI 语言模型。&#xA;在 [&#xA;  &lt;a href=&#34;https://auth.mistral.ai/ui/registration&#34;&gt;Mistral AI 注册页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://auth.mistral.ai/ui/registration&#34;&gt;https://auth.mistral.ai/ui/registration&lt;/a&gt;)创建账户，并在 [&#xA;  &lt;a href=&#34;https://console.mistral.ai/api-keys/&#34;&gt;API 密钥页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://console.mistral.ai/api-keys/&#34;&gt;https://console.mistral.ai/api-keys/&lt;/a&gt;)生成令牌。&#xA;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.mistralai.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 console.mistral.ai 获取的 &lt;code&gt;API 密钥&lt;/code&gt;的值。&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.mistralai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-mistralai-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 （SpEL） 来引用自定义环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;mistralai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${MISTRALAI_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export MISTRALAI_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-mistralai-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;</description>
    </item>
    <item>
      <title>MiniMax 聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/minimax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/minimax/</guid>
      <description>&lt;h1 id=&#34;minimax-聊天&#34;&gt;&#xA;  MiniMax 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#minimax-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 MiniMax 的各种 AI 语言模型。您可以与 MiniMax 语言模型交互，并基于 MiniMax 模型创建多语言对话助手。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 MiniMax 创建 API 才能访问 MiniMax 语言模型。&#xA;在 [&#xA;  &lt;a href=&#34;https://www.minimaxi.com/login&#34;&gt;MiniMax 注册页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.minimaxi.com/login&#34;&gt;https://www.minimaxi.com/login&lt;/a&gt;)创建一个帐户，并在 [&#xA;  &lt;a href=&#34;https://www.minimaxi.com/user-center/basic-information/interface-key&#34;&gt;API 密钥页面上&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.minimaxi.com/user-center/basic-information/interface-key&#34;&gt;https://www.minimaxi.com/user-center/basic-information/interface-key&lt;/a&gt;)生成令牌。&#xA;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.minimax.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从“&lt;code&gt;API 密钥&lt;/code&gt;”页面获取的 &lt;code&gt;API 密钥&lt;/code&gt;的值。&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.minimax.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-minimax-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 （SpEL） 来引用环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;minimax&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${MINIMAX_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export MINIMAX_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-minimax-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve API key from a secure source or environment variable&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String apiKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MINIMAX_API_KEY&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 工件发布在 Maven Central 和 Spring Snapshot 存储库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;Artifact Repositories&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些存储库添加到您的构建系统中。&#xA;为了帮助进行[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)，Spring AI 提供了一个 BOM（物料清单），以确保在整个项目中使用一致的 Spring AI 版本。请参阅[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)部分，将 Spring AI BOM 添加到您的构建系统中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Moonshot AI 聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/moonshot-ai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/moonshot-ai/</guid>
      <description>&lt;h1 id=&#34;moonshot-ai-聊天&#34;&gt;&#xA;  Moonshot AI 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#moonshot-ai-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;此功能已移至 Spring AI Community 存储库。&#xA;请访问 [&#xA;  &lt;a href=&#34;https://github.com/spring-ai-community/moonshot&#34;&gt;github.com/spring-ai-community/moonshot&lt;/a&gt;](https://&#xA;  &lt;a href=&#34;https://github.com/spring-ai-community/moonshot&#34;&gt;github.com/spring-ai-community/moonshot&lt;/a&gt;) 获取最新版本。&lt;/p&gt;</description>
    </item>
    <item>
      <title>NVIDIA 聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/nvidia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/nvidia/</guid>
      <description>&lt;h1 id=&#34;nvidia-聊天&#34;&gt;&#xA;  NVIDIA 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#nvidia-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://docs.api.nvidia.com/nim/reference/llm-apis&#34;&gt;NVIDIA LLM API&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.api.nvidia.com/nim/reference/llm-apis&#34;&gt;https://docs.api.nvidia.com/nim/reference/llm-apis&lt;/a&gt;) 是一个代理 AI 推理引擎，提供来自[&#xA;  &lt;a href=&#34;https://docs.api.nvidia.com/nim/reference/llm-apis#models&#34;&gt;各种提供商&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.api.nvidia.com/nim/reference/llm-apis#models&#34;&gt;https://docs.api.nvidia.com/nim/reference/llm-apis#models&lt;/a&gt;)的各种模型。&#xA;Spring AI 通过重用现有的 [&#xA;  &lt;a href=&#34;openai-chat.html&#34;&gt;OpenAI&lt;/a&gt;](openai-chat.html) 客户端与 NVIDIA LLM API 集成。为此，您需要将 base-url 设置为 &lt;code&gt;[[integrate.api.nvidia.com](https://integrate.api.nvidia.com)](https://[integrate.api.nvidia.com](https://integrate.api.nvidia.com))&lt;/code&gt;，选择一个提供的 [&#xA;  &lt;a href=&#34;https://docs.api.nvidia.com/nim/reference/llm-apis#model&#34;&gt;LLM 模型&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.api.nvidia.com/nim/reference/llm-apis#model&#34;&gt;https://docs.api.nvidia.com/nim/reference/llm-apis#model&lt;/a&gt;)并为其获取 &lt;code&gt;api-key&lt;/code&gt;。&#xA;查看 [&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/NvidiaWithOpenAiChatModelIT.java&#34;&gt;NvidiaWithOpenAiChatModelIT.java&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/[NvidiaWithOpenAiChatModelIT.java]%28https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/NvidiaWithOpenAiChatModelIT.java%29&#34;&gt;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/[NvidiaWithOpenAiChatModelIT.java](https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/NvidiaWithOpenAiChatModelIT.java)&lt;/a&gt;) 测试，了解将 NVIDIA LLM API 与 Spring AI 结合使用的示例。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;创建具有足够积分的 NVIDIA 帐户。&lt;/li&gt;&#xA;&lt;li&gt;选择要使用的 LLM 模型。例如下面屏幕截图中的 meta/llama-3.1-70b-instruct。&lt;/li&gt;&#xA;&lt;li&gt;从所选模型的页面中，您可以获取用于访问此模型的 api-key。&#xA;&#xA;  &lt;img src=&#34;../../../images/spring-ai-nvidia-registration.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 OpenAI Chat 客户端提供 Spring Boot 自动配置。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件中：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-model-openai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或您的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ollama 聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/ollama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/ollama/</guid>
      <description>&lt;h1 id=&#34;ollama-聊天&#34;&gt;&#xA;  Ollama 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ollama-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;使用 [&#xA;  &lt;a href=&#34;https://ollama.ai/&#34;&gt;Ollama&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://ollama.ai/&#34;&gt;https://ollama.ai/&lt;/a&gt;)，您可以在本地运行各种大型语言模型 （LLM） 并从中生成文本。Spring AI 通过 &lt;code&gt;[[Ollama](https://ollama.ai/)](https://ollama.ai/)ChatModel&lt;/code&gt; API 支持 [&#xA;  &lt;a href=&#34;https://ollama.ai/&#34;&gt;Ollama&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://ollama.ai/&#34;&gt;https://ollama.ai/&lt;/a&gt;) 聊天完成功能。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您首先需要访问 Ollama 实例。有几个选项，包括：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在本地计算机上下载并安装 Ollama。&lt;/li&gt;&#xA;&lt;li&gt;通过 Testcontainers 配置和运行 Ollama。&lt;/li&gt;&#xA;&lt;li&gt;通过 Kubernetes 服务绑定绑定到 Ollama 实例。&#xA;您可以从 [&#xA;  &lt;a href=&#34;https://ollama.com/library&#34;&gt;Ollama 模型库&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://ollama.com/library&#34;&gt;https://ollama.com/library&lt;/a&gt;)中提取要在应用程序中使用的模型：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-shellscript&#34; data-lang=&#34;shellscript&#34;&gt;ollama pull &amp;lt;model-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;您还可以提取数千个免费的 [&#xA;  &lt;a href=&#34;https://huggingface.co/models?library=gguf&amp;amp;sort=trending&#34;&gt;GGUF 紧贴脸模型&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://huggingface.co/models?library=gguf&amp;amp;sort=trending&#34;&gt;https://huggingface.co/models?library=gguf&amp;sort=trending&lt;/a&gt;)中的任何一个：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-shellscript&#34; data-lang=&#34;shellscript&#34;&gt;ollama pull hf.co/&amp;lt;username&amp;gt;/&amp;lt;model-repository&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者，您可以启用选项以自动下载任何需要的模型：[&#xA;  &lt;a href=&#34;../../../#auto-pulling-models&#34;&gt;Auto-pull Models （自动拉取模型&lt;/a&gt;](#auto-pulling-models) ）。&lt;/p&gt;&#xA;&lt;h2 id=&#34;自动配置&#34;&gt;&#xA;  自动配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 为 Ollama 聊天集成提供了 Spring Boot 自动配置。要启用它，请将以下依赖项添加到项目的 Maven &lt;code&gt;pom.xml&lt;/code&gt; 或 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件中：&lt;/p&gt;&#xA;&lt;h2 id=&#34;基本属性&#34;&gt;&#xA;  基本属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9f%ba%e6%9c%ac%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;前缀 &lt;code&gt;spring.ai.ollama&lt;/code&gt; 是配置与 Ollama 的连接的属性前缀。&#xA;以下是用于初始化 Ollama 集成和[&#xA;  &lt;a href=&#34;../../../#auto-pulling-models&#34;&gt;自动拉取模型&lt;/a&gt;](#auto-pulling-models)的属性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>困惑聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/perplexity-ai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/perplexity-ai/</guid>
      <description>&lt;h1 id=&#34;困惑聊天&#34;&gt;&#xA;  困惑聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%b0%e6%83%91%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;[&#xA;  &lt;a href=&#34;https://perplexity.ai/&#34;&gt;Perplexity AI&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://perplexity.ai/&#34;&gt;https://perplexity.ai/&lt;/a&gt;) 提供独特的 AI 服务，将其语言模型与实时搜索功能集成在一起。它提供了多种模型，并支持对话式 AI 的流式响应。&#xA;Spring AI 通过重用现有的 [&#xA;  &lt;a href=&#34;openai-chat.html&#34;&gt;OpenAI&lt;/a&gt;](openai-chat.html) 客户端与 Perplexity AI 集成。要开始使用，您需要获取 [&#xA;  &lt;a href=&#34;https://docs.perplexity.ai/guides/getting-started&#34;&gt;Perplexity API 密钥&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.perplexity.ai/guides/getting-started&#34;&gt;https://docs.perplexity.ai/guides/getting-started&lt;/a&gt;) ，配置基本 URL，然后选择一个受支持的[&#xA;  &lt;a href=&#34;https://docs.perplexity.ai/guides/model-cards&#34;&gt;模型&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://docs.perplexity.ai/guides/model-cards&#34;&gt;https://docs.perplexity.ai/guides/model-cards&lt;/a&gt;) 。&#xA;查看 [&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/PerplexityWithOpenAiChatModelIT.java&#34;&gt;PerplexityWithOpenAiChatModelIT.java&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/[PerplexityWithOpenAiChatModelIT.java]%28https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/PerplexityWithOpenAiChatModelIT.java%29&#34;&gt;https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/[PerplexityWithOpenAiChatModelIT.java](https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/PerplexityWithOpenAiChatModelIT.java)&lt;/a&gt;) 测试，了解将 Perplexity 与 Spring AI 结合使用的示例。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;创建 API 密钥 ：访问此处创建 API 密钥。使用 Spring AI 项目中的 spring.ai.openai.api-key 属性对其进行配置。&lt;/li&gt;&#xA;&lt;li&gt;设置 Perplexity Base URL：将 spring.ai.openai.base-url 属性设置为 api.perplexity.ai。&lt;/li&gt;&#xA;&lt;li&gt;Select a Perplexity Model（选择困惑度模型 ）：使用属性 spring.ai.openai.chat.model=&lt;model name&gt; 指定模型。有关可用选项，请参阅支持的型号 。&lt;/li&gt;&#xA;&lt;li&gt;设置聊天完成路径 ：设置为 spring.ai.openai.chat.completions-path /chat/completions。有关更多详细信息，请参阅  聊天完成 API。&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置这些配置属性：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.openai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-perplexity-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.openai.base-url&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;https://api.perplexity.ai&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.openai.chat.model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;llama-3.1-sonar-small-128k-online&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.openai.chat.completions-path&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/chat/completions&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 （SpEL） 来引用自定义环境变量：&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenAI 聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/openai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/openai/</guid>
      <description>&lt;h1 id=&#34;openai-聊天&#34;&gt;&#xA;  OpenAI 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#openai-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持来自 OpenAI 的各种 AI 语言模型，OpenAI 是 ChatGPT 背后的公司，由于其创建了行业领先的文本生成模型和嵌入，该公司在激发人们对 AI 驱动的文本生成的兴趣方面发挥了重要作用。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 OpenAI 创建一个 API 才能访问 ChatGPT 模型。&#xA;在 [&#xA;  &lt;a href=&#34;https://platform.openai.com/signup&#34;&gt;OpenAI 注册页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://platform.openai.com/signup&#34;&gt;https://platform.openai.com/signup&lt;/a&gt;)创建一个帐户，并在 [&#xA;  &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;API 密钥页面上&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;https://platform.openai.com/account/api-keys&lt;/a&gt;)生成令牌。&#xA;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.openai.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 openai.com 获取的 &lt;code&gt;API 密钥&lt;/code&gt;的值。&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.openai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-openai-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 （SpEL） 来引用自定义环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;openai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${OPENAI_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export OPENAI_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-openai-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve API key from a secure source or environment variable&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String apiKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OPENAI_API_KEY&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;添加存储库和-bom&#34;&gt;&#xA;  添加存储库和 BOM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e5%ad%98%e5%82%a8%e5%ba%93%e5%92%8c-bom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Spring AI 工件发布在 Maven Central 和 Spring Snapshot 存储库中。请参阅 [&#xA;  &lt;a href=&#34;../../getting-started.html#artifact-repositories&#34;&gt;Artifact Repositories&lt;/a&gt;](../../getting-started.html#artifact-repositories) 部分，将这些存储库添加到您的构建系统中。&#xA;为了帮助进行[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)，Spring AI 提供了一个 BOM（物料清单），以确保在整个项目中使用一致的 Spring AI 版本。请参阅[&#xA;  &lt;a href=&#34;../../getting-started.html#dependency-management&#34;&gt;依赖项管理&lt;/a&gt;](../../getting-started.html#dependency-management)部分，将 Spring AI BOM 添加到您的构建系统中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>千帆聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/qianfan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/qianfan/</guid>
      <description>&lt;h1 id=&#34;千帆聊天&#34;&gt;&#xA;  千帆聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8d%83%e5%b8%86%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;此功能已移至 Spring AI Community 存储库。&#xA;请访问 [&#xA;  &lt;a href=&#34;https://github.com/spring-ai-community/qianfan&#34;&gt;github.com/spring-ai-community/qianfan&lt;/a&gt;](https://&#xA;  &lt;a href=&#34;https://github.com/spring-ai-community/qianfan&#34;&gt;github.com/spring-ai-community/qianfan&lt;/a&gt;) 获取最新版本。&lt;/p&gt;</description>
    </item>
    <item>
      <title>智普 AI 聊天</title>
      <link>https://studyllm.github.io/docs/models/chat-models/zhipu-ai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/models/chat-models/zhipu-ai/</guid>
      <description>&lt;h1 id=&#34;智普-ai-聊天&#34;&gt;&#xA;  智普 AI 聊天&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%99%ba%e6%99%ae-ai-%e8%81%8a%e5%a4%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 支持 ZhiPu AI 的各种 AI 语言模型。您可以与 ZhiPu AI 语言模型交互，并基于 ZhiPuAI 模型创建多语言对话助手。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;&#xA;  先决条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;您需要使用 ZhiPuAI 创建 API 才能访问 ZhiPu AI 语言模型。&#xA;在  [&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/login&#34;&gt;智普 AI 注册页面&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/login&#34;&gt;https://open.bigmodel.cn/login&lt;/a&gt;)创建账号，并在 [&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/usercenter/apikeys&#34;&gt;API Keys 页面生成 Token&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://open.bigmodel.cn/usercenter/apikeys&#34;&gt;https://open.bigmodel.cn/usercenter/apikeys&lt;/a&gt;)。&#xA;Spring AI 项目定义了一个名为 &lt;code&gt;spring.ai.zhipuai.api-key&lt;/code&gt; 的配置属性，您应该将其设置为从 &lt;code&gt;API 密钥&lt;/code&gt;页面获取的 &lt;code&gt;API 密钥&lt;/code&gt;的值。&#xA;您可以在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置此配置属性：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spring.ai.zhipuai.api-key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;your-zhipuai-api-key&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了在处理 API 密钥等敏感信息时增强安全性，您可以使用 Spring 表达式语言 （SpEL） 来引用自定义环境变量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In application.yml&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;zhipuai&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;api-key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${ZHIPUAI_API_KEY}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In your environment or .env file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export ZHIPUAI_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;your-zhipuai-api-key&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您还可以在应用程序代码中以编程方式设置此配置：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
