<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>指南 on Spring AI 1.0.0</title>
    <link>https://studyllm.github.io/docs/%E6%8C%87%E5%8D%97/</link>
    <description>Recent content in 指南 on Spring AI 1.0.0</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <atom:link href="https://studyllm.github.io/docs/%E6%8C%87%E5%8D%97/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>提示工程模式</title>
      <link>https://studyllm.github.io/docs/%E6%8C%87%E5%8D%97/%E6%8F%90%E7%A4%BA%E5%B7%A5%E7%A8%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E6%8C%87%E5%8D%97/%E6%8F%90%E7%A4%BA%E5%B7%A5%E7%A8%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h1 id=&#34;提示工程模式&#34;&gt;&#xA;  提示工程模式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8f%90%e7%a4%ba%e5%b7%a5%e7%a8%8b%e6%a8%a1%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;基于全面的[&#xA;  &lt;a href=&#34;https://www.kaggle.com/whitepaper-prompt-engineering&#34;&gt;即时工程指南&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://www.kaggle.com/whitepaper-prompt-engineering&#34;&gt;https://www.kaggle.com/whitepaper-prompt-engineering&lt;/a&gt;) ，我们将对即时工程技术进行实际应用。该指南涵盖了有效即时工程的理论、原则和模式，并演示了如何使用 Spring AI 流畅的 [&#xA;  &lt;a href=&#34;../chatclient.html&#34;&gt;ChatClient API&lt;/a&gt;](../chatclient.html) 将这些概念转化为可运行的 Java 代码。本文中使用的演示源代码可在以下位置获取： [&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai-examples/tree/main/prompt-engineering/prompt-engineering-patterns&#34;&gt;即时工程模式示例&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://github.com/spring-projects/spring-ai-examples/tree/main/prompt-engineering/prompt-engineering-patterns&#34;&gt;https://github.com/spring-projects/spring-ai-examples/tree/main/prompt-engineering/prompt-engineering-patterns&lt;/a&gt;) 。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1配置&#34;&gt;&#xA;  1.配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;配置部分概述了如何使用 Spring AI 设置和调整大型语言模型 (LLM)。它涵盖了如何根据用例选择合适的 LLM 提供程序，以及如何配置重要的生成参数，以控制模型输出的质量、样式和格式。&lt;/p&gt;&#xA;&lt;h2 id=&#34;法学硕士llm提供商选择&#34;&gt;&#xA;  法学硕士（LLM）提供商选择&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b3%95%e5%ad%a6%e7%a1%95%e5%a3%abllm%e6%8f%90%e4%be%9b%e5%95%86%e9%80%89%e6%8b%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;为了快速进行工程设计，您需要先选择一个模型。Spring AI 支持[&#xA;  &lt;a href=&#34;comparison.html&#34;&gt;多个 LLM 提供商&lt;/a&gt;](comparison.html) （例如 OpenAI、Anthropic、Google Vertex AI、AWS Bedrock、Ollama 等），让您无需更改应用程序代码即可切换提供商 - 只需更新配置即可。只需添加所选的启动依赖项 &lt;code&gt;spring-ai-starter-model-&amp;lt;MODEL-PROVIDER-NAME&amp;gt;&lt;/code&gt; 即可。例如，以下是如何启用 Anthropic Claude API：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-starter-model-anthropic&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您可以像这样指定 LLM 模型名称：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;options&lt;/span&gt;(ChatOptions.&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .&lt;span style=&#34;color:#a6e22e&#34;&gt;model&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;claude-3-7-sonnet-latest&amp;#34;&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;// Use Anthropic&amp;#39;s Claude model&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在[&#xA;  &lt;a href=&#34;../chatmodel.html&#34;&gt;参考文档&lt;/a&gt;](../chatmodel.html)中查找有关启用每个模型的详细信息。&lt;/p&gt;&#xA;&lt;h2 id=&#34;llm-输出配置&#34;&gt;&#xA;  LLM 输出配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#llm-%e8%be%93%e5%87%ba%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;../../images/chat-options-flow.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;在深入研究即时工程技术之前，我们有必要了解如何配置 LLM 的输出行为。Spring AI 提供了多个配置选项，可让您通过 [&#xA;  &lt;a href=&#34;../chatmodel.html#_chat_options&#34;&gt;ChatOptions&lt;/a&gt;](../chatmodel.html#_chat_options) 构建器控制生成的各个方面。&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建有效代理</title>
      <link>https://studyllm.github.io/docs/%E6%8C%87%E5%8D%97/%E6%9E%84%E5%BB%BA%E6%9C%89%E6%95%88%E4%BB%A3%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E6%8C%87%E5%8D%97/%E6%9E%84%E5%BB%BA%E6%9C%89%E6%95%88%E4%BB%A3%E7%90%86/</guid>
      <description>&lt;h1 id=&#34;构建有效代理&#34;&gt;&#xA;  构建有效代理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9e%84%e5%bb%ba%e6%9c%89%e6%95%88%e4%bb%a3%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;代理系统&#34;&gt;&#xA;  代理系统&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%a3%e7%90%86%e7%b3%bb%e7%bb%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;该研究出版物对两种类型的代理系统进行了重要的架构区分：&lt;/p&gt;&#xA;&lt;p&gt;关键在于，虽然完全自主的代理看似诱人，但工作流通常能为定义明确的任务提供更好的可预测性和一致性。这完全符合企业对可靠性和可维护性至关重要的需求。&lt;/p&gt;&#xA;&lt;p&gt;让我们来看看 Spring AI 如何通过五种基本模式实现这些概念，每种模式都服务于特定的用例：&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-链式工作流程&#34;&gt;&#xA;  1. 链式工作流程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e9%93%be%e5%bc%8f%e5%b7%a5%e4%bd%9c%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;链式工作流模式体现了将复杂任务分解为更简单、更易于管理的步骤的原则。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F7418719e3dab222dccb379b8879e1dc08ad34c78-2401x1000.png&amp;amp;w=3840&amp;amp;q=75&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;何时使用：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;具有明确顺序步骤的任务&lt;/li&gt;&#xA;&lt;li&gt;当你想以延迟换取更高的准确度时&lt;/li&gt;&#xA;&lt;li&gt;每一步都建立在前一步的输出之上&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;以下是 Spring AI 实现的一个实际示例：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ChainWorkflow&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; ChatClient chatClient;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; systemPrompts;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;chain&lt;/span&gt;(String userInput) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        String response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; userInput;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (String prompt : systemPrompts) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            String input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String.&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{%s}\n {%s}&amp;#34;&lt;/span&gt;, prompt, response);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chatClient.&lt;span style=&#34;color:#a6e22e&#34;&gt;prompt&lt;/span&gt;(input).&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; response;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此实施体现了几个关键原则：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每一步都有重点责任&lt;/li&gt;&#xA;&lt;li&gt;一个步骤的输出成为下一个步骤的输入&lt;/li&gt;&#xA;&lt;li&gt;该链易于扩展和维护&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2-并行化工作流程&#34;&gt;&#xA;  2. 并行化工作流程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e5%b9%b6%e8%a1%8c%e5%8c%96%e5%b7%a5%e4%bd%9c%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;LLM 可以同时执行任务并通过编程方式汇总其输出。&lt;/p&gt;</description>
    </item>
    <item>
      <title>云绑定</title>
      <link>https://studyllm.github.io/docs/%E6%8C%87%E5%8D%97/%E4%BA%91%E7%BB%91%E5%AE%9A/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://studyllm.github.io/docs/%E6%8C%87%E5%8D%97/%E4%BA%91%E7%BB%91%E5%AE%9A/</guid>
      <description>&lt;h1 id=&#34;云绑定&#34;&gt;&#xA;  云绑定&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%91%e7%bb%91%e5%ae%9a&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Spring AI 基于 [&#xA;  &lt;a href=&#34;https://github.com/spring-cloud/spring-cloud-bindings&#34;&gt;spring-cloud-bindings&lt;/a&gt;](&#xA;  &lt;a href=&#34;https://github.com/spring-cloud/[spring-cloud-bindings]%28https://github.com/spring-cloud/spring-cloud-bindings%29&#34;&gt;https://github.com/spring-cloud/[spring-cloud-bindings](https://github.com/spring-cloud/spring-cloud-bindings)&lt;/a&gt;) 的基础，提供对云绑定的支持。这允许应用程序为提供程序指定绑定类型，然后使用通用格式表达属性。spring-ai 云绑定将处理这些属性，并将其绑定到 spring-ai 原生属性。&lt;/p&gt;&#xA;&lt;p&gt;例如，使用 &lt;code&gt;OpenAi&lt;/code&gt; 时，绑定类型为 &lt;code&gt;openai&lt;/code&gt; 。使用属性 spring.ai.cloud.bindings.&lt;code&gt;openai&lt;/code&gt;.enabled 可以启用或禁用绑定处理器。默认情况下，指定绑定类型时将启用此属性。可以指定 &lt;code&gt;api-key&lt;/code&gt; 、 &lt;code&gt;uri&lt;/code&gt; 、 &lt;code&gt;username&lt;/code&gt; 、 &lt;code&gt;password&lt;/code&gt; 等配置，spring-ai 会将它们映射到所支持系统中的相应属性。&lt;/p&gt;&#xA;&lt;p&gt;要启用云绑定支持，请在应用程序中包含以下依赖项。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.ai&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-ai-spring-cloud-bindings&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者到你的 Gradle &lt;code&gt;build.gradle&lt;/code&gt; 构建文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.ai:spring-ai-spring-cloud-bindings&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;可用的云绑定&#34;&gt;&#xA;  可用的云绑定&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%af%e7%94%a8%e7%9a%84%e4%ba%91%e7%bb%91%e5%ae%9a&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;以下是 &lt;code&gt;spring-ai-spring-clou-bindings&lt;/code&gt; 模块中当前提供云绑定支持的组件：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
